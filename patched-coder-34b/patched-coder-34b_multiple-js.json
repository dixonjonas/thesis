[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            if (Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i=0; i<numbers.length; i++){\n        for(var j=i+1; j<numbers.length; j++){\n            if(Math.abs(numbers[i]-numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let groups = [];\n    let current_group = \"\";\n    let open_parens = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        let char = paren_string[i];\n        if(char === \"(\"){\n            open_parens++;\n        } else if(char === \")\"){\n            open_parens--;\n        }\n        current_group += char;\n        if(open_parens === 0){\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var current_group = \"\";\n  var open_parens = 0;\n  for (var i = 0; i < paren_string.length; i++) {\n    var current_char = paren_string[i];\n    if (current_char === \"(\") {\n      open_parens++;\n    } else if (current_char === \")\") {\n      open_parens--;\n    }\n    current_group += current_char;\n    if (open_parens === 0) {\n      paren_groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var result = [];\n    var current_string = \"\";\n    var current_level = 0;\n    var current_group = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            current_level++;\n        }\n        else if(paren_string[i] === \")\"){\n            current_level--;\n        }\n        if(current_level === 0){\n            result[current_group] = current_string;\n            current_string = \"\";\n            current_group++;\n        }\n        else{\n            current_string += paren_string[i];\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var paren_groups = [];\n    var paren_group = \"\";\n    var paren_count = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            paren_count++;\n        }\n        else if(paren_string[i] == \")\"){\n            paren_count--;\n        }\n        paren_group += paren_string[i];\n        if(paren_count == 0){\n            paren_groups.push(paren_group);\n            paren_group = \"\";\n        }\n    }\n    return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var groups = [];\n    var current_group = \"\";\n    var open_parens = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            open_parens++;\n        }\n        else if(paren_string[i] == \")\"){\n            open_parens--;\n        }\n        current_group += paren_string[i];\n        if(open_parens == 0){\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let paren_groups = [];\n    let current_group = \"\";\n    let open_parens = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            open_parens++;\n        }\n        else if(paren_string[i] === \")\"){\n            open_parens--;\n        }\n        current_group += paren_string[i];\n        if(open_parens === 0){\n            paren_groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = \"\";\n  var open_parens = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    var c = paren_string[i];\n    if(c === \"(\"){\n      open_parens++;\n    } else if(c === \")\"){\n      open_parens--;\n    }\n    current_group += c;\n    if(open_parens === 0){\n      groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var groups = [];\n    var current_group = \"\";\n    var current_depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n        if(c === \"(\"){\n            current_depth++;\n        }\n        if(c === \")\"){\n            current_depth--;\n        }\n        current_group += c;\n        if(current_depth === 0){\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let paren_groups = [];\n    let current_group = '';\n    let open_parens = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n            open_parens++;\n        }\n        if(paren_string[i] === ')'){\n            open_parens--;\n        }\n        current_group += paren_string[i];\n        if(open_parens === 0){\n            paren_groups.push(current_group);\n            current_group = '';\n        }\n    }\n    return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let groups = [];\n    let current_group = \"\";\n    let open_parens = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            open_parens++;\n        }\n        if(paren_string[i] === \")\"){\n            open_parens--;\n        }\n        current_group += paren_string[i];\n        if(open_parens === 0){\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var groups = [];\n    var group = \"\";\n    var open = 0;\n    var closed = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n        if(c == \"(\"){\n            open++;\n        } else if(c == \")\"){\n            closed++;\n        }\n        group += c;\n        if(open == closed){\n            groups.push(group);\n            group = \"\";\n            open = 0;\n            closed = 0;\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var groups = [];\n  var current_group = '';\n  var open_parens = 0;\n  for (var i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n      open_parens++;\n    }\n    if (paren_string[i] === ')'){\n      open_parens--;\n    }\n    current_group += paren_string[i];\n    if (open_parens === 0){\n      groups.push(current_group);\n      current_group = '';\n    }\n  }\n  return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var groups = [];\n    var current_group = \"\";\n    var open_parens = 0;\n    for (var i = 0; i < paren_string.length; i++) {\n        var c = paren_string[i];\n        if (c === \"(\") {\n            open_parens++;\n        } else if (c === \")\") {\n            open_parens--;\n        }\n        current_group += c;\n        if (open_parens === 0) {\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let groups = [];\n    let current_group = \"\";\n    let open_parens = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        let char = paren_string[i];\n        if(char === \"(\"){\n            open_parens++;\n        }\n        if(char === \")\"){\n            open_parens--;\n        }\n        current_group += char;\n        if(open_parens === 0){\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var groups = [];\n    var group = \"\";\n    var open_parens = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n            open_parens++;\n        }\n        if(paren_string[i] == \")\"){\n            open_parens--;\n        }\n        if(paren_string[i] != \" \"){\n            group += paren_string[i];\n        }\n        if(open_parens == 0){\n            groups.push(group);\n            group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var paren_groups = [];\n  var paren_group = \"\";\n  var paren_count = 0;\n  for(var i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == \"(\"){\n      paren_count++;\n    }\n    if(paren_string[i] == \")\"){\n      paren_count--;\n    }\n    paren_group += paren_string[i];\n    if(paren_count == 0){\n      paren_groups.push(paren_group);\n      paren_group = \"\";\n    }\n  }\n  return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var groups = [];\n    var current_group = \"\";\n    var open_paren = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            open_paren++;\n        }\n        else if(paren_string[i] === \")\"){\n            open_paren--;\n        }\n        current_group += paren_string[i];\n        if(open_paren === 0){\n            groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let paren_groups = [];\n    let current_group = \"\";\n    let open_parens = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n            open_parens++;\n        }\n        else if(paren_string[i] === \")\"){\n            open_parens--;\n        }\n        current_group += paren_string[i];\n        if(open_parens === 0){\n            paren_groups.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let paren_groups = [];\n  let current_group = \"\";\n  let open_parens = 0;\n  for(let i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      open_parens++;\n    }\n    if(paren_string[i] === \")\"){\n      open_parens--;\n    }\n    current_group += paren_string[i];\n    if(open_parens === 0){\n      paren_groups.push(current_group);\n      current_group = \"\";\n    }\n  }\n  return paren_groups;\n}\n", "//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var result = [];\n    var current_group = \"\";\n    var current_depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n        if(c == \"(\"){\n            current_depth++;\n        }\n        if(c == \")\"){\n            current_depth--;\n        }\n        current_group += c;\n        if(current_depth == 0){\n            result.push(current_group);\n            current_group = \"\";\n        }\n    }\n    return result;\n}\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.trunc(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n", "//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    return number - Math.floor(number);\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    var balance = 0;\n    for (var i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for(var i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if(balance < 0) return true;\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for (var i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if (balance < 0) return true;\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    var balance = 0;\n    for (var i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if (balance < 0){\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    var balance = 0;\n    for (var i = 0; i < operations.length; i++){\n        balance += operations[i];\n        if (balance < 0){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for (var i = 0; i < operations.length; i++){\n    balance += operations[i];\n    if (balance < 0) return true;\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n", "//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diff = numbers.map(function(x) { return Math.abs(x - mean); });\n    return diff.reduce(function(a, b) { return a + b; }) / diff.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diff = numbers.map(function(x) { return Math.abs(x - mean); });\n    return diff.reduce(function(a, b) { return a + b; }) / diff.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diffs = numbers.map(function(x) { return Math.abs(x - mean); });\n    return diffs.reduce(function(a, b) { return a + b; }) / diffs.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    //Calculate the mean of the numbers\n    var mean = numbers.reduce(function(a, b) { return a + b; }, 0) / numbers.length;\n\n    //Calculate the absolute differences from the mean\n    var differences = numbers.map(function(x) { return Math.abs(x - mean); });\n\n    //Calculate the mean of the absolute differences\n    return differences.reduce(function(a, b) { return a + b; }, 0) / differences.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_differences = numbers.map(function(x){\n        return Math.abs(x - mean);\n    });\n    return mean(abs_differences);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    //Calculate the mean of the numbers\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n\n    //Calculate the absolute differences from the mean\n    var differences = numbers.map(function(x) { return Math.abs(x - mean); });\n\n    //Calculate the average of those differences\n    return differences.reduce(function(a, b) { return a + b; }) / differences.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diff = numbers.map(function(x) { return Math.abs(x - mean); });\n    var mad = diff.reduce(function(a, b) { return a + b; }) / numbers.length;\n    return mad;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diff = numbers.map(function(x) { return Math.abs(x - mean); });\n    return diff.reduce(function(a, b) { return a + b; }) / diff.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){return Math.abs(x - mean);});\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = mean(numbers);\n    var abs_diff = numbers.map(function(x){return Math.abs(x - mean)});\n    return mean(abs_diff);\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diffs = numbers.map(function(x) { return Math.abs(x - mean); });\n    return diffs.reduce(function(a, b) { return a + b; }) / diffs.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){ return a + b; }) / numbers.length;\n    var absolute_deviations = numbers.map(function(x){ return Math.abs(x - mean); });\n    return absolute_deviations.reduce(function(a, b){ return a + b; }) / absolute_deviations.length;\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){return Math.abs(x - mean)});\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){return Math.abs(x - mean)});\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){return Math.abs(x - mean)});\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b){ return a + b; }) / numbers.length\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); })\n    return diffs.reduce(function(a, b){ return a + b; }) / diffs.length\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.mean();\n    var diffs = numbers.map(function(x){ return Math.abs(x - mean); });\n    return diffs.mean();\n}\n", "//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    var mean = numbers.reduce(function(a, b) { return a + b; }) / numbers.length;\n    var diff = numbers.map(function(x) { return Math.abs(x - mean); });\n    var mad = diff.reduce(function(a, b) { return a + b; }) / diff.length;\n    return mad;\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return [];\n    }\n    var result = [];\n    for(var i = 0; i < numbers.length - 1; i++){\n        result.push(numbers[i]);\n        result.push(delimeter);\n    }\n    result.push(numbers[numbers.length - 1]);\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1)\n            result.push(delimeter);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i < numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if (numbers.length === 0) {\n    return numbers;\n  }\n  var result = [numbers[0]];\n  for (var i = 1; i < numbers.length; i++) {\n    result.push(delimeter);\n    result.push(numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0) return numbers;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1) result.push(delimeter);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i < numbers.length - 1){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if (numbers.length === 0) {\n    return [];\n  }\n  var result = [];\n  for (var i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n  }\n  result.push(numbers[numbers.length - 1]);\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0) return numbers;\n  var result = [];\n  for(var i = 0; i < numbers.length - 1; i++){\n    result.push(numbers[i], delimeter);\n  }\n  result.push(numbers[numbers.length - 1]);\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if (numbers.length === 0) {\n    return [];\n  }\n  var result = [numbers[0]];\n  for (var i = 1; i < numbers.length; i++) {\n    result.push(delimeter);\n    result.push(numbers[i]);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if (numbers.length === 0) {\n    return [];\n  }\n  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    result.push(numbers[i]);\n    if (i !== numbers.length - 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    if(numbers.length === 0){\n        return [];\n    }\n    var result = [numbers[0]];\n    for(var i = 1; i < numbers.length; i++){\n        result.push(delimeter);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  var result = [];\n  for (var i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if (i < numbers.length - 1)\n      result.push(delimeter);\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  if(numbers.length === 0){\n    return [];\n  }\n  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n    result.push(numbers[i]);\n    if(i < numbers.length - 1){\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n", "//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i]);\n        if(i < numbers.length - 1){\n            result.push(delimeter);\n        }\n    }\n    return result;\n}\n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var current_level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                current_level += 1;\n                if(current_level > max_level){\n                    max_level = current_level;\n                }\n            }\n            else if(paren_group[j] == \")\"){\n                current_level -= 1;\n            }\n        }\n        max_nesting_levels.push(max_level);\n    }\n    return max_nesting_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var result = [];\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n            if(level > max_level){\n                max_level = level;\n            }\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_depths = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var depth = 0;\n        var max_depth = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                depth += 1;\n                if(depth > max_depth){\n                    max_depth = depth;\n                }\n            }\n            else if(paren_groups[i][j] == \")\"){\n                depth -= 1;\n            }\n        }\n        max_depths.push(max_depth);\n    }\n    return max_depths;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var stack = [];\n        var max_depth = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            var paren = paren_group[j];\n            if(paren == \"(\"){\n                stack.push(paren);\n                if(stack.length > max_depth){\n                    max_depth = stack.length;\n                }\n            } else if(paren == \")\"){\n                if(stack.length == 0){\n                    return -1;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        if(stack.length != 0){\n            return -1;\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var paren_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var paren_level = 0;\n        var max_paren_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            var paren = paren_group[j];\n            if(paren == \"(\"){\n                paren_level += 1;\n                if(paren_level > max_paren_level){\n                    max_paren_level = paren_level;\n                }\n            } else if(paren == \")\"){\n                paren_level -= 1;\n            }\n        }\n        paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        max_nesting.push(get_max_nesting(paren_groups[i]));\n    }\n    return max_nesting;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(' ');\n    var paren_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        paren_levels.push(get_paren_level(paren_groups[i]));\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for (var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for (var j = 0; j < paren_group.length; j++){\n            var paren = paren_group[j];\n            if (paren == \"(\"){\n                level += 1;\n                if (level > max_level){\n                    max_level = level;\n                }\n            } else if (paren == \")\"){\n                level -= 1;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n            if(level > max_level){\n                max_level = level;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_nesting_levels = [];\n    for (var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var current_nesting_level = 0;\n        var max_nesting_level = 0;\n        for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j] == \"(\"){\n                current_nesting_level += 1;\n                if (current_nesting_level > max_nesting_level){\n                    max_nesting_level = current_nesting_level;\n                }\n            }\n            else if (paren_group[j] == \")\"){\n                current_nesting_level -= 1;\n            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return max_nesting_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var paren_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        paren_levels.push(get_paren_level(paren_groups[i]));\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(\" \");\n    let max_levels = [];\n    for(let i = 0; i < paren_groups.length; i++){\n        let level = 0;\n        let max_level = 0;\n        for(let j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j] == \"(\"){\n                level += 1;\n            }\n            else if(paren_groups[i][j] == \")\"){\n                level -= 1;\n            }\n            if(level > max_level){\n                max_level = level;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            var paren = paren_group[j];\n            if(paren == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren == \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var max_levels = [];\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var level = 0;\n        var max_level = 0;\n        for(var j=0; j<paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n                if(level > max_level){\n                    max_level = level;\n                }\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var depth = 0;\n        var max_depth = 0;\n        for(var j = 0; j < group.length; j++){\n            if(group[j] == \"(\"){\n                depth++;\n                if(depth > max_depth){\n                    max_depth = depth;\n                }\n            }\n            else if(group[j] == \")\"){\n                depth--;\n            }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n        var max_level = 0;\n        var level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n            if(paren_group[j] == \"(\"){\n                level++;\n            }\n            else if(paren_group[j] == \")\"){\n                level--;\n            }\n            if(level > max_level){\n                max_level = level;\n            }\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n    for(let i = 0; i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n        let paren_level = 0;\n        let paren_stack = [];\n        for(let j = 0; j < paren_group.length; j++){\n            let paren = paren_group[j];\n            if(paren == \"(\"){\n                paren_stack.push(paren);\n                paren_level++;\n            } else if(paren == \")\"){\n                paren_stack.pop();\n                paren_level--;\n            }\n        }\n        paren_levels.push(paren_level);\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var paren_levels = [];\n    for (var i = 0; i < paren_groups.length; i++){\n        paren_levels.push(get_paren_level(paren_groups[i]));\n    }\n    return paren_levels;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for(let i = 0; i < paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n        let max_level = 0;\n        let current_level = 0;\n        for(let j = 0; j < paren_group.length; j++){\n            let paren = paren_group[j];\n            if(paren === \"(\"){\n                current_level += 1;\n            }\n            else if(paren === \")\"){\n                current_level -= 1;\n            }\n            max_level = Math.max(max_level, current_level);\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n", "//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_groups.length; i++){\n        var group = paren_groups[i];\n        var max_depth = 0;\n        var current_depth = 0;\n        for(var j = 0; j < group.length; j++){\n            var paren = group[j];\n            if(paren == \"(\"){\n                current_depth += 1;\n                max_depth = Math.max(max_depth, current_depth);\n            }\n            else if(paren == \")\"){\n                current_depth -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) >= 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].indexOf(substring) >= 0) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered_strings = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(substring) != -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n    return filtered_strings;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(substring) != -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.indexOf(substring) !== -1;\n    });\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n", "//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  if(numbers.length === 0){\n    return [0, 1];\n  }\n  let sum = 0;\n  let product = 1;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var result = [];\n    var max = -Infinity;\n    for(var i = 0; i < numbers.length; i++){\n        max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for (let i = 0; i < numbers.length; i++){\n        if (numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = -Infinity;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let result = [];\n    let max = -Infinity;\n    for(let i = 0; i < numbers.length; i++){\n        max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = numbers[0];\n    var result = [max];\n    for (var i = 1; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n", "//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        result.push(max);\n    }\n    return result;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    return string + reverse(string.substring(0, string.length - palindrome_suffix.length));\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_length = 0;\n    var palindrome_start = 0;\n    var palindrome_end = 0;\n    var palindrome_suffix = \"\";\n    var palindrome_prefix = \"\";\n    var palindrome_middle = \"\";\n    var palindrome_result = \"\";\n\n    // Find the longest postfix of supplied string that is a palindrome.\n    for (var i = 0; i < string.length; i++) {\n        var j = string.length - 1;\n        while (j >= i) {\n            if (string[i] == string[j]) {\n                palindrome_length = j - i + 1;\n                palindrome_start = i;\n                palindrome_end = j;\n                palindrome_suffix = string.substring(palindrome_start, palindrome_end + 1);\n                break;\n            }\n            j--;\n        }\n    }\n\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    if (palindrome_length > 0) {\n        palindrome_prefix = string.substring(0, palindrome_start);\n        palindrome_middle = string.substring(palindrome_start + palindrome_length, string.length);\n        palindrome_result = palindrome_middle + palindrome_suffix + palindrome_prefix.split(\"\").reverse().join(\"\");\n    }\n\n    return palindrome_result;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome = find_palindrome(string);\n    return string + reverse(string.substring(0, string.length - palindrome.length));\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = 0;\n    var j = string.length - 1;\n    while(i < j && string[i] == string[j]){\n        i++;\n        j--;\n    }\n    return string + string.slice(0, i).split('').reverse().join('');\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    if (string.length == 0) {\n        return \"\";\n    }\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substr(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substr(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var i = 0;\n    var j = string.length - 1;\n    while (i < j && string[i] == string[j]){\n        i++;\n        j--;\n    }\n    return string + string.slice(i, j + 1).split(\"\").reverse().join(\"\");\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var palindrome_prefix = reverse(palindrome_suffix);\n    return string + palindrome_prefix;\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substring(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    if(string.length == 0){\n        return \"\";\n    }\n    var suffix_length = find_palindrome(string);\n    var prefix = string.slice(0, string.length - suffix_length);\n    var suffix = string.slice(string.length - suffix_length);\n    return suffix + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome = find_palindrome(string);\n    var prefix = string.substring(0, string.length - palindrome.length);\n    return string + reverse(prefix);\n}\n", "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome_suffix = find_palindrome_suffix(string);\n    var prefix = string.substr(0, string.length - palindrome_suffix.length);\n    return string + reverse(prefix);\n}\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }\n        else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] === \"0\" && b[i] === \"0\"){\n            result += \"0\";\n        }\n        else if(a[i] === \"1\" && b[i] === \"1\"){\n            result += \"0\";\n        }\n        else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}\n", "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b[i]){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let max = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > max.length) {\n            max = strings[i];\n        }\n    }\n    return max;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let longest = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    return strings.reduce(function(a, b){\n        return a.length > b.length ? a : b;\n    });\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length == 0){\n        return undefined;\n    }\n    var longestString = strings[0];\n    for(var i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let longestString = strings[0];\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].length > longestString.length) longestString = strings[i];\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0) return undefined;\n    let longest = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    let longestString = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if(strings.length === 0){\n        return undefined;\n    }\n    var longestString = strings[0];\n    for(var i = 1; i < strings.length; i++){\n        if(strings[i].length > longestString.length){\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    var max = strings[0];\n    for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length > max.length) {\n            max = strings[i];\n        }\n    }\n    return max;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  let longestString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length){\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0){\n    return undefined;\n  }\n  let longestString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length){\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let longestString = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > longestString.length) {\n            longestString = strings[i];\n        }\n    }\n    return longestString;\n}\n", "//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0){\n    return undefined;\n  }\n  let longestString = strings[0];\n  for(let i = 1; i < strings.length; i++){\n    if(strings[i].length > longestString.length){\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a === 0) return b;\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a > b) return greatest_common_divisor(a % b, b);\n    return greatest_common_divisor(a, b % a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a == 0) return b;\n    if (b == 0) return a;\n    if (a > b) return greatest_common_divisor(a % b, b);\n    return greatest_common_divisor(a, b % a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a === 0) {\n        return b;\n    }\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a == 0) return b;\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0) return a;\n    return greatest_common_divisor(b, a % b);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a > b) return greatest_common_divisor(a - b, b);\n    return greatest_common_divisor(a, b - a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if (a == 0) return b;\n    return greatest_common_divisor(b % a, a);\n}\n", "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    if(b == 0){\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.substr(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.substring(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for (var i = 1; i <= string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for (var i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.substring(0, i));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for (var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}\n", "//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    var prefixes = [];\n    for(var i = 1; i <= string.length; i++){\n        prefixes.push(string.substr(0, i));\n    }\n    return prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var i = 0;\n    var result = \"\";\n    while(i <= n){\n        result += i + \" \";\n        i++;\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var str = \"\";\n    for(var i = 0; i <= n; i++){\n        str += i + \" \";\n    }\n    return str.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i=0; i<=n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var i = 0;\n    var result = \"\";\n    while(i <= n){\n        result += i + \" \";\n        i++;\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for (var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i=0; i<=n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i=0; i<=n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result;\n}\n", "//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    var result = \"\";\n    for(var i = 0; i <= n; i++){\n        result += i + \" \";\n    }\n    return result.trim();\n}\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let count = 0;\n    let chars = {};\n    for(let i = 0; i < string.length; i++){\n        if(!chars[string[i]]){\n            count++;\n            chars[string[i]] = true;\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct = new Set(string.toLowerCase())\n    return distinct.size\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.split('')).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinctCharacters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinctCharacters.add(string[i].toLowerCase());\n    }\n    return distinctCharacters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var chars = {};\n    for(var i = 0; i < string.length; i++){\n        var char = string[i];\n        if(chars[char] === undefined){\n            chars[char] = true;\n        }\n    }\n    return Object.keys(chars).length;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.split(\"\")).size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return new Set(string.toLowerCase()).size\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var count = 0;\n    var chars = {};\n    for(var i = 0; i < string.length; i++){\n        var char = string[i];\n        if(!chars[char]){\n            chars[char] = true;\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var count = 0;\n    var distinct = [];\n    for(var i = 0; i < string.length; i++){\n        if(distinct.indexOf(string[i]) == -1){\n            distinct.push(string[i]);\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return string.toLowerCase().split(\"\").filter(function(item, pos, self){\n        return self.indexOf(item) == pos;\n    }).length;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let count = 0;\n    let set = new Set();\n    for(let i = 0; i < string.length; i++){\n        if(!set.has(string[i].toLowerCase())){\n            count++;\n            set.add(string[i].toLowerCase());\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct = new Set();\n    for(let char of string){\n        distinct.add(char.toLowerCase());\n    }\n    return distinct.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let count = 0;\n    let map = {};\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(!map[char]){\n            map[char] = true;\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var distinct_characters = new Set();\n    for(var i = 0; i < string.length; i++){\n        distinct_characters.add(string[i].toLowerCase());\n    }\n    return distinct_characters.size;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    return string.toLowerCase().split(\"\").filter(function(item, pos, self){\n        return self.indexOf(item) == pos;\n    }).length;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let chars = {}\n    for(let i = 0; i < string.length; i++){\n        if(chars[string[i].toLowerCase()] === undefined){\n            chars[string[i].toLowerCase()] = 1\n        }\n    }\n    return Object.keys(chars).length\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let chars = {}\n    for(let i = 0; i < string.length; i++){\n        let char = string[i]\n        if(chars[char] === undefined){\n            chars[char] = 1\n        }\n    }\n    return Object.keys(chars).length\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let count = 0;\n    let map = {};\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        if(!map[char]){\n            map[char] = true;\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let count = 0;\n    let chars = {};\n    for(let i = 0; i < string.length; i++){\n        if(!chars[string[i]]){\n            count++;\n            chars[string[i]] = true;\n        }\n    }\n    return count;\n}\n", "//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let distinct_characters = new Set();\n    for(let i = 0; i < string.length; i++){\n        distinct_characters.add(string[i].toLowerCase());\n    }\n    return distinct_characters.size;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var notes = music_string.split(\" \");\n    var note_lengths = [];\n    for(var i = 0; i < notes.length; i++){\n        if(notes[i] === \"o\"){\n            note_lengths.push(4);\n        }\n        else if(notes[i] === \"o|\"){\n            note_lengths.push(2);\n        }\n        else if(notes[i] === \".|\"){\n            note_lengths.push(1);\n        }\n    }\n    return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var result = [];\n    var notes = music_string.split(\" \");\n    for(var i = 0; i < notes.length; i++){\n        if(notes[i] == \"o\"){\n            result.push(4);\n        }\n        else if(notes[i] == \"o|\"){\n            result.push(2);\n        }\n        else if(notes[i] == \".|\"){\n            result.push(1);\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var notes = music_string.split(\" \");\n    var note_lengths = [];\n    for(var i = 0; i < notes.length; i++){\n        if(notes[i] === \"o\"){\n            note_lengths.push(4);\n        }\n        else if(notes[i] === \"o|\"){\n            note_lengths.push(2);\n        }\n        else if(notes[i] === \".|\"){\n            note_lengths.push(1);\n        }\n    }\n    return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var music_array = music_string.split(' ');\n  var music_length = music_array.length;\n  var music_beats = [];\n  for (var i = 0; i < music_length; i++) {\n    if (music_array[i] === 'o') {\n      music_beats.push(4);\n    } else if (music_array[i] === 'o|') {\n      music_beats.push(2);\n    } else if (music_array[i] === '.|') {\n      music_beats.push(1);\n    }\n  }\n  return music_beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let music_array = music_string.split(' ');\n    let music_length = music_array.length;\n    let music_notes = [];\n    for(let i = 0; i < music_length; i++){\n        if(music_array[i] === 'o'){\n            music_notes.push(4);\n        }\n        else if(music_array[i] === 'o|'){\n            music_notes.push(2);\n        }\n        else if(music_array[i] === '.|'){\n            music_notes.push(1);\n        }\n    }\n    return music_notes;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var notes = music_string.split(\" \");\n  var note_lengths = [];\n  for(var i = 0; i < notes.length; i++){\n    if(notes[i] == \"o\"){\n      note_lengths.push(4);\n    } else if(notes[i] == \"o|\"){\n      note_lengths.push(2);\n    } else if(notes[i] == \".|\"){\n      note_lengths.push(1);\n    }\n  }\n  return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var notes = music_string.split(\" \");\n    var note_lengths = [];\n    for(var i = 0; i < notes.length; i++){\n        if(notes[i] == \"o\"){\n            note_lengths.push(4);\n        }\n        else if(notes[i] == \"o|\"){\n            note_lengths.push(2);\n        }\n        else if(notes[i] == \".|\"){\n            note_lengths.push(1);\n        }\n    }\n    return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let music_array = music_string.split(' ');\n    let result = [];\n    for(let i = 0; i < music_array.length; i++){\n        if(music_array[i] === 'o'){\n            result.push(4);\n        }\n        else if(music_array[i] === 'o|'){\n            result.push(2);\n        }\n        else if(music_array[i] === '.|'){\n            result.push(1);\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var music_array = music_string.split(' ');\n  var music_beats = [];\n  for(var i = 0; i < music_array.length; i++){\n    if(music_array[i] == 'o'){\n      music_beats.push(4);\n    }\n    else if(music_array[i] == 'o|'){\n      music_beats.push(2);\n    }\n    else if(music_array[i] == '.|'){\n      music_beats.push(1);\n    }\n  }\n  return music_beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var music_array = music_string.split(' ');\n  var notes = {\n    'o': 4,\n    'o|': 2,\n    '.|': 1\n  };\n  var note_lengths = [];\n  for (var i = 0; i < music_array.length; i++) {\n    note_lengths.push(notes[music_array[i]]);\n  }\n  return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let music_array = music_string.split(\" \");\n    let notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n    let result = [];\n    for (let note of music_array){\n        result.push(notes[note]);\n    }\n    return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(\" \");\n    let note_lengths = [];\n    for(let note of notes){\n        if(note === \"o\"){\n            note_lengths.push(4);\n        }\n        else if(note === \"o|\"){\n            note_lengths.push(2);\n        }\n        else if(note === \".|\"){\n            note_lengths.push(1);\n        }\n    }\n    return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music_array = music_string.split(\" \");\n  let music_beats = [];\n  for (let i = 0; i < music_array.length; i++){\n    if (music_array[i] === \"o\"){\n      music_beats.push(4);\n    } else if (music_array[i] === \"o|\"){\n      music_beats.push(2);\n    } else if (music_array[i] === \".|\"){\n      music_beats.push(1);\n    }\n  }\n  return music_beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let music_array = music_string.split(' ');\n    let result = [];\n    for(let i = 0; i < music_array.length; i++){\n        if(music_array[i] === 'o'){\n            result.push(4);\n        }\n        else if(music_array[i] === 'o|'){\n            result.push(2);\n        }\n        else if(music_array[i] === '.|'){\n            result.push(1);\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var music_array = music_string.split(\" \");\n    var music_beats = [];\n    for (var i = 0; i < music_array.length; i++) {\n        if (music_array[i] == \"o\") {\n            music_beats.push(4);\n        } else if (music_array[i] == \"o|\") {\n            music_beats.push(2);\n        } else if (music_array[i] == \".|\") {\n            music_beats.push(1);\n        }\n    }\n    return music_beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var notes = music_string.split(' ');\n    var note_lengths = [];\n    for(var i = 0; i < notes.length; i++){\n        if(notes[i] == 'o'){\n            note_lengths.push(4);\n        }\n        else if(notes[i] == 'o|'){\n            note_lengths.push(2);\n        }\n        else if(notes[i] == '.|'){\n            note_lengths.push(1);\n        }\n    }\n    return note_lengths;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let result = [];\n    let notes = music_string.split(\" \");\n    for(let note of notes){\n        if(note === \"o\"){\n            result.push(4);\n        } else if(note === \"o|\"){\n            result.push(2);\n        } else if(note === \".|\"){\n            result.push(1);\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let notes = music_string.split(' ');\n    let result = [];\n    for (let note of notes){\n        if (note === 'o'){\n            result.push(4);\n        } else if (note === 'o|'){\n            result.push(2);\n        } else if (note === '.|'){\n            result.push(1);\n        }\n    }\n    return result;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music_array = music_string.split(' ');\n  let music_beats = [];\n  for (let i = 0; i < music_array.length; i++) {\n    if (music_array[i] === 'o') {\n      music_beats.push(4);\n    } else if (music_array[i] === 'o|') {\n      music_beats.push(2);\n    } else if (music_array[i] === '.|') {\n      music_beats.push(1);\n    }\n  }\n  return music_beats;\n}\n", "//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var notes = music_string.split(' ');\n  var note_lengths = [];\n  for(var i = 0; i < notes.length; i++){\n    if(notes[i] === 'o'){\n      note_lengths.push(4);\n    }\n    else if(notes[i] === 'o|'){\n      note_lengths.push(2);\n    }\n    else if(notes[i] === '.|'){\n      note_lengths.push(1);\n    }\n  }\n  return note_lengths;\n}\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while(index != -1){\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while (index >= 0) {\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index += substring.length;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while(index >= 0){\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while (index < string.length){\n        index = string.indexOf(substring, index);\n        if (index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string.substring(i, i + substring.length) == substring){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index += substring.length;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while (index >= 0) {\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length) === substring) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while (index < string.length) {\n        index = string.indexOf(substring, index);\n        if (index == -1) {\n            break;\n        }\n        count++;\n        index += substring.length;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while (index >= 0){\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n        index = string.indexOf(substring, index);\n        if(index == -1){\n            break;\n        }\n        count++;\n        index++;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while (index < string.length){\n        index = string.indexOf(substring, index);\n        if (index == -1){\n            break;\n        }\n        count += 1;\n        index += substring.length;\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n    while(index >= 0){\n        count++;\n        index = string.indexOf(substring, index + 1);\n    }\n    return count;\n}\n", "//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    var count = 0;\n    var index = 0;\n    while (index < string.length){\n        index = string.indexOf(substring, index);\n        if (index == -1){\n            break;\n        }\n        count += 1;\n        index += substring.length;\n    }\n    return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort().join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(' ');\n    var sorted = nums.sort();\n    return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let nums = numbers.split(' ');\n    let sorted = nums.sort((a,b) => {\n        let a_index = nums.indexOf(a);\n        let b_index = nums.indexOf(b);\n        return a_index - b_index;\n    });\n    return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort().join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(' ');\n  let sorted = nums.sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(\" \");\n  let sorted = nums.sort();\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let sorted = numbers.split(\" \").sort();\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let sorted = numbers.split(' ').sort()\n    return sorted.join(' ')\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(' ');\n  let sorted = nums.sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let sorted = numbers.split(' ').sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var nums = numbers.split(\" \");\n  nums.sort();\n  return nums.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var nums = numbers.split(' ');\n  var sorted = nums.sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(\" \");\n  let sorted = nums.sort();\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    var sorted = nums.sort(function(a,b){\n        return a.localeCompare(b);\n    });\n    return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let numbersArray = numbers.split(' ');\n    let sortedNumbers = numbersArray.sort();\n    return sortedNumbers.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let nums = numbers.split(' ');\n  let sorted = nums.sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var nums = numbers.split(' ');\n  var sorted = nums.sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var sorted = numbers.split(\" \").sort();\n  return sorted.join(\" \");\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var nums = numbers.split(' ');\n  var sorted = nums.sort();\n  return sorted.join(' ');\n}\n", "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    var number_array = numbers.split(\" \");\n    var sorted_array = number_array.sort();\n    return sorted_array.join(\" \");\n}\n"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest = [];\n    var closest_distance = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let closest = [];\n  let diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest = [numbers[0], numbers[1]];\n    var closest_diff = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff) {\n                closest = [numbers[i], numbers[j]];\n                closest_diff = diff;\n            }\n        }\n    }\n    return closest;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var closest_elements = [];\n    for (var i = 0; i < numbers.length; i++){\n        for (var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff){\n                min_diff = diff;\n                closest_elements = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min = Math.abs(numbers[0] - numbers[1]);\n  let result = [numbers[0], numbers[1]];\n  for(let i = 0; i < numbers.length; i++){\n    for(let j = i + 1; j < numbers.length; j++){\n      let diff = Math.abs(numbers[i] - numbers[j]);\n      if(diff < min){\n        min = diff;\n        result = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return result;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [numbers[0], numbers[1]];\n    var closest_distance = Math.abs(closest_pair[0] - closest_pair[1]);\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance) {\n                closest_pair = [numbers[i], numbers[j]];\n                closest_distance = distance;\n            }\n        }\n    }\n    return closest_pair;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest = [numbers[0], numbers[1]];\n    var closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance) {\n                closest = [numbers[i], numbers[j]];\n                closest_distance = distance;\n            }\n        }\n    }\n    return closest;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min){\n                min = diff;\n                min_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min = Math.min(...numbers);\n  var max = Math.max(...numbers);\n  var min_index = numbers.indexOf(min);\n  var max_index = numbers.indexOf(max);\n  var min_index_2 = numbers.lastIndexOf(min);\n  var max_index_2 = numbers.lastIndexOf(max);\n  var min_distance = Math.abs(min_index - max_index);\n  var max_distance = Math.abs(max_index_2 - min_index_2);\n  if(min_distance < max_distance){\n    return [min, max];\n  } else {\n    return [max, min];\n  }\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest = [];\n    var diff = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var closest_pair = [numbers[0], numbers[1]];\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min_diff){\n                min_diff = diff;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min_diff = Infinity;\n    var result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let min_index = numbers.indexOf(min);\n    let max_index = numbers.indexOf(max);\n    if(min_index < max_index){\n        return [min, numbers[min_index+1]];\n    }\n    else{\n        return [max, numbers[max_index-1]];\n    }\n}\n\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest = [];\n  var min_diff = Infinity;\n  for (var i = 0; i < numbers.length; i++){\n    for (var j = i + 1; j < numbers.length; j++){\n      var diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < min_diff){\n        min_diff = diff;\n        closest = [numbers[i], numbers[j]];\n      }\n    }\n  }\n  return closest;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [numbers[0], numbers[1]];\n    var closest_distance = Math.abs(numbers[0] - numbers[1]);\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if(distance < closest_distance){\n                closest_distance = distance;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [numbers[0], numbers[1]];\n    var closest_distance = Math.abs(closest_pair[0] - closest_pair[1]);\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if(distance < closest_distance){\n                closest_distance = distance;\n                closest_pair = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest = [0,0];\n    var closest_distance = 0;\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i+1; j < numbers.length; j++){\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if(distance < closest_distance || closest_distance == 0){\n                closest_distance = distance;\n                closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var min = Math.abs(numbers[0] - numbers[1]);\n    var min_index = [0,1];\n    for(var i = 0; i < numbers.length; i++){\n        for(var j = i+1; j < numbers.length; j++){\n            var diff = Math.abs(numbers[i] - numbers[j]);\n            if(diff < min){\n                min = diff;\n                min_index = [i,j];\n            }\n        }\n    }\n    return [numbers[min_index[0]], numbers[min_index[1]]];\n}\n", "//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    var closest_pair = [numbers[0], numbers[1]];\n    var closest_distance = Math.abs(closest_pair[0] - closest_pair[1]);\n    for (var i = 0; i < numbers.length; i++) {\n        for (var j = i + 1; j < numbers.length; j++) {\n            var distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance < closest_distance) {\n                closest_pair = [numbers[i], numbers[j]];\n                closest_distance = distance;\n            }\n        }\n    }\n    return closest_pair;\n}\n"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var scale = 1 / range;\n    return numbers.map(function(x){\n        return (x - min) * scale;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var scaled = numbers.map(function(x){\n        return (x - min) / range;\n    });\n    return scaled;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var scaled = numbers.map(function(x){\n        return (x - min) / range;\n    });\n    return scaled;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push((numbers[i] - min) / range);\n    }\n    return result;\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n", "//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min.apply(null, numbers);\n    var max = Math.max.apply(null, numbers);\n    var range = max - min;\n    return numbers.map(function(x){\n        return (x - min) / range;\n    });\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i] === \"number\" && values[i] % 1 === 0) {\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i] === 'number' && values[i] % 1 === 0) {\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i] === \"number\" && values[i] % 1 === 0) {\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for (var i = 0; i < values.length; i++) {\n        if (typeof values[i] === 'number' && values[i] % 1 === 0) {\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n", "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i = 0; i < values.length; i++){\n        if(typeof values[i] === \"number\" && values[i] % 1 === 0){\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n", "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    return string.length;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i >= 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n; i >= 1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n    return 1;\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(let i = n; i > 0; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 0; i--){\n        if(n % i == 0){\n            return i;\n        }\n    }\n}\n", "//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    for(var i = n; i > 1; i--){\n        if(n % i === 0){\n            return i;\n        }\n    }\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var primeFactors = [];\n    var factors = [];\n    var i = 2;\n    while(n > 1){\n        if(n % i === 0){\n            primeFactors.push(i);\n            n = n / i;\n        }else{\n            i++;\n        }\n    }\n    for(var j = 0; j < primeFactors.length; j++){\n        var count = 0;\n        while(n % primeFactors[j] === 0){\n            count++;\n            n = n / primeFactors[j];\n        }\n        factors.push(count);\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  var factor = 2;\n  while(n > 1){\n    if(n % factor === 0){\n      n /= factor;\n      factors.push(factor);\n    } else {\n      factor++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let primeFactors = [];\n  let factor = 2;\n  while (n > 1) {\n    if (n % factor === 0) {\n      primeFactors.push(factor);\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return primeFactors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            n /= factor;\n            factors.push(factor);\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var result = [];\n    var i = 2;\n    while(n > 1){\n        if(n % i === 0){\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let result = [];\n  let factor = 2;\n  while (n > 1) {\n    if (n % factor === 0) {\n      result.push(factor);\n      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return result;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var result = [];\n    var i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return result;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let factor = 2;\n  while(n > 1){\n    if(n % factor === 0){\n      factors.push(factor);\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var result = [];\n    var i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            result.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return result;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  var prime = 2;\n  while(n > 1){\n    if(n % prime == 0){\n      factors.push(prime);\n      n = n / prime;\n    }\n    else{\n      prime++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  var factor = 2;\n  while(n > 1){\n    if(n % factor === 0){\n      factors.push(factor);\n      n = n / factor;\n    } else {\n      factor++;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  let factor = 2;\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      n /= factor;\n    } else {\n      factor += 1;\n    }\n  }\n  return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let factor = 2;\n    while(n > 1){\n        if(n % factor === 0){\n            factors.push(factor);\n            n /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var factor = 2;\n    while (n > 1) {\n        if (n % factor === 0) {\n            factors.push(factor);\n            n = n / factor;\n        } else {\n            factor++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var i = 2;\n    while(n > 1){\n        if(n % i === 0){\n            factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n", "//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var result = [];\n    var i = 2;\n    while(n > 1){\n        if(n % i === 0){\n            result.push(i);\n            n /= i;\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\n"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length; i++){\n        var n = numbers[i];\n        if(seen[n]){\n            continue;\n        }\n        seen[n] = true;\n        result.push(n);\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for (var i = 0; i < numbers.length; i++) {\n        if (result.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) === -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for (let i = 0; i < numbers.length; i++){\n        if (result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n        if(seen[num]){\n            continue;\n        }\n        seen[num] = true;\n        result.push(num);\n    }\n    return result;\n}\n\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let unique = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) === -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    var seen = {};\n    for(var i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n        if(seen[num]){\n            continue;\n        }\n        seen[num] = true;\n        result.push(num);\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var result = [];\n  var seen = {};\n  for (var i = 0; i < numbers.length; i++) {\n    var n = numbers[i];\n    if (!seen[n]) {\n      seen[n] = true;\n      result.push(n);\n    }\n  }\n  return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (result.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.indexOf(numbers[i]) == -1){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) == -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  let newString = \"\";\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === string[i].toUpperCase()){\n      newString += string[i].toLowerCase();\n    }\n    else{\n      newString += string[i].toUpperCase();\n    }\n  }\n  return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    var newString = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n        else{\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    var newString = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n        else{\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    var newString = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n        else{\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        } else {\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    var newString = \"\";\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        } else {\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n        else{\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }else{\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        }\n        else{\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toLowerCase()){\n            newString += string[i].toUpperCase();\n        } else {\n            newString += string[i].toLowerCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n", "//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let newString = \"\";\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            newString += string[i].toLowerCase();\n        }\n        else{\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for (var i = 0; i < strings.length; i++) {\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for (var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    let result = \"\";\n    for(let i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    let result = \"\";\n    for (let i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    let result = \"\";\n    for(let i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    let result = \"\";\n    for(let i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n", "//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i = 0; i < strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n", "//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    return l.filter(function(x){return x > 0});\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var new_l = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            new_l.push(l[i]);\n        }\n    }\n    return new_l;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    if(n == 2) return true;\n    if(n % 2 == 0) return false;\n    for(var i = 3; i * i <= n; i += 2){\n        if(n % i == 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n == 1 || n == 2)\n        return true;\n    if(n % 2 == 0)\n        return false;\n    for(var i = 3; i < Math.sqrt(n); i+=2){\n        if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2) return false;\n    if(n == 2) return true;\n    if(n % 2 == 0) return false;\n    for(var i = 3; i <= Math.sqrt(n); i += 2){\n        if(n % i == 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n == 1){\n        return false;\n    }\n    if(n == 2){\n        return true;\n    }\n    if(n % 2 == 0){\n        return false;\n    }\n    var i = 3;\n    while(i * i <= n){\n        if(n % i == 0){\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n == 1) return false;\n    if(n == 2) return true;\n    if(n % 2 == 0) return false;\n    for(var i = 3; i <= Math.sqrt(n); i += 2){\n        if(n % i == 0) return false;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n == 1){\n        return false;\n    }\n    if(n == 2){\n        return true;\n    }\n    if(n % 2 == 0){\n        return false;\n    }\n    for(var i = 3; i < Math.sqrt(n); i += 2){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n<2){\n        return false;\n    }\n    for(var i=2;i*i<=n;i++){\n        if(n%i===0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if (n < 2) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    var i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n<2){\n        return false;\n    }\n    for(var i=2;i<n;i++){\n        if(n%i===0){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var value = l[index];\n        l_prime[index] = value;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var sorted_value = l[index].sort();\n        l_prime[index] = sorted_value;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    for (var i = 2; i < l.length; i += 3){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort(function(a, b){return a - b;});\n    for (var i = 2; i < l.length; i += 3){\n        l_prime[i] = l_prime[i + 1];\n        l_prime[i + 1] = l_prime[i + 2];\n        l_prime[i + 2] = l_prime[i];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for (var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var sorted_third = l[index].slice().sort();\n        l_prime[index] = sorted_third;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var third_index = third_indicies[i];\n        var sub_list = l.slice(third_index, third_index + 3);\n        sub_list.sort();\n        for(var j = 0; j < sub_list.length; j++){\n            l_prime[third_index + j] = sub_list[j];\n        }\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var third_index = third_indicies[i];\n        var third_value = l[third_index];\n        var sorted_third_value = l.slice(third_index, third_index + 1).sort();\n        l_prime[third_index] = sorted_third_value[0];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third = l.length / 3;\n    var third_index = third;\n    while(third_index < l.length){\n        l_prime[third_index] = l[third_index].sort();\n        third_index += third;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    for(var i = 0; i < l.length; i += 3){\n        l_prime[i] = l[i];\n    }\n    for(var i = 1; i < l.length; i += 3){\n        l_prime[i] = l[i];\n    }\n    for(var i = 2; i < l.length; i += 3){\n        l_prime[i] = l[i];\n    }\n    l_prime.sort();\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third = l.length / 3;\n    l_prime.splice(third, 1, l_prime.slice(third, third + 1).sort());\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        l_prime[index] = l_prime[index].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third = l.length / 3;\n    l_prime.splice(third, 1, l_prime.slice(third, third + 1).sort());\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        l_prime[index] = l[index];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var value = l[index];\n        l_prime.splice(index, 1, value);\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var value = l[index];\n        l_prime.splice(index, 1);\n        l_prime.splice(index, 0, value);\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third = l.length / 3;\n    l_prime.splice(third, 1, l_prime.slice(third, third + 1).sort());\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        l_prime[index] = l_prime[index].sort();\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice(0);\n    var third = l.length/3;\n    var third_index = 0;\n    while(third_index < third){\n        l_prime[third_index*3] = l[third_index*3];\n        third_index += 1;\n    }\n    l_prime.sort(function(a, b){\n        return a - b;\n    });\n    third_index = 0;\n    while(third_index < third){\n        l_prime[third_index*3] = l_prime[third_index*3 + 1];\n        third_index += 1;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 == 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var value = l[index];\n        l_prime[index] = value;\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        var value = l[index];\n        l_prime.splice(index, 1);\n        l_prime.splice(index, 0, value);\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_prime = l.slice();\n    var third_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 3 === 0){\n            third_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < third_indicies.length; i++){\n        var index = third_indicies[i];\n        l_prime[index] = l[index];\n    }\n    return l_prime;\n}\n"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    l.forEach(function(item){\n        if(result.indexOf(item) < 0){\n            result.push(item);\n        }\n    });\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = l.slice().sort();\n    var i = 1;\n    while(i < u.length){\n        if(u[i] === u[i-1]){\n            u.splice(i, 1);\n        } else {\n            i++;\n        }\n    }\n    return u;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) === -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) === -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    l.forEach(function(item){\n        if(result.indexOf(item) < 0){\n            result.push(item);\n        }\n    });\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i=0; i<l.length; i++){\n        if(result.indexOf(l[i]) == -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i=0; i<l.length; i++){\n        if(result.indexOf(l[i]) == -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    return l.filter(function(v, i, a){\n        return a.indexOf(v) === i;\n    });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  var o = {};\n  for(var i=0; i<l.length; i++){\n    o[l[i]] = true;\n  }\n  var r = [];\n  for(var i in o){\n    r.push(i);\n  }\n  return r;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) === -1){\n            result.push(l[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var r = [];\n    for(var i = 0; i < l.length; i++){\n        if(r.indexOf(l[i]) == -1){\n            r.push(l[i]);\n        }\n    }\n    return r.sort();\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(v, i, a){\n    return a.indexOf(v) === i;\n  });\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var o = {};\n    for(var i = 0; i < l.length; i++){\n        o[l[i]] = true;\n    }\n    var r = [];\n    for(var i in o){\n        r.push(i);\n    }\n    return r;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  var result = [];\n  for(var i = 0; i < l.length; i++){\n    if(result.indexOf(l[i]) === -1){\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) == -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(result.indexOf(l[i]) === -1){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = [];\n    for(var i = 0; i < l.length; i++){\n        if(u.indexOf(l[i]) < 0){\n            u.push(l[i]);\n        }\n    }\n    return u;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var r = [];\n    for(var i = 0; i < l.length; i++){\n        if(r.indexOf(l[i]) == -1){\n            r.push(l[i]);\n        }\n    }\n    return r;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    l.forEach(function(e){\n        if(result.indexOf(e) === -1) result.push(e);\n    });\n    return result;\n}\n", "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var u = [];\n    for(var i = 0; i < l.length; i++){\n        if(u.indexOf(l[i]) == -1){\n            u.push(l[i]);\n        }\n    }\n    return u;\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return Math.max.apply(null, l);\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for (var i = 1; i < l.length; i++){\n        if (l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n", "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            count += (i + \"\").split(\"\").filter(function(x){return x == \"7\"}).length;\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            count += count_7(i);\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            let str = i.toString();\n            for(let j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for (var i = 1; i < n; i++){\n        if (i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for (var j = 0; j < num.length; j++){\n                if (num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            let num = i.toString();\n            for(let j = 0; j < num.length; j++){\n                if(num[j] === '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var str = i.toString();\n            for(var j = 0; j < str.length; j++){\n                if(str[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n            var num = i.toString();\n            for(var j = 0; j < num.length; j++){\n                if(num[j] == '7'){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    for (var i = 0; i < even_indicies.length; i++){\n        var even_index = even_indicies[i];\n        var even_value = l[even_index];\n        var sorted_even_values = l.slice();\n        sorted_even_values.sort();\n        l_prime[even_index] = sorted_even_values[i];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for (var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice(0);\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    for(var i = 0; i < even_indicies.length; i++){\n        var index = even_indicies[i];\n        l_prime[index] = l[index];\n    }\n    for(var i = 0; i < even_indicies.length; i++){\n        var index = even_indicies[i];\n        l_prime[index] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.forEach(function(i){\n        l_prime[i] = l[i];\n    });\n    even_indicies.forEach(function(i){\n        l_prime[i] = l.slice(i, i + 2).sort()[0];\n    });\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for (var i = 0; i < l.length; i++){\n        if (i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for (var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice(0);\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 === 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.sort(function(a, b){\n        return l[a] - l[b];\n    });\n    for(var i = 0; i < even_indicies.length; i++){\n        l_prime[even_indicies[i]] = l[even_indicies[i]];\n    }\n    return l_prime;\n}\n", "//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    var l_prime = l.slice();\n    var even_indicies = [];\n    for(var i = 0; i < l.length; i++){\n        if(i % 2 == 0){\n            even_indicies.push(i);\n        }\n    }\n    even_indicies.forEach(function(index){\n        l_prime[index] = l[index];\n    });\n    even_indicies.forEach(function(index){\n        var min_index = index;\n        for(var j = index + 2; j < l.length; j += 2){\n            if(l[j] < l[min_index]){\n                min_index = j;\n            }\n        }\n        l_prime[index] = l[min_index];\n    });\n    return l_prime;\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,36", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [2, 3];\n    var i = 2;\n    while(fib.length < n){\n        fib.push(fib[i-1] + fib[i-2]);\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while(true){\n        var next = fib[i - 1] + fib[i - 2];\n        if(is_prime(next)){\n            fib.push(next);\n            i++;\n        }\n        if(i == n){\n            return fib[i - 1];\n        }\n    }\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while(true){\n        fib[i] = fib[i-1] + fib[i-2];\n        if(is_prime(fib[i])){\n            n -= 1;\n            if(n == 0){\n                return fib[i];\n            }\n        }\n        i += 1;\n    }\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [2, 3];\n    var i = 1;\n    while (fib.length < n){\n        fib.push(fib[i] + fib[i-1]);\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 2];\n    var i = 1;\n    var next = 0;\n    while(i < n){\n        next = fib[i] + fib[i-1];\n        fib.push(next);\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [2, 3];\n    var i = 2;\n    var prime = 3;\n    while (i < n){\n        var next = fib[i-1] + fib[i-2];\n        if (is_prime(next)){\n            fib.push(next);\n            i += 1;\n        }\n        prime = next;\n    }\n    return prime;\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 2];\n    var i = 2;\n    while (i < n) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var prime = [2, 3];\n    var i = 2;\n    while(i < n){\n        var next = fib[i] + fib[i - 1];\n        fib.push(next);\n        if(is_prime(next)){\n            prime.push(next);\n            i += 1;\n        }\n    }\n    return prime[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while (fib[i - 1] < 4000000){\n        fib[i] = fib[i - 1] + fib[i - 2];\n        i += 1;\n    }\n    var prime = [];\n    for (var j = 0; j < fib.length; j++){\n        if (is_prime(fib[j])){\n            prime.push(fib[j]);\n        }\n    }\n    return prime[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while (true) {\n        var next = fib[i - 1] + fib[i - 2];\n        if (is_prime(next)) {\n            fib.push(next);\n            if (fib.length == n) {\n                return fib[n - 1];\n            }\n        }\n        i += 1;\n    }\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while (fib[i-1] < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        i++;\n    }\n    var prime = fib[i-1];\n    while (!is_prime(prime)){\n        prime--;\n    }\n    return prime;\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 2];\n    var i = 2;\n    while (i < n) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n        i += 1;\n    }\n    return fib[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [2, 3];\n    var i = 1;\n    while(fib.length < n){\n        fib.push(fib[i] + fib[i-1]);\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while(i < n){\n        fib[i] = fib[i-1] + fib[i-2];\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [2, 3];\n    var i = 2;\n    var next = 5;\n    while (i < n) {\n        if (is_prime(next)) {\n            fib.push(next);\n            i += 1;\n        }\n        next = fib[i] + fib[i - 1];\n    }\n    return fib[n - 1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while(true){\n        var next = fib[i - 1] + fib[i - 2];\n        if(is_prime(next)){\n            fib.push(next);\n            i++;\n            if(i == n){\n                return fib[i - 1];\n            }\n        }\n    }\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 1];\n    var i = 2;\n    while(fib[i] < 4000000){\n        fib[i] = fib[i-1] + fib[i-2];\n        i++;\n    }\n    return fib[n];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let fib = [2, 3];\n    let i = 2;\n    while(fib.length < n){\n        fib.push(fib[i-1] + fib[i-2]);\n        i++;\n    }\n    return fib[n-1];\n}\n", "//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [1, 2];\n    var i = 2;\n    while(i < n){\n        fib.push(fib[i - 1] + fib[i - 2]);\n        i++;\n    }\n    return fib[n - 1];\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if(l.length < 3){\n        return false;\n    }\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if (l.length < 3) return false;\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            for (var k = j + 1; k < l.length; k++){\n                if (l[i] + l[j] + l[k] === 0) return true;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if (l.length < 3) {\n        return false;\n    }\n    var i = 0;\n    var j = 1;\n    var k = 2;\n    while (i < l.length) {\n        while (j < l.length) {\n            while (k < l.length) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n                k++;\n            }\n            j++;\n            k = j + 1;\n        }\n        i++;\n        j = i + 1;\n        k = j + 1;\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i, j, k, sum;\n    for(i = 0; i < l.length; i++){\n        for(j = i + 1; j < l.length; j++){\n            for(k = j + 1; k < l.length; k++){\n                sum = l[i] + l[j] + l[k];\n                if(sum === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i, j, k, sum;\n    for(i = 0; i < l.length; i++){\n        for(j = i + 1; j < l.length; j++){\n            for(k = j + 1; k < l.length; k++){\n                sum = l[i] + l[j] + l[k];\n                if(sum === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i, j, k, sum;\n    for(i = 0; i < l.length; i++){\n        for(j = i + 1; j < l.length; j++){\n            for(k = j + 1; k < l.length; k++){\n                sum = l[i] + l[j] + l[k];\n                if(sum === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = l.length;\n    var found = false;\n    for (i = 0; i < n; i++){\n        for (j = i + 1; j < n; j++){\n            for (k = j + 1; k < n; k++){\n                if (l[i] + l[j] + l[k] == 0){\n                    found = true;\n                    break;\n                }\n            }\n            if (found) break;\n        }\n        if (found) break;\n    }\n    return found;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if (l.length < 3) {\n        return false;\n    }\n    for (var i = 0; i < l.length; i++) {\n        for (var j = i + 1; j < l.length; j++) {\n            for (var k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  var i, j, k;\n  var n = l.length;\n  for (i = 0; i < n; i++){\n    for (j = i + 1; j < n; j++){\n      for (k = j + 1; k < n; k++){\n        if (l[i] + l[j] + l[k] === 0){\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if (l.length < 3) {\n        return false;\n    }\n    l.sort();\n    for (var i = 0; i < l.length - 2; i++) {\n        var j = i + 1;\n        var k = l.length - 1;\n        while (j < k) {\n            var sum = l[i] + l[j] + l[k];\n            if (sum === 0) {\n                return true;\n            }\n            if (sum < 0) {\n                j++;\n            } else {\n                k--;\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i, j, k;\n    for (i = 0; i < l.length; i++){\n        for (j = i + 1; j < l.length; j++){\n            for (k = j + 1; k < l.length; k++){\n                if (l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if(l.length < 3){\n        return false;\n    }\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            for(var k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i, j, k, sum;\n    for (i = 0; i < l.length; i++){\n        for (j = i + 1; j < l.length; j++){\n            for (k = j + 1; k < l.length; k++){\n                sum = l[i] + l[j] + l[k];\n                if (sum === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var n = l.length;\n  var sum = 0;\n  var found = false;\n  for (i = 0; i < n; i++){\n    for (j = i + 1; j < n; j++){\n      for (k = j + 1; k < n; k++){\n        sum = l[i] + l[j] + l[k];\n        if (sum == 0){\n          found = true;\n          break;\n        }\n      }\n      if (found){\n        break;\n      }\n    }\n    if (found){\n      break;\n    }\n  }\n  return found;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            for (var k = j + 1; k < l.length; k++){\n                if (l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    if(l.length < 3){\n        return false;\n    }\n    var i, j, k;\n    for(i = 0; i < l.length; i++){\n        for(j = i + 1; j < l.length; j++){\n            for(k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    var i, j, k;\n    for (i = 0; i < l.length; i++){\n        for (j = i + 1; j < l.length; j++){\n            for (k = j + 1; k < l.length; k++){\n                if (l[i] + l[j] + l[k] === 0){\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left_to_right = [];\n    var right_to_left = [];\n    var collisions = 0;\n    for(var i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        if(left_to_right[i] === right_to_left[i]){\n            collisions++;\n        }\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left_to_right = [];\n    var right_to_left = [];\n    var collisions = 0;\n    for(var i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        if(left_to_right[i] === right_to_left[i]){\n            collisions++;\n        }\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //If there are no cars, there are no collisions\n    if(n === 0){\n        return 0;\n    }\n    //If there is one car, there is one collision\n    if(n === 1){\n        return 1;\n    }\n    //If there are two cars, there is one collision\n    if(n === 2){\n        return 1;\n    }\n    //If there are three cars, there are two collisions\n    if(n === 3){\n        return 2;\n    }\n    //If there are four cars, there are three collisions\n    if(n === 4){\n        return 3;\n    }\n    //If there are five cars, there are four collisions\n    if(n === 5){\n        return 4;\n    }\n    //If there are six cars, there are five collisions\n    if(n === 6){\n        return 5;\n    }\n    //If there are seven cars, there are six collisions\n    if(n === 7){\n        return 6;\n    }\n    //If there are eight cars, there are seven collisions\n    if(n === 8){\n        return 7;\n    }\n    //If there are nine cars, there are eight collisions\n    if(n === 9){\n        return 8;\n    }\n    //If there are ten cars, there are nine collisions\n    if(n === 10){\n        return 9;\n    }\n    //", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    // n cars moving left to right, n cars moving right to left\n    // n cars total\n    // 2n cars total\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2n cars moving in opposite directions\n    // 2", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    let left_to_right = [];\n    let right_to_left = [];\n    let collision_count = 0;\n    for(let i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for(let i = 0; i < n; i++){\n        if(left_to_right[i] < right_to_left[i]){\n            collision_count++;\n        }\n    }\n    return collision_count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left_to_right = [];\n    var right_to_left = [];\n    var collisions = 0;\n    for(var i = 0; i < n; i++){\n        left_to_right[i] = 0;\n        right_to_left[i] = 0;\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            if(left_to_right[i] == 0 && right_to_left[j] == 0){\n                left_to_right[i] = 1;\n                right_to_left[j] = 1;\n                collisions++;\n            }\n        }\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //if there are no cars, there are no collisions\n    if(n == 0) return 0;\n    //if there is one car, there is one collision\n    if(n == 1) return 1;\n    //if there are two cars, there is one collision\n    if(n == 2) return 1;\n    //if there are three cars, there are two collisions\n    if(n == 3) return 2;\n    //if there are four cars, there are three collisions\n    if(n == 4) return 3;\n    //if there are five cars, there are four collisions\n    if(n == 5) return 4;\n    //if there are six cars, there are five collisions\n    if(n == 6) return 5;\n    //if there are seven cars, there are six collisions\n    if(n == 7) return 6;\n    //if there are eight cars, there are seven collisions\n    if(n == 8) return 7;\n    //if there are nine cars, there are eight collisions\n    if(n == 9) return 8;\n    //if there are ten cars, there are nine collisions\n    if(n == 10) return 9;\n    //if there are eleven cars, there are ten collisions\n    if(n == 11) return 10;\n    //if there are twelve cars, there are eleven collisions\n    if(n == 12) return 11;", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        if(i % 2 === 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //if n is odd, then there are no collisions\n    if(n%2==1){\n        return 0;\n    }\n    //if n is even, then there are n/2 collisions\n    else{\n        return n/2;\n    }\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //if n is even, then there are no collisions\n    if(n%2==0) return 0;\n    //if n is odd, then there are n/2 collisions\n    return n/2;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //if n is even, there will be no collisions\n    if(n%2==0) return 0;\n    //if n is odd, there will be one collision\n    else return 1;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        if(i % 2 === 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var collisions = 0;\n    for(var i = 0; i < n; i++){\n        if(Math.random() < 0.5){\n            collisions++;\n        }\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left_to_right = [];\n    var right_to_left = [];\n    var collision = 0;\n    for(var i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        if(left_to_right[i] === right_to_left[i]){\n            collision++;\n        }\n    }\n    return collision;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left_to_right = [];\n    var right_to_left = [];\n    var collisions = 0;\n    for(var i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        if(left_to_right[i] < right_to_left[i]){\n            collisions++;\n        }\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //if n is even, then there will be no collisions\n    if(n % 2 === 0){\n        return 0;\n    }\n    //if n is odd, then there will be one collision\n    else{\n        return 1;\n    }\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //The cars moving left to right are moving at 1 unit per second.\n    //The cars moving right to left are moving at -1 unit per second.\n    //The cars moving left to right start at x = 0 and move to x = n.\n    //The cars moving right to left start at x = n and move to x = 0.\n    //The cars moving left to right are moving at 1 unit per second.\n    //The cars moving right to left are moving at -1 unit per second.\n    //The cars moving left to right start at x = 0 and move to x = n.\n    //The cars moving right to left start at x = n and move to x = 0.\n    //The cars moving left to right are moving at 1 unit per second.\n    //The cars moving right to left are moving at -1 unit per second.\n    //The cars moving left to right start at x = 0 and move to x = n.\n    //The cars moving right to left start at x = n and move to x = 0.\n    //The cars moving left to right are moving at 1 unit per second.\n    //The cars moving right to left are moving at -1 unit per second.\n    //The cars moving left to right start at x = 0 and move to x = n.\n    //The cars moving right to left start at x = n and move to x = 0.\n    //The cars moving left to right are moving at 1 unit per second.\n    //The cars moving right to left are moving at -1 unit per", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    //The cars moving left to right are moving at speed n, and the cars moving right to left\n    //are moving at speed -n.\n    var left_to_right = n;\n    var right_to_left = -n;\n    var collisions = 0;\n    while(left_to_right > 0 && right_to_left < 0){\n        if(left_to_right == right_to_left){\n            collisions++;\n            left_to_right++;\n            right_to_left--;\n        }\n        else if(left_to_right > right_to_left){\n            left_to_right--;\n        }\n        else{\n            right_to_left++;\n        }\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left = 0;\n    var right = n;\n    var collisions = 0;\n    while(left < right){\n        if(left + right == n){\n            collisions++;\n        }\n        left++;\n        right--;\n    }\n    return collisions;\n}\n", "//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var left = 0;\n    var right = 0;\n    var collisions = 0;\n    for(var i = 0; i < n; i++){\n        left += 1;\n        right -= 1;\n        if(left == right){\n            collisions += 1;\n        }\n    }\n    return collisions;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n        return x + 1;\n    });\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_list = [];\n    for(var i = 0; i < l.length; i++){\n        new_list.push(l[i] + 1);\n    }\n    return new_list;\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var i = 0;\n    var len = l.length;\n    var result = [];\n    while (i < len) {\n        result.push(l[i] + 1);\n        i++;\n    }\n    return result;\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n        return x + 1;\n    });\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var i = 0; i < l.length; i++){\n        r.push(l[i] + 1);\n    }\n    return r;\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n        return x + 1;\n    });\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n        return x + 1;\n    });\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n        return x + 1;\n    });\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x+1});\n}\n", "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return x + 1;});\n}\n"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i = 0;\n    var j = l.length - 1;\n    while (i < j){\n        if (l[i] + l[j] === 0){\n            return true;\n        }\n        if (l[i] + l[j] > 0){\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i, j, sum;\n    for (i = 0; i < l.length; i++){\n        for (j = i + 1; j < l.length; j++){\n            sum = l[i] + l[j];\n            if (sum === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i, j, sum;\n    for(i = 0; i < l.length; i++){\n        for(j = i + 1; j < l.length; j++){\n            sum = l[i] + l[j];\n            if(sum === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i, j;\n    for(i = 0; i < l.length; i++){\n        for(j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i = 0;\n    var j = l.length - 1;\n    while(i < j){\n        if(l[i] + l[j] === 0){\n            return true;\n        }\n        if(l[i] + l[j] > 0){\n            j--;\n        }\n        else{\n            i++;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i = 0;\n    var j = l.length - 1;\n    while(i < j){\n        if(l[i] + l[j] === 0){\n            return true;\n        }\n        if(l[i] + l[j] < 0){\n            i++;\n        }\n        else{\n            j--;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i = 0;\n    var j = l.length - 1;\n    while (i < j){\n        if (l[i] + l[j] === 0){\n            return true;\n        }\n        if (l[i] + l[j] > 0){\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var seen = {};\n    for (var i = 0; i < l.length; i++) {\n        var complement = -l[i];\n        if (seen[complement]) {\n            return true;\n        }\n        seen[l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var seen = {};\n    for(var i = 0; i < l.length; i++){\n        if(seen[l[i]] === true){\n            return true;\n        }\n        seen[l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i, j, n = l.length;\n    for(i = 0; i < n; i++){\n        for(j = i + 1; j < n; j++){\n            if(l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var hash = {};\n    for (var i = 0; i < l.length; i++){\n        var num = l[i];\n        var diff = 0 - num;\n        if (hash[diff] !== undefined){\n            return true;\n        }\n        hash[num] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for(var i = 0; i < l.length; i++){\n        for(var j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    for (var i = 0; i < l.length; i++){\n        for (var j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var hash = {};\n    for(var i = 0; i < l.length; i++){\n        var complement = -l[i];\n        if(hash[complement] !== undefined){\n            return true;\n        }\n        hash[l[i]] = true;\n    }\n    return false;\n}\n", "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var i, j;\n    for (i = 0; i < l.length; i++){\n        for (j = i + 1; j < l.length; j++){\n            if (l[i] + l[j] === 0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while (x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while (x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while(x > 0){\n        result = (x % base).toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = \"\";\n    while (x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return a * h / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return a * h / 2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return a*h/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n", "//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a*h)/2;\n}\n"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  let fib = [0,0,2,0];\n  for(let i = 4; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n  }\n  return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    var arr = [0, 0, 2, 0];\n    for(var i = 4; i <= n; i++){\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return arr[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return 0;\n    }\n    let fib = [0,0,2,0];\n    for(let i=4;i<=n;i++){\n        fib[i%4] = fib[(i-1)%4]+fib[(i-2)%4]+fib[(i-3)%4]+fib[(i-4)%4];\n    }\n    return fib[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n  if(n === 3){\n    return 0;\n  }\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n  }\n  return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n < 4){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4];\n    }\n    return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib4Array = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib4Array.push(fib4Array[i-1] + fib4Array[i-2] + fib4Array[i-3] + fib4Array[i-4]);\n    }\n    return fib4Array[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 4){\n    return 0;\n  }\n  let fib = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 0;\n    }\n    var arr = [0,0,2,0];\n    for(var i = 4; i <= n; i++){\n        arr.push(arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]);\n    }\n    return arr[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4];\n    }\n    return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    let fib = [0,0,2,0];\n    for(let i = 4; i <= n; i++){\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n    }\n    return fib[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n    }\n    return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return 0;\n    }\n    let fib = [0,0,2,0];\n    for(let i=4;i<=n;i++){\n        fib[i%4] = fib[(i-1)%4] + fib[(i-2)%4] + fib[(i-3)%4] + fib[(i-4)%4];\n    }\n    return fib[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return 0;\n    }\n    var fib = [0,0,2,0];\n    for(var i=4;i<=n;i++){\n        fib[i%4] = fib[(i-1)%4] + fib[(i-2)%4] + fib[(i-3)%4] + fib[(i-4)%4];\n    }\n    return fib[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n  if(n === 3){\n    return 0;\n  }\n  var arr = [0, 0, 2, 0];\n  for(var i = 4; i <= n; i++){\n    arr[i % 4] = arr[(i - 1) % 4] + arr[(i - 2) % 4] + arr[(i - 3) % 4] + arr[(i - 4) % 4];\n  }\n  return arr[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    var arr = [0,0,2,0];\n    for(var i=4;i<=n;i++){\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4];\n    }\n    return arr[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n < 4){\n    return 0;\n  }\n  let fib = [0,0,2,0];\n  for(let i = 4; i <= n; i++){\n    fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4];\n  }\n  return fib[n % 4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4){\n        return 0;\n    }\n    let fib = [0,0,2,0];\n    for(let i=4;i<=n;i++){\n        fib[i%4] = fib[(i-1)%4]+fib[(i-2)%4]+fib[(i-3)%4]+fib[(i-4)%4];\n    }\n    return fib[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n<4) return 0;\n    let fib = [0,0,2,0];\n    for(let i=4;i<=n;i++){\n        fib[i%4] = fib[(i-1)%4] + fib[(i-2)%4] + fib[(i-3)%4] + fib[(i-4)%4];\n    }\n    return fib[n%4];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 2;\n    }\n    if(n === 3){\n        return 0;\n    }\n    let fib4Array = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib4Array[i] = fib4Array[i-1] + fib4Array[i-2] + fib4Array[i-3] + fib4Array[i-4];\n    }\n    return fib4Array[n];\n}\n", "//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 2;\n  }\n  if(n === 3){\n    return 0;\n  }\n  let fib4Array = [0, 0, 2, 0];\n  for(let i = 4; i <= n; i++){\n    fib4Array.push(fib4Array[i - 1] + fib4Array[i - 2] + fib4Array[i - 3] + fib4Array[i - 4]);\n  }\n  return fib4Array[n];\n}\n"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[n / 2];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.sort(function(a, b){return a-b});\n    var len = sorted.length;\n    if (len % 2){\n        return sorted[Math.floor(len/2)];\n    } else {\n        return (sorted[len/2-1] + sorted[len/2])/2;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort();\n    var n = l.length;\n    if(n%2 == 0){\n        return (l[n/2] + l[n/2-1])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.sort(function(a, b){return a - b});\n    var len = sorted.length;\n    if (len % 2){\n        return sorted[Math.floor(len / 2)];\n    }\n    else {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort(function(a, b){return a - b});\n    var half = Math.floor(l.length / 2);\n    if (l.length % 2)\n        return l[half];\n    else\n        return (l[half - 1] + l[half]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    l.sort();\n    if (l.length % 2 == 0){\n        return (l[l.length/2] + l[l.length/2-1])/2;\n    }\n    else{\n        return l[Math.floor(l.length/2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.slice().sort(function(a, b){return a - b});\n    var len = sorted.length;\n    if(len % 2){\n        return sorted[Math.floor(len / 2)];\n    }\n    return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.sort(function(a, b){return a - b});\n    var len = sorted.length;\n    if (len % 2){\n        return sorted[Math.floor(len / 2)];\n    } else {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n == 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n % 2 == 0){\n        return (l[n/2] + l[n/2 - 1]) / 2;\n    }\n    else{\n        return l[Math.floor(n/2)];\n    }\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return undefined;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.sort(function(a, b){return a - b});\n    var len = sorted.length;\n    if (len % 2) return sorted[Math.floor(len / 2)];\n    else return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (n % 2 === 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n    return l[Math.floor(n / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var n = l.length;\n    if (n == 0) return null;\n    if (n % 2 == 0) return (l[n/2-1] + l[n/2]) / 2;\n    return l[n/2];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var len = l.length;\n    if (len === 0) {\n        return null;\n    }\n    l.sort(function(a, b){return a - b;});\n    if (len % 2 === 0) {\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n    }\n    return l[Math.floor(len / 2)];\n}\n", "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var sorted = l.slice().sort(function(a, b){return a - b;});\n    var len = sorted.length;\n    if(len % 2){\n        return sorted[Math.floor(len / 2)];\n    }else{\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2.0;\n    }\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var text_length = text.length;\n    var text_half = Math.floor(text_length / 2);\n    var text_half_plus_one = Math.ceil(text_length / 2);\n    var text_half_minus_one = Math.floor(text_length / 2);\n    var text_half_plus_one_length = text_half_plus_one.toString().length;\n    var text_half_minus_one_length = text_half_minus_one.toString().length;\n    var text_half_plus_one_string = text_half_plus_one.toString();\n    var text_half_minus_one_string = text_half_minus_one.toString();\n    var text_half_plus_one_string_length = text_half_plus_one_string.length;\n    var text_half_minus_one_string_length = text_half_minus_one_string.length;\n    var text_half_plus_one_string_length_difference = text_half_plus_one_string_length - text_half_plus_one_length;\n    var text_half_minus_one_string_length_difference = text_half_minus_one_string_length - text_half_minus_one_length;\n    var text_half_plus_one_string_length_difference_string = text_half_plus_one_string_length_difference.toString();\n    var text_half_minus_one_string_length_difference_string = text_half_minus_one_string_length_difference.toString();\n    var text_half_plus_one_string_length_difference_string_length = text_half_plus_one_string_length_difference_string.length;\n    var text_half_minus_one_string_length", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var i = 0;\n    var j = text.length - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    if(text.length == 0){\n        return true;\n    }\n    if(text.length == 1){\n        return true;\n    }\n    if(text.length == 2){\n        return text[0] == text[1];\n    }\n    if(text.length == 3){\n        return text[0] == text[2];\n    }\n    return text[0] == text[text.length - 1] && is_palindrome(text.substring(1, text.length - 1));\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var i = 0;\n    var j = text.length - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    if(text.length == 0 || text.length == 1)\n        return true;\n    else if(text[0] == text[text.length - 1])\n        return is_palindrome(text.slice(1, text.length - 1));\n    else\n        return false;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text === reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var i = 0;\n    var j = text.length - 1;\n    while(i < j){\n        if(text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    if(text.length < 2) return true;\n    var i = 0;\n    var j = text.length - 1;\n    while(i < j){\n        if(text[i] != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var i = 0;\n    var j = text.length - 1;\n    while(i < j){\n        if(text[i] != text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var len = text.length;\n    for(var i = 0; i < len/2; i++){\n        if(text[i] != text[len - i - 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    return text == text.split(\"\").reverse().join(\"\");\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n", "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var reversed = text.split(\"\").reverse().join(\"\");\n    return text == reversed;\n}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n    var base = 2;\n    while(n > 0){\n        if(n % 2 == 1){\n            result = (result * base) % p;\n        }\n        n = Math.floor(n / 2);\n        base = (base * base) % p;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    for(var i = 0; i < n; i++){\n        r = (r * 2) % p;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n    var n_ = n;\n    while(n_ > 0){\n        if(n_ & 1){\n            result = (result * 2) % p;\n        }\n        n_ >>= 1;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    while(n > 0){\n        if(n & 1){\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    while(n > 0){\n        if(n & 1){\n            r = (r * 2) % p;\n        }\n        n >>= 1;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n    while(n){\n        if(n&1){\n            res = (res*2)%p;\n        }\n        n >>= 1;\n    }\n    return res;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return 1;\n    var r = 1;\n    for (var i = 0; i < n; i++) {\n        r = (r * 2) % p;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return 1;\n    var r = 1;\n    while (n > 0){\n        if (n % 2 == 1){\n            r = (r * 2) % p;\n        }\n        n = Math.floor(n / 2);\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n < 0) {\n        n = -n;\n    }\n    var result = 1;\n    var base = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        n = Math.floor(n / 2);\n        base = (base * base) % p;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n    while(n > 0){\n        if(n & 1){\n            result = (result * 2) % p;\n        }\n        n >>= 1;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n    var n_bin = n.toString(2);\n    for(var i = 0; i < n_bin.length; i++){\n        result = (result * result) % p;\n        if(n_bin[i] == '1'){\n            result = (result * 2) % p;\n        }\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    for(var i = 0; i < n; i++){\n        r = (r * 2) % p;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return 1;\n    var r = 1;\n    while (n > 0){\n        if (n & 1) r = (r * 2) % p;\n        n >>= 1;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    for(var i = 0; i < n; i++){\n        r = (r * 2) % p;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return 1;\n    var r = 1;\n    for (var i = 0; i < n; i++) {\n        r = (r * 2) % p;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n        return 1;\n    }\n    var result = 1;\n    var base = 2;\n    while(n > 0){\n        if(n % 2){\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n    var n = n % p;\n    while (n > 0){\n        result = (result * 2) % p;\n        n = n >> 1;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n    var n = n % p;\n    while(n > 0){\n        result = (result * 2) % p;\n        n = n >> 1;\n    }\n    return result;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    while (n > 0){\n        if (n & 1){\n            r = (r * 2) % p;\n        }\n        n = n >> 1;\n    }\n    return r;\n}\n", "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n === 0) return 1;\n    var r = 1;\n    var b = n.toString(2);\n    for (var i = 0; i < b.length; i++) {\n        r = (r * r) % p;\n        if (b[i] === '1') r = (r * 2) % p;\n    }\n    return r;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var new_text = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var result = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var new_text = '';\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) === -1){\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) == -1) {\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var new_text = \"\";\n    for (var i = 0; i < text.length; i++){\n        if (vowels.indexOf(text[i]) == -1){\n            new_text += text[i];\n        }\n    }\n    return new_text;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n", "//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var vowels = \"aeiou\";\n    var result = \"\";\n    for(var i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) == -1){\n            result += text[i];\n        }\n    }\n    return result;\n}\n"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){\n        return x < t;\n    });\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(function(x){return x < t;});\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] > t) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for (var i = 0; i < l.length; i++){\n        if (l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] >= t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > t){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n", "//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_sorted = s0_chars.sort();\n    var s1_chars_sorted = s1_chars.sort();\n    return s0_chars_sorted.toString() === s1_chars_sorted.toString();\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for (var i = 0; i < s0_chars.length; i++){\n        if (s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for (var i = 0; i < s1_chars.length; i++){\n        if (s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for (var i in s0_chars_count){\n        if (s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for (var i = 0; i < s0_chars.length; i++){\n        if (s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for (var i = 0; i < s1_chars.length; i++){\n        if (s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for (var i = 0; i < s0_chars.length; i++){\n        if (s0_chars_count[s0_chars[i]] != s1_chars_count[s0_chars[i]]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    var s0_chars_count_keys = Object.keys(s0_chars_count);\n    var s1_chars_count_keys = Object.keys(s1_chars_count);\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    if(s0_chars_count_keys.length != s1_chars_count_keys.length){\n        return false;\n    }\n    for(var i = 0; i", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var i in s0_chars_count){\n        if(s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]]++;\n        }else{\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]]++;\n        }else{\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var i in s0_chars_count){\n        if(s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]] === undefined){\n            s0_chars_count[s0_chars[i]] = 1;\n        }else{\n            s0_chars_count[s0_chars[i]] += 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]] === undefined){\n            s1_chars_count[s1_chars[i]] = 1;\n        }else{\n            s1_chars_count[s1_chars[i]] += 1;\n        }\n    }\n    for(var i in s0_chars_count){\n        if(s1_chars_count[i] !== s0_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    var i;\n    for(i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        }else{\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        }else{\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(i in s0_chars_count){\n        if(s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]] != s1_chars_count[s0_chars[i]]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for (var i = 0; i < s0_chars.length; i++) {\n        var c = s0_chars[i];\n        if (s0_chars_count[c]) {\n            s0_chars_count[c] += 1;\n        } else {\n            s0_chars_count[c] = 1;\n        }\n    }\n    for (var i = 0; i < s1_chars.length; i++) {\n        var c = s1_chars[i];\n        if (s1_chars_count[c]) {\n            s1_chars_count[c] += 1;\n        } else {\n            s1_chars_count[c] = 1;\n        }\n    }\n    for (var c in s0_chars_count) {\n        if (s0_chars_count[c] != s1_chars_count[c]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split('');\n    var s1_chars = s1.split('');\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    var i;\n    for (i = 0; i < s0_chars.length; i++) {\n        s0_chars_count[s0_chars[i]] = s0_chars_count[s0_chars[i]] + 1 || 1;\n    }\n    for (i = 0; i < s1_chars.length; i++) {\n        s1_chars_count[s1_chars[i]] = s1_chars_count[s1_chars[i]] + 1 || 1;\n    }\n    for (i in s0_chars_count) {\n        if (s0_chars_count[i] !== s1_chars_count[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    var i;\n    for(i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]]++;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]]++;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var c in s0_chars_count){\n        if(s0_chars_count[c] !== s1_chars_count[c]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        }else{\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        }else{\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var i in s0_chars_count){\n        if(s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    var i;\n    for(i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]]++;\n        }else{\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]]++;\n        }else{\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(i in s0_chars_count){\n        if(s0_chars_count[i] !== s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for (var i = 0; i < s0_chars.length; i++){\n        if (s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for (var i = 0; i < s1_chars.length; i++){\n        if (s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for (var i in s0_chars_count){\n        if (s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]] += 1;\n        } else {\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]] += 1;\n        } else {\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var i in s0_chars_count){\n        if(s0_chars_count[i] != s1_chars_count[i]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        var c = s0_chars[i];\n        if(s0_chars_count[c] === undefined){\n            s0_chars_count[c] = 0;\n        }\n        s0_chars_count[c] += 1;\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        var c = s1_chars[i];\n        if(s1_chars_count[c] === undefined){\n            s1_chars_count[c] = 0;\n        }\n        s1_chars_count[c] += 1;\n    }\n    for(var c in s0_chars_count){\n        if(s1_chars_count[c] !== s0_chars_count[c]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for(var i = 0; i < s0_chars.length; i++){\n        if(s0_chars_count[s0_chars[i]]){\n            s0_chars_count[s0_chars[i]]++;\n        }else{\n            s0_chars_count[s0_chars[i]] = 1;\n        }\n    }\n    for(var i = 0; i < s1_chars.length; i++){\n        if(s1_chars_count[s1_chars[i]]){\n            s1_chars_count[s1_chars[i]]++;\n        }else{\n            s1_chars_count[s1_chars[i]] = 1;\n        }\n    }\n    for(var key in s0_chars_count){\n        if(!s1_chars_count[key]){\n            return false;\n        }\n        if(s0_chars_count[key] != s1_chars_count[key]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_count = {};\n    var s1_chars_count = {};\n    for (var i = 0; i < s0_chars.length; i++) {\n        var c = s0_chars[i];\n        if (s0_chars_count[c] === undefined) {\n            s0_chars_count[c] = 1;\n        } else {\n            s0_chars_count[c] += 1;\n        }\n    }\n    for (var i = 0; i < s1_chars.length; i++) {\n        var c = s1_chars[i];\n        if (s1_chars_count[c] === undefined) {\n            s1_chars_count[c] = 1;\n        } else {\n            s1_chars_count[c] += 1;\n        }\n    }\n    for (var c in s0_chars_count) {\n        if (s1_chars_count[c] !== s0_chars_count[c]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var s0_chars = s0.split(\"\");\n    var s1_chars = s1.split(\"\");\n    var s0_chars_sorted = s0_chars.sort();\n    var s1_chars_sorted = s1_chars.sort();\n    return s0_chars_sorted.toString() == s1_chars_sorted.toString();\n}\n"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1){\n        return 1;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1){\n        return 1;\n    }\n    else if(n == 2){\n        return 1;\n    }\n    else{\n        return fib(n-1) + fib(n-2);\n    }\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1) return 1;\n    if(n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n < 2){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n < 2){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1 || n == 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1){\n        return 1;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1){\n        return 1;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1 || n == 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1) return 1;\n    if(n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n < 2){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n <= 1) return n;\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1) return 1;\n    if(n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if (n === 1 || n === 2) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n === 1){\n        return 1;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if(n == 1 || n == 2){\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);\n}\n", "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n    return fib(n-1) + fib(n-2);\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for(var i = 0; i < brackets.length; i++){\n    var bracket = brackets[i];\n    if(bracket === \"<\"){\n      stack.push(bracket);\n    } else if(bracket === \">\"){\n      if(stack.length === 0){\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for (var i = 0; i < brackets.length; i++) {\n        var bracket = brackets[i];\n        if (bracket === \"<\") {\n            stack.push(bracket);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            var last = stack.pop();\n            if (last !== \"<\") {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for (var i = 0; i < brackets.length; i++) {\n        var bracket = brackets[i];\n        if (bracket == \"<\") {\n            stack.push(bracket);\n        } else {\n            if (stack.length == 0) {\n                return false;\n            }\n            var top = stack.pop();\n            if (top != \"<\") {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \">\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i] == \">\"){\n            if (stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for (var i = 0; i < brackets.length; i++) {\n        var bracket = brackets[i];\n        if (bracket === \"<\") {\n            stack.push(bracket);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            var last = stack.pop();\n            if (last !== \"<\") {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '<') {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === '>') {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == '<'){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"<\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] == \">\"){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket == \"<\"){\n            stack.push(bracket);\n        } else if(bracket == \">\"){\n            if(stack.length == 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"<\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            isIncreasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            isIncreasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] < l[1] ? 1 : -1;\n    for(var i = 1; i < l.length; i++){\n        if(l[i] - l[i - 1] != direction){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] - l[1];\n    for(var i = 1; i < l.length; i++){\n        if(direction * (l[i] - l[i-1]) < 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] < l[1] ? 1 : -1;\n    for(var i = 1; i < l.length - 1; i++){\n        if(l[i] - l[i + 1] != direction){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] < l[1] ? 1 : -1;\n    for(var i = 1; i < l.length; i++){\n        if(l[i] - l[i-1] != direction){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction * (l[i] - l[i - 1]) < 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] - l[1];\n    for(var i = 1; i < l.length; i++){\n        if(l[i] - l[i - 1] != direction){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction * (l[i] - l[i-1]) < 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i+1]){\n            isIncreasing = false;\n        }\n        if(l[i] < l[i+1]){\n            isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length === 0) return true;\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction === 0){\n            direction = l[i] - l[i-1];\n            continue;\n        }\n        if(direction > 0){\n            if(l[i] < l[i-1]) return false;\n        } else {\n            if(l[i] > l[i-1]) return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction == 0) direction = l[i] - l[i-1];\n        if(direction > 0 && l[i] < l[i-1]) return false;\n        if(direction < 0 && l[i] > l[i-1]) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    if(l.length < 2) return true;\n    var direction = l[1] - l[0];\n    for(var i = 2; i < l.length; i++){\n        if(direction * (l[i] - l[i-1]) < 0) return false;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = 0;\n    for(var i = 0; i < l.length - 1; i++){\n        var diff = l[i + 1] - l[i];\n        if(diff == 0){\n            continue;\n        }\n        if(direction == 0){\n            direction = diff;\n        }\n        else if(direction != diff){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] < l[1] ? 1 : -1;\n    for(var i = 1; i < l.length; i++){\n        if(direction * (l[i] - l[i-1]) < 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] < l[1] ? 1 : -1;\n    for(var i = 1; i < l.length; i++){\n        if(l[i] - l[i-1] != direction){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var i = 0;\n    var j = 1;\n    var direction = l[j] - l[i];\n    while(j < l.length){\n        if(direction == 0){\n            direction = l[j] - l[i];\n        }\n        else if(direction != l[j] - l[i]){\n            return false;\n        }\n        i++;\n        j++;\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] < l[1] ? 1 : -1;\n    for(var i = 1; i < l.length; i++){\n        if(direction * (l[i] - l[i-1]) < 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var isIncreasing = true;\n    var isDecreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n        if(l[i] > l[i + 1]){\n            isIncreasing = false;\n        }\n        if(l[i] < l[i + 1]){\n            isDecreasing = false;\n        }\n    }\n    return isIncreasing || isDecreasing;\n}\n", "//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var direction = l[0] - l[1];\n    for(var i = 1; i < l.length; i++){\n        if(direction * (l[i] - l[i-1]) < 0){\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  var l3 = [];\n  for(var i = 0; i < l1.length; i++){\n    for(var j = 0; j < l2.length; j++){\n      if(l1[i] == l2[j]){\n        l3.push(l1[i]);\n      }\n    }\n  }\n  return l3.sort().filter(function(item, pos, ary){\n    return !pos || item != ary[pos - 1];\n  });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1_map = {};\n    var l2_map = {};\n    for(var i = 0; i < l1.length; i++){\n        l1_map[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        l2_map[l2[i]] = true;\n    }\n    for(var i = 0; i < l1.length; i++){\n        if(l1_map[l1[i]] && l2_map[l1[i]]){\n            result.push(l1[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var l3 = [];\n    var l4 = [];\n    for(var i = 0; i < l1.length; i++){\n        if(l1[i] in l2){\n            l3.push(l1[i]);\n        }\n    }\n    for(var j = 0; j < l3.length; j++){\n        if(l3[j] in l4){\n            l4.push(l3[j]);\n        }\n    }\n    return l4;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]] === true){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]] && result.indexOf(l2[i]) == -1){\n            result.push(l2[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let result = [];\n  let hash = {};\n  for (let i = 0; i < l1.length; i++){\n    hash[l1[i]] = true;\n  }\n  for (let i = 0; i < l2.length; i++){\n    if (hash[l2[i]]){\n      result.push(l2[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var l1_set = {};\n    var l2_set = {};\n    var result = [];\n    for (var i = 0; i < l1.length; i++){\n        l1_set[l1[i]] = true;\n    }\n    for (var i = 0; i < l2.length; i++){\n        l2_set[l2[i]] = true;\n    }\n    for (var i in l1_set){\n        if (l1_set[i] && l2_set[i]){\n            result.push(i);\n        }\n    }\n    return result.sort();\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n            delete hash[l2[i]];\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n                result.push(l1[i]);\n            }\n        }\n    }\n    return result.sort((a, b) => a - b).filter((item, i, arr) => arr.indexOf(item) === i);\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var l3 = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                l3.push(l1[i]);\n            }\n        }\n    }\n    return l3.sort().filter(function(item, pos, ary){\n        return !pos || item != ary[pos - 1];\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]] && result.indexOf(l2[i]) === -1){\n            result.push(l2[i]);\n        }\n    }\n    return result;\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var hash = {};\n    for(var i = 0; i < l1.length; i++){\n        hash[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        if(hash[l2[i]]){\n            result.push(l2[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var result = [];\n    var l1_map = {};\n    var l2_map = {};\n    for(var i = 0; i < l1.length; i++){\n        l1_map[l1[i]] = true;\n    }\n    for(var i = 0; i < l2.length; i++){\n        l2_map[l2[i]] = true;\n    }\n    for(var i in l1_map){\n        if(l1_map[i] && l2_map[i]){\n            result.push(i);\n        }\n    }\n    return result.sort();\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 1;\n    for(let i = 2; i <= n; i++){\n        if(n % i === 0){\n            if(is_prime(i)){\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest_factor = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            largest_factor = i;\n            n = n / i;\n            i = 2;\n        }\n    }\n    return largest_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest_prime = 1;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n                largest_prime = i;\n            }\n        }\n    }\n    return largest_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest_factor = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            largest_factor = i;\n            while(n % i == 0){\n                n /= i;\n            }\n        }\n    }\n    return largest_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var prime_factors = [];\n    var i = 2;\n    while(i <= n){\n        if(n % i === 0){\n            prime_factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for (var i = 2; i <= n; i++){\n        if (n % i == 0){\n            largest = i;\n            while (n % i == 0){\n                n /= i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i === 0){\n            if(is_prime(i)){\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            largest = i;\n            while(n % i == 0){\n                n = n / i;\n            }\n        }\n    }\n    return largest;\n}\n\nlargest_prime_factor(13195);\nlargest_prime_factor(2048);\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest_prime = 1;\n    var i = 2;\n    while (i <= n){\n        if (n % i == 0){\n            largest_prime = i;\n            n = n / i;\n        }\n        else{\n            i = i + 1;\n        }\n    }\n    return largest_prime;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 0;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            if(is_prime(i)){\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let largest = 0;\n    for(let i = 2; i <= n; i++){\n        if(n % i === 0){\n            if(is_prime(i)){\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for (var i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            largest = i;\n            n = n / i;\n            i = 2;\n        }\n    }\n    return largest;\n}\n\nlargest_prime_factor(13195);\nlargest_prime_factor(2048);\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest_factor = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i === 0){\n            largest_factor = i;\n        }\n    }\n    return largest_factor;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    if(n < 2) return 1;\n    var i = 2;\n    while(i <= Math.sqrt(n)){\n        if(n % i === 0){\n            n = n / i;\n            i = 2;\n        }\n        else{\n            i++;\n        }\n    }\n    return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i === 0){\n            largest = i;\n            while(n % i === 0){\n                n = n / i;\n            }\n        }\n    }\n    return largest;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest = 0;\n    for(var i = 2; i <= n; i++){\n        if(n % i === 0){\n            largest = i;\n            n = n / i;\n            i = 2;\n        }\n    }\n    return largest;\n}\n\nlargest_prime_factor(13195);\nlargest_prime_factor(2048);\n", "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    var largest_prime = 1;\n    var i = 2;\n    while(i <= n){\n        if(n % i == 0){\n            largest_prime = i;\n            n = n / i;\n        }\n        else{\n            i++;\n        }\n    }\n    return largest_prime;\n}\n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  var sum = 0;\n  for(var i = 1; i <= n; i++){\n    sum += i;\n  }\n  return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for (var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n", "//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] == \")\"){\n            if(stack.length > 0){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket == \"(\"){\n            stack.push(bracket);\n        } else {\n            if(stack.length == 0){\n                return false;\n            }\n            var top = stack.pop();\n            if(top != \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket == \"(\"){\n            stack.push(bracket);\n        } else {\n            if(stack.length == 0){\n                return false;\n            }\n            var last = stack.pop();\n            if(last != \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket == \"(\"){\n            stack.push(bracket);\n        }\n        else if(bracket == \")\"){\n            if(stack.length > 0){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else{\n            if(stack.length > 0){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            stack.push(brackets[i]);\n        } else {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] == \")\"){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        } else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] == \")\"){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket == \"(\"){\n            stack.push(bracket);\n        } else {\n            if(stack.length == 0){\n                return false;\n            }\n            var last = stack.pop();\n            if(last != \"(\"){\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n        else if(brackets[i] == \")\"){\n            if(stack.length == 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n", "//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    var stack = [];\n    for(var i = 0; i < brackets.length; i++){\n        var bracket = brackets[i];\n        if(bracket === \"(\"){\n            stack.push(bracket);\n        } else if(bracket === \")\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i = 1; i < xs.length; i++){\n    result.push(xs[i] * i);\n  }\n  return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1){\n        return [];\n    }\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  return xs.slice(1).map((x, i) => x * (i + 1));\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length < 2){\n        return [];\n    }\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length === 0) return [];\n    if(xs.length === 1) return [xs[0]];\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1) return [];\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length < 2) return [];\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if (xs.length < 2) {\n        return [];\n    }\n    var result = [];\n    for (var i = 1; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    var result = [];\n    for(var i = 1; i < xs.length; i++){\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n", "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    if(xs.length == 1) return [];\n    var res = [];\n    for(var i = 1; i < xs.length; i++){\n        res.push(xs[i] * i);\n    }\n    return res;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n < 3){\n        return 0;\n    }\n    let fibfib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n    }\n    return fibfib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n==0 || n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0){\n    return 0;\n  }\n  if(n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 1;\n  }\n  let fib = [0, 0, 1];\n  for(let i = 3; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n  }\n  return fib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n < 3){\n        return 0;\n    }\n    let fibfib = [0, 0, 1];\n    for(let i = 3; i <= n; i++){\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n    }\n    return fibfib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n == 0 || n == 1){\n    return 0;\n  }\n  if(n == 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n == 0 || n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n==0 || n==1){\n        return 0;\n    }\n    if(n==2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    let fibfib = [0,0,1];\n    for(let i = 3; i <= n; i++){\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n    }\n    return fibfib[n];\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n === 0 || n === 1){\n    return 0;\n  }\n  if(n === 2){\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0 || n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 0;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var count = 0;\n  for (var i = 0; i < s.length; i++){\n    if (vowels.indexOf(s[i]) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = 'aeiouy';\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var count = 0;\n    for(var i=0; i<s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = \"aeiou\";\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) >= 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = 'aeiouy';\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var count = 0;\n    for(var i=0; i<s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var count = 0;\n  for(var i=0; i<s.length; i++){\n    if(vowels.indexOf(s[i]) > -1){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = 'aeiou';\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i]) > -1) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n        if (vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = \"aeiou\";\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var count = 0;\n  for(var i = 0; i < s.length; i++){\n    if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var count = 0;\n    for (var i = 0; i < s.length; i++){\n        if (vowels.indexOf(s[i]) !== -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var vowels = \"aeiouy\";\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    var count = 0;\n    for(var i=0; i<s.length; i++){\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split('');\n    let shifted_arr = [];\n    for(let i = 0; i < shift; i++){\n        shifted_arr.push(x_arr.pop());\n    }\n    return shifted_arr.concat(x_arr).join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_arr = x_str.split(\"\");\n    var x_len = x_arr.length;\n    var shift_arr = [];\n    var i = 0;\n    var j = 0;\n    for(i = 0; i < shift; i++){\n        shift_arr.push(x_arr[x_len - 1 - i]);\n    }\n    for(j = 0; j < x_len - shift; j++){\n        shift_arr.push(x_arr[j]);\n    }\n    return shift_arr.join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split(\"\");\n    let x_len = x_arr.length;\n    let shift_arr = [];\n    for(let i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    for(let i = 0; i < shift; i++){\n        x_arr.unshift(shift_arr[i]);\n    }\n    return x_arr.join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var x_arr = x_str.split('');\n    var x_arr_len = x_arr.length;\n    var shift_arr = [];\n    var shift_arr_len = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x_arr_len_temp = 0;\n    var x_arr_len_temp_2 = 0;\n    var x_arr_len_temp_3 = 0;\n    var x_arr_len_temp_4 = 0;\n    var x_arr_len_temp_5 = 0;\n    var x_arr_len_temp_6 = 0;\n    var x_arr_len_temp_7 = 0;\n    var x_arr_len_temp_8 = 0;\n    var x_arr_len_temp_9 = 0;\n    var x_arr_len_temp_10 = 0;\n    var x_arr_len_temp_11 = 0;\n    var x_arr_len_temp_12 = 0;\n    var x_arr_len_temp_13 = 0;\n    var x_arr_len_temp_14 = 0;\n    var x_arr_len_temp_15 = ", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split('');\n    let shifted_arr = [];\n    for(let i = 0; i < shift; i++){\n        shifted_arr.push(x_arr.pop());\n    }\n    for(let i = 0; i < shift; i++){\n        x_arr.unshift(shifted_arr[i]);\n    }\n    return x_arr.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('');\n    var shifted = digits.slice(shift).concat(digits.slice(0, shift));\n    return shifted.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split(\"\");\n    var result = [];\n    for(var i = 0; i < shift; i++){\n        result.push(digits.pop());\n    }\n    result = result.concat(digits);\n    return result.join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var x_str = x.toString();\n    var shifted_str = \"\";\n    for(var i = 0; i < shift; i++){\n        shifted_str += x_str[x_str.length - 1];\n        x_str = x_str.substring(0, x_str.length - 1);\n    }\n    return shifted_str + x_str;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('');\n    var result = [];\n    for(var i = 0; i < shift; i++){\n        result.push(digits.pop());\n    }\n    result = result.concat(digits);\n    return result.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    if (shift > len){\n        return str.split('').reverse().join('');\n    }\n    var first = str.slice(0, len - shift);\n    var second = str.slice(len - shift);\n    return second + first;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let str = x.toString();\n    let len = str.length;\n    if (shift > len){\n        return str.split(\"\").reverse().join(\"\");\n    }\n    return str.slice(len - shift) + str.slice(0, len - shift);\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('');\n    var result = [];\n    for(var i = 0; i < shift; i++){\n        result.push(digits.pop());\n    }\n    result = result.concat(digits);\n    return result.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('');\n    if (shift > digits.length) {\n        return digits.reverse().join('');\n    }\n    var result = digits.slice(shift, digits.length).concat(digits.slice(0, shift));\n    return result.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split('');\n    let shift_arr = [];\n    for(let i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    let result = shift_arr.join('') + x_arr.join('');\n    return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var str = x.toString();\n    var len = str.length;\n    var shift = shift % len;\n    var result = str.substring(len - shift) + str.substring(0, len - shift);\n    return result;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('');\n    var result = [];\n    for(var i = 0; i < shift; i++){\n        result.push(digits.pop());\n    }\n    result = result.concat(digits);\n    return result.join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split('');\n    let x_arr_len = x_arr.length;\n    let shift_arr = [];\n    for(let i = 0; i < shift; i++){\n        shift_arr.push(x_arr.pop());\n    }\n    let shift_arr_len = shift_arr.length;\n    let shift_arr_str = shift_arr.join('');\n    let x_arr_str = x_arr.join('');\n    if(shift_arr_len > x_arr_len){\n        return shift_arr_str;\n    }\n    return shift_arr_str + x_arr_str;\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split(\"\");\n    var shifted = [];\n    for(var i = 0; i < shift; i++){\n        shifted.push(digits.pop());\n    }\n    return shifted.concat(digits).join(\"\");\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    var digits = x.toString().split('');\n    var result = [];\n    for(var i = 0; i < shift; i++){\n        result.push(digits.pop());\n    }\n    return result.concat(digits).join('');\n}\n", "//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let x_str = x.toString();\n    let x_arr = x_str.split(\"\");\n    let shifted_arr = [];\n    for (let i = 0; i < shift; i++){\n        shifted_arr.push(x_arr.pop());\n    }\n    for (let i = 0; i < shifted_arr.length; i++){\n        x_arr.unshift(shifted_arr[i]);\n    }\n    return x_arr.join(\"\");\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for (let i = 0; i < s.length; i++){\n    if (s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for (let i = 0; i < s.length; i++){\n    if (s[i] === s[i].toUpperCase()){\n      sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++){\n        if (s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    var sum = 0;\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++){\n        if (s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for (let i = 0; i < s.length; i++){\n        if (s[i] === s[i].toUpperCase()){\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n", "//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let sum = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let apples = s.split(\" \")[0];\n  let oranges = s.split(\" \")[2];\n  let apples_num = parseInt(apples);\n  let oranges_num = parseInt(oranges);\n  return n - (apples_num + oranges_num);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruit = s.split(\" \")\n  let apples = fruit[0]\n  let oranges = fruit[3]\n  let mango = n - (Number(apples) + Number(oranges))\n  return mango\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let apples_num = parseInt(apples.slice(0, apples.length - 1));\n    let oranges_num = parseInt(oranges.slice(0, oranges.length - 1));\n    return n - (apples_num + oranges_num);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \")\n  let apples = arr[0]\n  let oranges = arr[3]\n  let apples_num = parseInt(apples.slice(0, apples.length - 1))\n  let oranges_num = parseInt(oranges.slice(0, oranges.length - 1))\n  return n - (apples_num + oranges_num)\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruit = s.split(\" \");\n  let apples = fruit[0];\n  let oranges = fruit[3];\n  let apples_num = parseInt(apples);\n  let oranges_num = parseInt(oranges);\n  let mango = n - (apples_num + oranges_num);\n  return mango;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let apples_num = parseInt(apples);\n    let oranges_num = parseInt(oranges);\n    return n - (apples_num + oranges_num);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = arr[0];\n  let oranges = arr[3];\n  let apples_num = Number(apples.replace(\"apples\", \"\"));\n  let oranges_num = Number(oranges.replace(\"oranges\", \"\"));\n  return n - (apples_num + oranges_num);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let mango = n - (parseInt(apples) + parseInt(oranges));\n    return mango;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let fruit = s.split(' ')\n  let apples = fruit[0]\n  let oranges = fruit[2]\n  let mango = n - (parseInt(apples) + parseInt(oranges))\n  return mango\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let applesNum = parseInt(apples);\n    let orangesNum = parseInt(oranges);\n    return n - applesNum - orangesNum;\n}\n\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let mango = n - (parseInt(apples) + parseInt(oranges));\n    return mango;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let apples = s.split(\" \")[0];\n  let oranges = s.split(\" \")[3];\n  let apples_num = parseInt(apples);\n  let oranges_num = parseInt(oranges);\n  return n - (apples_num + oranges_num);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let mango = n - (parseInt(apples) + parseInt(oranges));\n    return mango;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let mango = n - (parseInt(apples) + parseInt(oranges));\n    return mango;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let apples_num = parseInt(apples);\n    let oranges_num = parseInt(oranges);\n    return n - (apples_num + oranges_num);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let apples = arr[0];\n    let oranges = arr[3];\n    let mango = n - (parseInt(apples) + parseInt(oranges));\n    return mango;\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split(\" \");\n  let apples = arr[0];\n  let oranges = arr[3];\n  let apples_num = parseInt(apples);\n  let oranges_num = parseInt(oranges);\n  return n - (apples_num + oranges_num);\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let apples = s.split(\" \")[0];\n  let oranges = s.split(\" \")[3];\n  return n - (parseInt(apples) + parseInt(oranges));\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let apples = s.split(\" \")[0];\n  let oranges = s.split(\" \")[2];\n  return n - (parseInt(apples) + parseInt(oranges));\n}\n", "//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let arr = s.split(' ');\n    let apples = arr[0];\n    let oranges = arr[3];\n    let apples_num = Number(apples.slice(0, apples.length - 1));\n    let oranges_num = Number(oranges.slice(0, oranges.length - 1));\n    return n - (apples_num + oranges_num);\n}\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) return [];\n  let smallest = arr.reduce((acc, curr, i) => {\n    if (curr % 2 === 0 && (acc === null || curr < acc[0])) {\n      return [curr, i];\n    }\n    return acc;\n  }, null);\n  return smallest || [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0) return [];\n  let smallest = arr.reduce((acc, cur, i) => {\n    if(cur % 2 === 0 && (acc === null || cur < acc[0])){\n      return [cur, i];\n    }\n    return acc;\n  }, null);\n  return smallest || [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) {\n    return [];\n  }\n  let smallest = arr.reduce((acc, curr) => {\n    if (curr % 2 === 0 && (acc === null || curr < acc)) {\n      return curr;\n    }\n    return acc;\n  }, null);\n  if (smallest === null) {\n    return [];\n  }\n  return [smallest, arr.indexOf(smallest)];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) return [];\n  let smallest = arr.reduce((acc, cur, i) => {\n    if (cur % 2 === 0 && (acc === null || cur < acc.value)) {\n      acc = { value: cur, index: i };\n    }\n    return acc;\n  }, null);\n  return smallest ? [smallest.value, smallest.index] : [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) return [];\n  let smallest = arr.filter(x => x % 2 === 0).sort((a, b) => a - b)[0];\n  if (smallest === undefined) return [];\n  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) return [];\n  let smallest = arr.reduce((acc, val, idx) => {\n    if (val % 2 === 0 && (acc === null || val < acc.value)) {\n      return { value: val, index: idx };\n    }\n    return acc;\n  }, null);\n  return smallest ? [smallest.value, smallest.index] : [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0){\n    return [];\n  }\n  let smallest = arr.reduce((acc, cur) => {\n    if(cur % 2 === 0 && (acc === null || cur < acc)){\n      return cur;\n    }\n    return acc;\n  }, null);\n  if(smallest === null){\n    return [];\n  }\n  return [smallest, arr.indexOf(smallest)];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = arr.filter(v => v % 2 === 0).sort((a, b) => a - b)[0];\n  return smallest ? [smallest, arr.indexOf(smallest)] : [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    if(arr.length === 0) return [];\n    let smallest = arr.reduce((acc, cur, i) => {\n        if(cur % 2 === 0 && (acc === null || cur < acc[0])){\n            return [cur, i];\n        }\n        return acc;\n    }, null);\n    return smallest || [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0){\n    return [];\n  }\n  let smallest = arr.reduce((acc, cur, i) => {\n    if(cur % 2 === 0 && (acc === null || cur < acc)){\n      return [cur, i];\n    }\n    return acc;\n  }, null);\n  return smallest || [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) return [];\n  let smallest = arr.reduce((acc, val, idx) => {\n    if (val % 2 === 0 && (acc === null || val < acc.value)) {\n      return {value: val, idx: idx};\n    }\n    return acc;\n  }, null);\n  return smallest === null ? [] : [smallest.value, smallest.idx];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0) return [];\n  let smallest = arr.reduce((acc, cur, i) => {\n    if(cur % 2 === 0 && (acc === null || cur < acc[0])){\n      return [cur, i];\n    }\n    return acc;\n  }, null);\n  return smallest || [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if (arr.length === 0) {\n    return [];\n  }\n  let smallest = arr.filter(x => x % 2 === 0).sort((a, b) => a - b)[0];\n  if (smallest === undefined) {\n    return [];\n  }\n  return [smallest, arr.indexOf(smallest)];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0){\n    return [];\n  }\n  let smallest = arr.reduce((acc, curr) => {\n    if(curr % 2 === 0 && (acc === null || curr < acc)){\n      return curr;\n    }\n    return acc;\n  }, null);\n  if(smallest === null){\n    return [];\n  }\n  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  if(arr.length === 0){\n    return smallest;\n  }\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      if(smallest.length === 0){\n        smallest = [arr[i], i];\n      } else if(arr[i] < smallest[0]){\n        smallest = [arr[i], i];\n      } else if(arr[i] === smallest[0] && i < smallest[1]){\n        smallest = [arr[i], i];\n      }\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  let smallestIndex = 0;\n  let smallestValue = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      if(smallest.length === 0){\n        smallest = [arr[i], i];\n      }\n      if(arr[i] < smallestValue){\n        smallest = [arr[i], i];\n      }\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  if(arr.length === 0) return [];\n  let smallest = arr.reduce((acc, cur, i) => {\n    if(cur % 2 === 0 && (acc === null || cur < acc.value)) {\n      return {value: cur, index: i};\n    }\n    return acc;\n  }, null);\n  return smallest ? [smallest.value, smallest.index] : [];\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  if (arr.length === 0) return smallest;\n  let smallestIndex = 0;\n  let smallestValue = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestValue) {\n      smallestValue = arr[i];\n      smallestIndex = i;\n    }\n  }\n  if (smallestValue % 2 !== 0) return smallest;\n  smallest = [smallestValue, smallestIndex];\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = [];\n  let smallestIndex = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      if(smallest.length === 0){\n        smallest = [arr[i], i];\n      } else if(arr[i] < smallest[0]){\n        smallest = [arr[i], i];\n      } else if(arr[i] === smallest[0] && i < smallestIndex){\n        smallest = [arr[i], i];\n      }\n    }\n  }\n  return smallest;\n}\n", "//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let smallest = arr.filter(x => x % 2 === 0).sort((a, b) => a - b)[0];\n  let smallestIndex = arr.indexOf(smallest);\n  return smallest ? [smallest, smallestIndex] : [];\n}\n"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = 0;\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n            count = 0;\n            for(let j = 0; j < lst.length; j++){\n                if(lst[i] == lst[j]){\n                    count++;\n                }\n            }\n            if(count >= lst[i]){\n                max = lst[i];\n            }\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let max_count = 0;\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n            max_count = count;\n            count = 0;\n        }\n        if(lst[i] == max){\n            count++;\n        }\n    }\n    if(count >= max){\n        return max;\n    }\n    return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  var max = -1;\n  var maxFreq = -1;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n    }\n  }\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst[i] < max){\n      var freq = 0;\n      for(var j = 0; j < lst.length; j++){\n        if(lst[j] == lst[i]){\n          freq++;\n        }\n      }\n      if(freq >= lst[i]){\n        if(lst[i] > maxFreq){\n          maxFreq = lst[i];\n        }\n      }\n    }\n  }\n  return maxFreq;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let max_count = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0){\n      let count = 0;\n      for(let j = 0; j < lst.length; j++){\n        if(lst[j] == lst[i]){\n          count++;\n        }\n      }\n      if(count >= lst[i]){\n        if(count > max_count){\n          max = lst[i];\n          max_count = count;\n        }\n      }\n    }\n  }\n  if(max_count > 0){\n    return max;\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var freq = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n            freq[lst[i]] = (freq[lst[i]] || 0) + 1;\n        }\n    }\n    for(var i = 1; i < freq.length; i++){\n        if(freq[i] >= i){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let max_count = 0;\n  for (let i = 0; i < lst.length; i++){\n    let count = 0;\n    for (let j = 0; j < lst.length; j++){\n      if (lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if (count > max_count && count > lst[i]){\n      max = lst[i];\n      max_count = count;\n    }\n  }\n  if (max_count > max){\n    return max;\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < lst.length; i++){\n    let count = 0;\n    for (let j = 0; j < lst.length; j++){\n      if (lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if (count > maxCount && count > lst[i]){\n      max = lst[i];\n      maxCount = count;\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  let maxFreq = -1;\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if(count >= lst[i] && lst[i] > maxFreq){\n      maxFreq = lst[i];\n      max = count;\n    }\n  }\n  return maxFreq;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > 0 && lst.filter(x => x === lst[i]).length >= lst[i]){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let max_count = 0;\n  let count = 0;\n  for(let i = 0; i < lst.length; i++){\n    count = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] == lst[j]){\n        count++;\n      }\n    }\n    if(count > max_count && count > lst[i]){\n      max = lst[i];\n      max_count = count;\n    }\n  }\n  if(max_count > max){\n    return max;\n  }\n  return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var freq = {};\n    for(var i = 0; i < lst.length; i++){\n        if(freq[lst[i]] === undefined){\n            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n        }\n    }\n    var max = -1;\n    for(var i = 0; i < lst.length; i++){\n        if(freq[lst[i]] >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = 0;\n    let max_count = 0;\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n            count = 0;\n            for(let j = 0; j < lst.length; j++){\n                if(lst[i] === lst[j]){\n                    count++;\n                }\n            }\n            if(count >= lst[i]){\n                if(count > max_count){\n                    max = lst[i];\n                    max_count = count;\n                }\n            }\n        }\n    }\n    if(max_count === 0){\n        return -1;\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i] === lst[j]) {\n        count++;\n      }\n    }\n    if (count > lst[i] && count > maxCount) {\n      max = lst[i];\n      maxCount = count;\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let count = 0;\n    let max = 0;\n    let maxCount = 0;\n    for(let i = 0; i < lst.length; i++){\n        count = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] === lst[j]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > max){\n            max = lst[i];\n            maxCount = count;\n        }\n    }\n    if(maxCount >= max){\n        return max;\n    }\n    return -1;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let max_count = 0;\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] == lst[j]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > max){\n            max = lst[i];\n            max_count = count;\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let maxCount = 0;\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] === lst[j]){\n        count++;\n      }\n    }\n    if(count > maxCount && count > lst[i]){\n      max = lst[i];\n      maxCount = count;\n    }\n  }\n  return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let freq = {}\n    let max = 0\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n            if(freq[lst[i]] === undefined){\n                freq[lst[i]] = 1\n            } else {\n                freq[lst[i]] += 1\n            }\n            if(freq[lst[i]] >= lst[i]){\n                max = Math.max(max, lst[i])\n            }\n        }\n    }\n    return max\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var max = -1;\n    var maxCount = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n            var count = 0;\n            for(var j = 0; j < lst.length; j++){\n                if(lst[i] == lst[j]){\n                    count++;\n                }\n            }\n            if(count >= lst[i] && lst[i] > max){\n                max = lst[i];\n                maxCount = count;\n            }\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = -1;\n    let maxFreq = -1;\n    for(let i = 0; i < lst.length; i++){\n        let freq = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] === lst[j]){\n                freq++;\n            }\n        }\n        if(freq >= lst[i] && lst[i] > max){\n            max = lst[i];\n            maxFreq = freq;\n        }\n    }\n    return max;\n}\n", "//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let max = 0;\n    for(let i = 0; i < lst.length; i++){\n        let count = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] === lst[j]){\n                count++;\n            }\n        }\n        if(count >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    let result = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    result.push(min);\n    result.push(max);\n    lst.splice(lst.indexOf(min), 1);\n    lst.splice(lst.indexOf(max), 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0) return [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result = [];\n    let index = 0;\n    while(lst.length > 0){\n        if(index % 2 == 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n        }\n        else{\n            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n        }\n        index++;\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    let result = [];\n    let min = lst.reduce((acc, val) => acc < val ? acc : val);\n    let max = lst.reduce((acc, val) => acc > val ? acc : val);\n    while(lst.length > 0){\n        result.push(min);\n        lst = lst.filter(val => val !== min);\n        if(lst.length > 0){\n            result.push(max);\n            lst = lst.filter(val => val !== max);\n        }\n        if(lst.length > 0){\n            min = lst.reduce((acc, val) => acc < val ? acc : val);\n            max = lst.reduce((acc, val) => acc > val ? acc : val);\n        }\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length === 0) {\n        return [];\n    }\n    var result = [];\n    var min = lst.reduce(function(a, b) {\n        return a < b ? a : b;\n    });\n    var max = lst.reduce(function(a, b) {\n        return a > b ? a : b;\n    });\n    var i = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0) {\n            result.push(min);\n            min = lst.reduce(function(a, b) {\n                return a < b && a !== min ? a : b;\n            });\n            lst.splice(lst.indexOf(min), 1);\n        } else {\n            result.push(max);\n            max = lst.reduce(function(a, b) {\n                return a > b && a !== max ? a : b;\n            });\n            lst.splice(lst.indexOf(max), 1);\n        }\n        i++;\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length === 0) {\n        return [];\n    }\n    let result = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let index = lst.indexOf(min);\n    result.push(min);\n    result.push(max);\n    lst.splice(index, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0) return [];\n    var result = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n    while(lst.length > 0){\n        result.push(min);\n        lst.splice(lst.indexOf(min), 1);\n        if(lst.length > 0){\n            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n        }\n        min = Math.min.apply(null, lst);\n        max = Math.max.apply(null, lst);\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return []\n    }\n    let min = Math.min(...lst)\n    let max = Math.max(...lst)\n    let result = []\n    while(lst.length > 0){\n        result.push(min)\n        result.push(max)\n        lst.splice(lst.indexOf(min), 1)\n        lst.splice(lst.indexOf(max), 1)\n        min = Math.min(...lst)\n        max = Math.max(...lst)\n    }\n    return result\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length < 2){\n        return lst;\n    }\n    var result = [];\n    var min = lst[0];\n    var max = lst[0];\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    result.push(min);\n    result.push(max);\n    var new_lst = lst.slice(0);\n    new_lst.splice(new_lst.indexOf(min), 1);\n    new_lst.splice(new_lst.indexOf(max), 1);\n    var new_result = strange_sort_list(new_lst);\n    for(var i = 0; i < new_result.length; i++){\n        result.push(new_result[i]);\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length === 0) {\n        return [];\n    }\n    var result = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n    var minIndex = lst.indexOf(min);\n    var maxIndex = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  if (lst.length == 0) return [];\n  var result = [];\n  var min = lst[0];\n  var max = lst[0];\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i];\n    if (lst[i] > max) max = lst[i];\n  }\n  result.push(min);\n  result.push(max);\n  var new_lst = lst.filter(function(x){\n    return x != min && x != max;\n  });\n  return result.concat(strange_sort_list(new_lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length == 0) return [];\n    var result = [];\n    var min = lst[0];\n    var max = lst[0];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    result.push(min);\n    result.push(max);\n    var new_lst = lst.slice(0);\n    new_lst.splice(new_lst.indexOf(min), 1);\n    new_lst.splice(new_lst.indexOf(max), 1);\n    return result.concat(strange_sort_list(new_lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n    var min = lst[0];\n    var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    result.push(min);\n    result.push(max);\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] != min && lst[i] != max){\n            new_lst.push(lst[i]);\n        }\n    }\n    var new_result = strange_sort_list(new_lst);\n    for(var i = 0; i < new_result.length; i++){\n        result.push(new_result[i]);\n    }\n    return result;\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length === 0) {\n        return [];\n    }\n    let result = [];\n    let min = lst.reduce((a, b) => a < b ? a : b);\n    let max = lst.reduce((a, b) => a > b ? a : b);\n    let minIndex = lst.indexOf(min);\n    let maxIndex = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length == 0) return [];\n    var result = [];\n    var min = lst[0];\n    var max = lst[0];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n    result.push(min);\n    result.push(max);\n    var min_index = 0;\n    var max_index = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] < min) min_index = i;\n        if (lst[i] > max) max_index = i;\n    }\n    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length === 0){\n        return [];\n    }\n    var result = [];\n    var min = lst[0];\n    var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    result.push(min);\n    result.push(max);\n    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] !== min && lst[i] !== max){\n            if(lst[i] < min){\n                min_index = i;\n            }\n            if(lst[i] > max){\n                max_index = i;\n            }\n        }\n    }\n    result.push(lst[min_index]);\n    result.push(lst[max_index]);\n    return result;\n}\n\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n    result.push(min);\n    result.push(max);\n    var new_lst = lst.filter(function(x){\n        return x != min && x != max;\n    });\n    return result.concat(strange_sort_list(new_lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if (lst.length === 0) {\n        return [];\n    }\n    let result = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    result.push(min);\n    result.push(max);\n    lst.splice(lst.indexOf(min), 1);\n    lst.splice(lst.indexOf(max), 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return [];\n    }\n    var result = [];\n    var min = lst[0];\n    var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    result.push(min);\n    result.push(max);\n    var new_lst = lst.slice(0);\n    new_lst.splice(new_lst.indexOf(min), 1);\n    new_lst.splice(new_lst.indexOf(max), 1);\n    return result.concat(strange_sort_list(new_lst));\n}\n", "//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    if(lst.length == 0){\n        return [];\n    }\n    var min = lst[0];\n    var max = lst[0];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    var result = [];\n    var flag = true;\n    while(lst.length > 0){\n        if(flag){\n            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n            flag = false;\n        }\n        else{\n            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n            flag = true;\n        }\n        min = lst[0];\n        max = lst[0];\n        for(var i = 0; i < lst.length; i++){\n            if(lst[i] < min){\n                min = lst[i];\n            }\n            if(lst[i] > max){\n                max = lst[i];\n            }\n        }\n    }\n    return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a+b>c && a+c>b && b+c>a){\n        let s=(a+b+c)/2;\n        let area=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n        return Math.round(area*100)/100;\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a+b>c && a+c>b && b+c>a){\n        let s = (a+b+c)/2;\n        return Math.sqrt(s*(s-a)*(s-b)*(s-c)).toFixed(2);\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2\n        return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b <= c || a + c <= b || b + c <= a){\n        return -1;\n    }\n    else{\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a+b>c && a+c>b && b+c>a){\n        let s=(a+b+c)/2\n        return Math.round((s*(s-a)*(s-b)*(s-c))**0.5\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    var s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n}\n\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    var s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    else {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    else {\n        var s = (a + b + c) / 2;\n        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2)\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a+b>c && a+c>b && b+c>a){\n        let s = (a+b+c)/2\n        return Math.sqrt(s*(s-a)*(s-b)*(s-c)).toFixed(2)\n    }\n    return -1\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        var s = (a + b + c) / 2;\n        return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a+b>c && a+c>b && b+c>a){\n        let s=(a+b+c)/2;\n        return Math.sqrt(s*(s-a)*(s-b)*(s-c)).toFixed(2);\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if (a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\n    return -1;\n}\n", "//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        let s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c)).toFixed(2);\n    }\n    return -1;\n}\n"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q[0] > w) return false;\n  if (q[0] === q[q.length - 1]) return will_it_fly(q.slice(1, q.length - 1), w - q[0]);\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length === 0) return false;\n  if(q.length === 1) return q[0] <= w;\n  if(q[0] > w) return false;\n  if(q[0] === q[q.length-1]) return will_it_fly(q.slice(1, q.length-1), w-q[0]);\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length % 2 === 0) {\n    let left = q.slice(0, q.length / 2);\n    let right = q.slice(q.length / 2);\n    return will_it_fly(left, w) && will_it_fly(right, w);\n  } else {\n    let left = q.slice(0, q.length / 2);\n    let right = q.slice(q.length / 2 + 1);\n    return will_it_fly(left, w) && will_it_fly(right, w);\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q[0] > w) return false;\n  if (q[0] === q[q.length - 1]) return will_it_fly(q.slice(1, q.length - 1), w - q[0]);\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q[0] !== q[q.length - 1]) return false;\n  return will_it_fly(q.slice(1, q.length - 1), w);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  for(let i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length === 0){\n    return true;\n  }\n  if(q.length === 1){\n    return q[0] <= w;\n  }\n  if(q[0] !== q[q.length-1]){\n    return false;\n  }\n  return will_it_fly(q.slice(1, q.length-1), w);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length === 0) return true;\n    if (q.length === 1) return q[0] <= w;\n    if (q[0] > w) return false;\n    if (q[0] !== q[q.length - 1]) return false;\n    return will_it_fly(q.slice(1, q.length - 1), w - q[0]);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length % 2 === 0) {\n    let left = q.slice(0, q.length / 2);\n    let right = q.slice(q.length / 2, q.length);\n    return will_it_fly(left, w) && will_it_fly(right, w);\n  }\n  else {\n    let left = q.slice(0, q.length / 2);\n    let right = q.slice(q.length / 2 + 1, q.length);\n    return will_it_fly(left, w) && will_it_fly(right, w);\n  }\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) {\n    return true;\n  }\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  if (q[0] !== q[q.length - 1]) {\n    return false;\n  }\n  return will_it_fly(q.slice(1, q.length - 1), w);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q[0] > w) return false;\n  if (q[0] === q[q.length - 1]) return will_it_fly(q.slice(1, q.length - 1), w - q[0]);\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length === 0){\n        return false;\n    }\n    if(q.length === 1){\n        return q[0] <= w;\n    }\n    if(q[0] !== q[q.length-1]){\n        return false;\n    }\n    return q[0] + q[q.length-1] <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  let left = 0;\n  let right = q.length - 1;\n  while(left <= right){\n    if(q[left] !== q[right]){\n      return false;\n    }\n    sum += q[left];\n    left++;\n    right--;\n  }\n  return sum <= w;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  for(let i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length === 0){\n    return true;\n  }\n  if(q.length === 1){\n    return q[0] <= w;\n  }\n  if(q[0] !== q[q.length - 1]){\n    return false;\n  }\n  return will_it_fly(q.slice(1, q.length - 1), w);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) {\n    return false;\n  }\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  if (q.length % 2 === 0) {\n    return q[0] + q[q.length - 1] <= w && will_it_fly(q.slice(1, q.length - 1), w);\n  }\n  return q[0] + q[q.length - 1] <= w && will_it_fly(q.slice(1, q.length - 1), w);\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length === 0){\n    return false;\n  }\n  if(q.length === 1){\n    return q[0] <= w;\n  }\n  if(q.length === 2){\n    return q[0] + q[1] <= w;\n  }\n  if(q[0] === q[q.length - 1]){\n    return will_it_fly(q.slice(1, q.length - 1), w);\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w;\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n  if (q.length === 8)", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum = 0;\n  for(let i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum <= w){\n    return true;\n  }\n  return false;\n}\n", "//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum = 0;\n    let isBalanced = true;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n        if(q[i] !== q[q.length - i - 1]){\n            isBalanced = false;\n        }\n    }\n    return sum <= w && isBalanced;\n}\n"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n            left++;\n        }\n        else{\n            left++;\n            right--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    let count = 0;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    let count = 0;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n            i++;\n            j--;\n        }\n        else{\n            i++;\n            j--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n            i++;\n            j--;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let n = arr.length;\n    let mid = Math.floor(n/2);\n    let left = arr.slice(0, mid);\n    let right = arr.slice(mid, n);\n    right.reverse();\n    let count = 0;\n    for(let i = 0; i < mid; i++){\n        if(left[i] != right[i]){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    let count = 0;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let len = arr.length;\n    for(let i = 0; i < len/2; i++){\n        if(arr[i] != arr[len - i - 1]){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j){\n        if (arr[i] !== arr[j]){\n            count++;\n            i++;\n            j--;\n        }\n        else{\n            i++;\n            j--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n            if(arr[left + 1] === arr[right]){\n                left++;\n            }\n            else if(arr[left] === arr[right - 1]){\n                right--;\n            }\n            else{\n                left++;\n                right--;\n            }\n        }\n        else{\n            left++;\n            right--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n            i++;\n        }\n        else{\n            i++;\n            j--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n            left++;\n        }\n        else{\n            left++;\n            right--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let left = 0;\n    let right = arr.length - 1;\n    let count = 0;\n    while(left < right){\n        if(arr[left] != arr[right]){\n            count++;\n        }\n        left++;\n        right--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let smallest_change = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            smallest_change++;\n            if(arr[left + 1] === arr[right]){\n                left++;\n            } else if(arr[left] === arr[right - 1]){\n                right--;\n            } else {\n                left++;\n                right--;\n            }\n        }\n        left++;\n        right--;\n    }\n    return smallest_change;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let left = 0;\n    let right = arr.length - 1;\n    while(left < right){\n        if(arr[left] !== arr[right]){\n            count++;\n            if(arr[left + 1] === arr[right]){\n                left++;\n            }\n            else if(arr[left] === arr[right - 1]){\n                right--;\n            }\n            else{\n                left++;\n                right--;\n            }\n        }\n        else{\n            left++;\n            right--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n            if(arr[i + 1] === arr[j]){\n                i++;\n            }\n            else if(arr[i] === arr[j - 1]){\n                j--;\n            }\n            else{\n                i++;\n                j--;\n            }\n        }\n        else{\n            i++;\n            j--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length/2; i++){\n        if(arr[i] !== arr[arr.length - 1 - i]){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] !== arr[j]){\n            count++;\n            i++;\n            j--;\n        }\n        else{\n            i++;\n            j--;\n        }\n    }\n    return count;\n}\n", "//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let i = 0;\n    let j = arr.length - 1;\n    let count = 0;\n    while(i < j){\n        if(arr[i] != arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var len1 = 0;\n    var len2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        len1 += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        len2 += lst2[i].length;\n    }\n    if(len1 < len2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let sum2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n    }\n    if(sum1 < sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var lst1_total = 0;\n    var lst2_total = 0;\n    for(var i = 0; i < lst1.length; i++){\n        lst1_total += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        lst2_total += lst2[i].length;\n    }\n    if(lst1_total < lst2_total){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for (var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2){\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let count1 = 0;\n    let count2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        count1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        count2 += lst2[i].length;\n    }\n    if(count1 < count2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if(lst1.length == 0 && lst2.length == 0){\n        return []\n    }\n    else if(lst1.length == 0){\n        return lst2\n    }\n    else if(lst2.length == 0){\n        return lst1\n    }\n    else{\n        let total1 = 0\n        let total2 = 0\n        for(let i = 0; i < lst1.length; i++){\n            total1 += lst1[i].length\n        }\n        for(let i = 0; i < lst2.length; i++){\n            total2 += lst2[i].length\n        }\n        if(total1 < total2){\n            return lst1\n        }\n        else if(total1 > total2){\n            return lst2\n        }\n        else{\n            return lst1\n        }\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let sum1 = 0;\n    let sum2 = 0;\n    for (let i = 0; i < lst1.length; i++){\n        sum1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++){\n        sum2 += lst2[i].length;\n    }\n    if (sum1 < sum2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    if (lst1.length === 0 && lst2.length === 0){\n        return [];\n    }\n    if (lst1.length === 0){\n        return lst2;\n    }\n    if (lst2.length === 0){\n        return lst1;\n    }\n    var total1 = 0;\n    var total2 = 0;\n    for (var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for (var i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2){\n        return lst1;\n    }\n    return lst2;\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else if(total1 > total2){\n        return lst2;\n    }\n    else{\n        return lst1;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total1 = 0;\n    let total2 = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(var i = 0; i < lst2.length; i++){\n        total2 += lst2[i].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    var total1 = 0;\n    var total2 = 0;\n    for(var i = 0; i < lst1.length; i++){\n        total1 += lst1[i].length;\n    }\n    for(var j = 0; j < lst2.length; j++){\n        total2 += lst2[j].length;\n    }\n    if(total1 < total2){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n", "//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total1 = 0;\n  let total2 = 0;\n  lst1.forEach(function(item){\n    total1 += item.length;\n  });\n  lst2.forEach(function(item){\n    total2 += item.length;\n  });\n  if (total1 < total2){\n    return lst1;\n  }\n  else{\n    return lst2;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n        var count = 0;\n        for(var i = 0; i < primes.length; i++){\n            if(a % primes[i] == 0){\n                count++;\n            }\n        }\n        if(count == 3){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a<100){\n        for(var i=2;i<a;i++){\n            if(a%i==0){\n                if(is_prime(i)){\n                    var b=a/i;\n                    if(is_prime(b)){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a<100){\n        let arr = [];\n        for(let i=2; i<a; i++){\n            if(a%i==0){\n                arr.push(i);\n            }\n        }\n        if(arr.length==3){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n    else{\n        return false;\n    }\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        for(let i = 2; i < a; i++){\n            if(a % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        for(let i = 2; i < a; i++){\n            if(a % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        if(a % 2 == 0){\n            return false;\n        }\n        for(let i = 3; i < a; i += 2){\n            if(a % i == 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if (a < 100) {\n        for (let i = 2; i < a; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        for(let i = 2; i < a; i++){\n            if(a % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a<100){\n        let prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n        let count = 0;\n        for(let i=0;i<prime.length;i++){\n            if(a%prime[i]==0){\n                count++;\n            }\n        }\n        if(count==3){\n            return true;\n        }\n    }\n    return false;\n}", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if (a < 100){\n        for (let i = 2; i < a; i++){\n            if (a % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        let isPrime = (num) => {\n            let isPrime = true;\n            for(let i = 2; i < num; i++){\n                if(num % i === 0){\n                    isPrime = false;\n                    break;\n                }\n            }\n            return isPrime;\n        }\n        let num = a;\n        let count = 0;\n        let primes = [];\n        while(num > 1){\n            for(let i = 2; i < num; i++){\n                if(num % i === 0){\n                    if(isPrime(i)){\n                        primes.push(i);\n                        count++;\n                    }\n                    num /= i;\n                    break;\n                }\n            }\n        }\n        return count === 3;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        for(let i = 2; i < a; i++){\n            if(a % i === 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if (a < 100){\n        for (let i = 2; i < a; i++){\n            if (a % i == 0){\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        var prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n        var i = 0;\n        var j = 0;\n        var k = 0;\n        for(i = 0; i < prime.length; i++){\n            for(j = 0; j < prime.length; j++){\n                for(k = 0; k < prime.length; k++){\n                    if(prime[i] * prime[j] * prime[k] == a){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n\tif(a < 100){\n\t\tfor(var i = 2; i < a; i++){\n\t\t\tif(a % i == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if (a < 100) {\n        for (let i = 2; i < a; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n        let count = 0;\n        for(let i = 0; i < primes.length; i++){\n            if(a % primes[i] === 0){\n                count++;\n            }\n        }\n        if(count === 3){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n        let is_multiply = false;\n        for(let i = 0; i < primes.length; i++){\n            for(let j = i + 1; j < primes.length; j++){\n                for(let k = j + 1; k < primes.length; k++){\n                    if(primes[i] * primes[j] * primes[k] == a){\n                        is_multiply = true;\n                    }\n                }\n            }\n        }\n        return is_multiply;\n    }\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a<100){\n        for(let i=2;i<a;i++){\n            if(a%i===0){\n                let prime=true;\n                for(let j=2;j<i;j++){\n                    if(i%j===0){\n                        prime=false;\n                    }\n                }\n                if(prime){\n                    let a1=a/i;\n                    for(let k=2;k<a1;k++){\n                        if(a1%k===0){\n                            let prime1=true;\n                            for(let l=2;l<k;l++){\n                                if(k%l===0){\n                                    prime1=false;\n                                }\n                            }\n                            if(prime1){\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a<100){\n        var prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n        var count = 0;\n        for(var i=0;i<prime.length;i++){\n            if(a%prime[i]==0){\n                count++;\n            }\n        }\n        if(count==3){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}\n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x % n !== 0) return false;\n  return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let count = 0;\n  let result = 1;\n  while(result < x){\n    result = Math.pow(n, count);\n    count++;\n  }\n  return result === x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    let i = 0;\n    while (n ** i < x) {\n        i++;\n    }\n    return n ** i === x;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === 1) return true;\n    if (x % n !== 0) return false;\n    return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n !== 0) return false\n  return is_simple_power(x / n, n)\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true\n  if (x % n !== 0) return false\n  return is_simple_power(x / n, n)\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  return x % n === 0 && x / n % n === 0\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x % n !== 0) return false;\n  return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  return x % n === 0 && x / n % n === 0;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === 1) return true;\n    if (x % n !== 0) return false;\n    return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === 1) return true;\n    if (x % n !== 0) return false;\n    return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x == 1) return true;\n  if (x % n != 0) return false;\n  return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    return x == Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x < 1) return false;\n  if (x % n !== 0) return false;\n  return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x < n) return false;\n  if (x % n === 0) {\n    return is_simple_power(x / n, n);\n  }\n  return false;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x % n !== 0) return false;\n  return is_simple_power(x/n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  let count = 0;\n  while (x > 1){\n    x = x/n;\n    count++;\n  }\n  return x === 1 && count === 1;\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x % n !== 0) return false;\n  return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if (x === 1) return true;\n    if (x % n !== 0) return false;\n    return is_simple_power(x / n, n);\n}\n", "//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (x === 1) return true;\n  if (x % n !== 0) return false;\n  return is_simple_power(x / n, n);\n}\n"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    var root = Math.cbrt(a);\n    return root % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a === 0){\n        return true;\n    }\n    if(a < 0){\n        a = -a;\n    }\n    let x = Math.cbrt(a);\n    return Math.pow(Math.round(x), 3) === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if (a === 0) return true;\n    if (a < 0) a = -a;\n    var x = Math.sqrt(a);\n    return (x === Math.floor(x)) && (x % 3 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.sqrt(a);\n    return Math.pow(x, 3) === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a===0){\n        return true;\n    }\n    if(a<0){\n        a=-a;\n    }\n    var x=Math.sqrt(a);\n    return x===Math.floor(x);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    var x = Math.cbrt(a);\n    return x == Math.floor(x);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    var x = Math.sqrt(a);\n    return Math.pow(x, 3) === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.sqrt(a);\n    return x % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = Math.abs(a);\n    }\n    var x = Math.sqrt(a);\n    return Math.pow(x, 3) === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let x = Math.cbrt(a);\n    return x === Math.floor(x);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = Math.abs(a);\n    }\n    var x = Math.cbrt(a);\n    return Math.pow(x, 3) === a;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    var x = Math.cbrt(a);\n    return (x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    let x = Math.sqrt(a);\n    return (x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    var root = Math.cbrt(a);\n    return Math.round(root) === root;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    let x = Math.sqrt(a);\n    return Math.round(x) === x;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    return Math.cbrt(a) % 1 === 0;\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    var x = Math.sqrt(a);\n    return (x % 1 === 0);\n}\n", "//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        a = -a;\n    }\n    let root = Math.cbrt(a);\n    return Math.round(root) === root;\n}\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  return num.split('').filter(x => x.match(/[2357ABDE]/)).length;\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,22", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let count = 0;\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  return num.split('').filter(x => ['2', '3', '5', '7', 'A', 'B', 'D'].includes(x)).length\n}\n", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let count = 0;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, ", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,22", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let nums = num.split('');\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 16", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173", "//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = \"\"\n  let num = decimal\n  while (num > 0){\n    binary = (num % 2) + binary\n    num = Math.floor(num / 2)\n  }\n  return \"db\" + binary + \"db\"\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return \"db\" + (decimal >>> 0).toString(2) + \"db\"\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return 'db' + (decimal >>> 0).toString(2) + 'db';\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = (decimal >>> 0).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return 'db' + (decimal >>> 0).toString(2) + 'db'\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return \"db\" + (decimal >>> 0).toString(2) + \"db\"\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2)\n  return `db${binary}db`\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2)\n  return `db${binary}db`\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    var binary = (decimal >>> 0).toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = (decimal).toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = decimal.toString(2);\n  return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    let binary = decimal.toString(2);\n    return \"db\" + binary + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n    return \"db\" + (decimal >>> 0).toString(2) + \"db\";\n}\n", "//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  return 'db' + (decimal >>> 0).toString(2) + 'db';\n}\n"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if (s.length < 3) return false\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false\n        }\n    }\n    return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false\n    }\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length<3) return false;\n  for(let i=0;i<s.length-2;i++){\n    if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]) return false;\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length < 3) return false;\n  for(let i = 0; i < s.length - 2; i++){\n    if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if(s.length<3) return false\n  for(let i=0;i<s.length-2;i++){\n    if(s[i]===s[i+1]||s[i]===s[i+2]||s[i+1]===s[i+2]) return false\n  }\n  return true\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length<3) return false;\n    for(let i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if (s.length < 3) return false;\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;\n    }\n    return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n    }\n    return true;\n}\n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n            result.push(\"A\");\n        }else if(grades[i] >= 3.3){\n            result.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n            result.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            result.push(\"B\");\n        }else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n        }else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n        }else if(grades[i] >= 1.7", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n        }\n", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var result = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push(\"A+\");\n        } else if(grades[i] >= 3.7){\n            result.push(\"A\");\n        } else if(grades[i] >= 3.3){\n            result.push(\"A-\");\n        } else if(grades[i] >= 3.0){\n            result.push(\"B+\");\n        } else if(grades[i] >= 2.7){\n            result.push(\"B\");\n        } else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n        } else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n        } else if(grades[i] >= 1.7", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n            result.push(\"A\");\n        }else if(grades[i] >= 3.3){\n            result.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n            result.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            result.push(\"B\");\n        }else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n        }else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n        }else if(grades[i] >= 1.7", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n        }\n", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            result.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n            result.push(\"A\");\n        }else if(grades[i] >= 3.3){\n            result.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n            result.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            result.push(\"B\");\n        }else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n        }else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n        }else if(grades[i] >= 1.7", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n            letter_grade.push(\"A\");\n        }else if(grades[i] >= 3.3){\n            letter_grade.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n            letter_grade.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            letter_grade.push(\"B\");\n        }else if(grades[i] >= 2.3){\n            letter_grade.push(\"B-\");\n        }else if(grades[i] >= 2.0){\n            letter_grade.push(\"C+\");", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if (grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if (grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if (grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = []\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\")\n        }\n        else if(grades[i] > 3.7){\n            letter_grade.push(\"A\")\n        }\n        else if(grades[i] > 3.3){\n            letter_grade.push(\"A-\")\n        }\n        else if(grades[i] > 3.0){\n            letter_grade.push(\"B+\")\n        }\n        else if(grades[i] > 2.7){\n            letter_grade.push(\"B\")\n        }\n        else if(grades[i] > 2.3){\n            letter_grade.push(\"B-\")\n        }\n        else if(grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if (grades[i] > 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if (grades[i] > 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if (grades[i] > 2.0", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n            letter_grade.push(\"A\");\n        }else if(grades[i] >= 3.3){\n            letter_grade.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n            letter_grade.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            letter_grade.push(\"B\");\n        }else if(grades[i] >= 2.3){\n            letter_grade.push(\"B-\");\n        }else if(grades[i] >= 2.0){\n            letter_grade.push(\"C+\");", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grades.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grades.push(\"B-\");\n        }\n        else if(grades[", "//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            letter_grade.push(\"A+\");\n        }\n        else if(grades[i] > 3.7){\n            letter_grade.push(\"A\");\n        }\n        else if(grades[i] > 3.3){\n            letter_grade.push(\"A-\");\n        }\n        else if(grades[i] > 3.0){\n            letter_grade.push(\"B+\");\n        }\n        else if(grades[i] > 2.7){\n            letter_grade.push(\"B\");\n        }\n        else if(grades[i] > 2.3){\n            letter_grade.push(\"B-\");\n        }\n        else if(grades[i] > 2.0"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  let prime = true;\n  for(let i = 2; i < length; i++){\n    if(length % i === 0){\n      prime = false;\n    }\n  }\n  return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let num = string.length;\n    let i = 2;\n    while (i < num) {\n        if (num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    var length = string.length;\n    if(length === 1) return false;\n    for(var i = 2; i < length; i++){\n        if(length % i === 0) return false;\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let length = string.length;\n  let count = 0;\n  for (let i = 2; i < length; i++){\n    if (length % i === 0){\n      count++;\n    }\n  }\n  if (count > 0){\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    let prime = true;\n    for(let i = 2; i < length; i++){\n        if(length % i === 0){\n            prime = false;\n            break;\n        }\n    }\n    return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let number = string.length;\n    let prime = true;\n    for (let i = 2; i < number; i++){\n        if (number % i === 0){\n            prime = false;\n        }\n    }\n    return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.length % i === 0) {\n      prime = false;\n    }\n  }\n  return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  return string.length % 2 != 0 && string.length % 3 != 0 && string.length % 5 != 0 && string.length % 7 != 0 && string.length % 11 != 0 && string.length % 13 != 0 && string.length % 17 != 0 && string.length % 19 != 0 && string.length % 23 != 0 && string.length % 29 != 0 && string.length % 31 != 0 && string.length % 37 != 0 && string.length % 41 != 0 && string.length % 43 != 0 && string.length % 47 != 0 && string.length % 53 != 0 && string.length % 59 != 0 && string.length % 61 != 0 && string.length % 67 != 0 && string.length % 71 != 0 && string.length % 73 != 0 && string.length % 79 != 0 && string.length % 83 != 0 && string.length % 89 != 0 && string.length % 97 != 0;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    return isPrime(string.length);\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = string.length;\n    let prime = true;\n    for(let i = 2; i < length; i++){\n        if(length % i == 0){\n            prime = false;\n        }\n    }\n    return prime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    var i = 2;\n    var isPrime = true;\n    while(i < string.length){\n        if(string.length % i == 0){\n            isPrime = false;\n        }\n        i++;\n    }\n    return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let num = string.length;\n    for(let i = 2; i < num; i++){\n        if(num % i === 0){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let n = string.length;\n    let isPrime = true;\n    for(let i = 2; i < n; i++){\n        if(n % i == 0){\n            isPrime = false;\n        }\n    }\n    return isPrime;\n}\n", "//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  return isPrime(string.length);\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < Math.pow(10, n); i++){\n        let number = i.toString();\n        if(number.startsWith('1') || number.endsWith('1')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10 ** n; i++){\n        let str = i.toString();\n        if(str.startsWith('1') || str.endsWith('1')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i <= 9; i++){\n        count += 2;\n        for(let j = 1; j < n; j++){\n            count += 8 * Math.pow(10, j - 1);\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = 1;\n    let end = 1;\n    for(let i = 0; i < n-1; i++){\n        start *= 9;\n        end *= 10;\n    }\n    count += start + end;\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = Math.pow(10, n-1);\n    let end = Math.pow(10, n) - 1;\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        if(str[0] === '1' || str[str.length - 1] === '1'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = 1;\n    let end = 1;\n    for(let i = 0; i < n-1; i++){\n        start = start * 9;\n        end = end * 10;\n    }\n    count = count + start + end;\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < Math.pow(10, n); i++){\n        let num = i.toString();\n        if(num.startsWith('1') || num.endsWith('1')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = Math.pow(10, n-1);\n    let end = Math.pow(10, n) - 1;\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        if(str.startsWith('1') || str.endsWith('1')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i <= 9; i++){\n        let start = i;\n        let end = 10**n - i;\n        if(start % 10 === 1 || end % 10 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = Math.pow(10, n-1);\n    let end = Math.pow(10, n) - 1;\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        if(str.startsWith(\"1\") || str.endsWith(\"1\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10; i++){\n        count += 9 * Math.pow(10, n-2);\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10; i++){\n        count += Math.pow(9, n-1);\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = Math.pow(10, n-1);\n    let end = Math.pow(10, n) - 1;\n    for(let i = start; i <= end; i++){\n        let str = i.toString();\n        if(str.startsWith('1') || str.endsWith('1')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    if(n === 1){\n        return 2;\n    }\n    return 9 * Math.pow(10, n - 2) + 2 * starts_one_ends(n - 1);\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10; i++){\n        count += Math.pow(9, n-1);\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = Math.pow(10, n-1);\n    let end = Math.pow(10, n) - 1;\n    for(let i = start; i <= end; i++){\n        if(i.toString().startsWith('1') || i.toString().endsWith('1')){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    let start = Math.pow(10,n-1);\n    let end = Math.pow(10,n)-1;\n    for(let i = start; i<=end; i++){\n        let num = i.toString();\n        if(num[0] === '1' || num[num.length-1] === '1'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < 10; i++){\n        count += 10**(n-1);\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i < Math.pow(10, n); i++){\n        let num = i.toString();\n        if(num[0] === '1' || num[num.length - 1] === '1'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for(let i = 1; i <= Math.pow(10, n-1); i++){\n        let num = i;\n        while(num < Math.pow(10, n)){\n            num *= 10;\n            if(num % 10 == 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  return (N.toString(2)).split('').reduce((a, b) => a + parseInt(b));\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let binary = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i < binary.length; i++){\n        sum += Number(binary[i]);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while (N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    var binary = [];\n    while(N > 0){\n        binary.push(N % 2);\n        N = Math.floor(N / 2);\n    }\n    return binary.reverse().join(\"\");\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    var sum = 0;\n    while (N > 0) {\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let sum = 0;\n  while(N > 0){\n    sum += N % 10;\n    N = Math.floor(N / 10);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    var binary = (N).toString(2);\n    var sum = 0;\n    for(var i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2)\n  let sum = 0\n  for (let i = 0; i < binary.length; i++) {\n    sum += parseInt(binary[i])\n  }\n  return sum.toString(2)\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    let binary = N.toString(2);\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  let binary = N.toString(2);\n  let sum = 0;\n  for(let i = 0; i < binary.length; i++){\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    while(N > 0){\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}\n", "//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    var binary = N.toString(2);\n    var sum = 0;\n    for(var i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i]);\n    }\n    return sum.toString(2);\n}\n"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0 && i % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0 && i % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0 && i % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let sum = 0;\n  for(let i = 1; i < lst.length; i+=2){\n    sum += lst[i];\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length; i+=2){\n        sum += lst[i];\n    }\n    return sum;\n}\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    let arr = s.split(\" \");\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        let newWord = \"\";\n        let word = arr[i];\n        let charArr = word.split(\"\");\n        charArr.sort();\n        for(let j = 0; j < charArr.length; j++){\n            newWord += charArr[j];\n        }\n        newArr.push(newWord);\n    }\n    return newArr.join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(\" \").map(function(word){\n    return word.split(\"\").sort().join(\"\");\n  }).join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    let words = s.split(' ');\n    let newWords = [];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let newWord = '';\n        for(let j = 0; j < word.length; j++){\n            let char = word[j];\n            newWord += char;\n        }\n        newWords.push(newWord);\n    }\n    return newWords.join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var words = s.split(' ');\n    var result = [];\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n        var chars = word.split('');\n        chars.sort();\n        result.push(chars.join(''));\n    }\n    return result.join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    let words = s.split(' ');\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let sorted = word.split('').sort().join('');\n        result.push(sorted);\n    }\n    return result.join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  return s.split(' ').map(function(word){\n    return word.split('').sort().join('');\n  }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(' ').map(function(word){\n        return word.split('').sort().join('');\n    }).join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    return s.split(\" \").map(function(word){\n        return word.split(\"\").sort().join(\"\");\n    }).join(\" \");\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var words = s.split(\" \");\n    var result = \"\";\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n        var chars = word.split(\"\");\n        chars.sort();\n        result += chars.join(\"\");\n        if(i < words.length - 1){\n            result += \" \";\n        }\n    }\n    return result;\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var words = s.split(' ');\n  var result = [];\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    var chars = word.split('');\n    chars.sort();\n    result.push(chars.join(''));\n  }\n  return result.join(' ');\n}\n", "//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var words = s.split(' ');\n    var result = [];\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n        var sorted = word.split('').sort().join('');\n        result.push(sorted);\n    }\n    return result.join(' ');\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    for(var j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === x){\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort(function(a, b){\n    if(a[0] < b[0]){\n      return -1;\n    }\n    if(a[0] > b[0]){\n      return 1;\n    }\n    if(a[1] > b[1]){\n      return -1;\n    }\n    if(a[1] < b[1]){\n      return 1;\n    }\n    return 0;\n  });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] == b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] == x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        if(a[0] == b[0]){\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        for (var j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b) {\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === x){\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort(function(a, b){\n        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    return result.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n}\n"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length == 0) return [];\n    if(array.length == 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 == 0) return array.sort(function(a, b){return b - a;});\n    return array.sort(function(a, b){return a - b;});\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return [];\n    if(array.length === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return array;\n    }\n    if(array.length === 1){\n        return array;\n    }\n    if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return [];\n    if(array.length === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0) return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if (array.length === 0) {\n    return [];\n  }\n  if (array.length === 1) {\n    return array;\n  }\n  if ((array[0] + array[array.length - 1]) % 2 === 0) {\n    return array.sort((a, b) => b - a);\n  }\n  return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return [];\n    if(array.length === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0) return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    if(array.length === 1){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return [];\n    if(array.length === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0) return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length < 2){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length < 2){\n        return array;\n    }\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return [];\n  if(array.length === 1) return array;\n  if((array[0] + array[array.length - 1]) % 2 === 0) return array.sort((a, b) => b - a);\n  return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length === 0) return array;\n  if(array.length === 1) return array;\n  let sum = array[0] + array[array.length - 1];\n  if(sum % 2 === 0){\n    return array.sort((a, b) => a - b);\n  }\n  return array.sort((a, b) => b - a);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    if(array.length === 1){\n        return array;\n    }\n    if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return [];\n    if(array.length === 1) return array;\n    if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let sum = array[0] + array[array.length - 1];\n  if(sum % 2 == 0){\n    return array.sort((a, b) => b - a);\n  }\n  else{\n    return array.sort((a, b) => a - b);\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length == 0) return [];\n    if(array.length == 1) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 == 0) return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    if(array.length === 1){\n        return array;\n    }\n    if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort(function(a, b){\n            return b - a;\n        });\n    }\n    return array.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if(array.length == 0) return [];\n  if(array.length == 1) return array;\n  if((array[0] + array[array.length - 1]) % 2 == 0){\n    return array.sort(function(a, b){\n      return b - a;\n    });\n  }\n  else{\n    return array.sort(function(a, b){\n      return a - b;\n    });\n  }\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0){\n        return [];\n    }\n    if(array.length === 1){\n        return array;\n    }\n    if((array[0] + array[array.length - 1]) % 2 === 0){\n        return array.sort((a, b) => b - a);\n    }\n    return array.sort((a, b) => a - b);\n}\n", "//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    if(array.length === 0) return array;\n    if(array.length === 1) return array;\n    let sum = array[0] + array[array.length - 1];\n    if(sum % 2 === 0) return array.sort((a, b) => b - a);\n    return array.sort((a, b) => a - b);\n}\n"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let newAlphabet = alphabet.slice(2*2);\n    newAlphabet += alphabet.slice(0, 2*2);\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        if (index === -1){\n            encrypted += s[i];\n        } else {\n            encrypted += newAlphabet[index];\n        }\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let newAlphabet = alphabet.slice(2*2);\n    newAlphabet += alphabet.slice(0, 2*2);\n    let encrypted = \"\";\n    for(let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        if(index > -1){\n            encrypted += newAlphabet[index];\n        }\n        else{\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newAlphabet = alphabet.slice(2*2) + alphabet.slice(0, 2*2);\n    var encrypted = \"\";\n    for(var i = 0; i < s.length; i++){\n        var index = alphabet.indexOf(s[i]);\n        if(index > -1){\n            encrypted += newAlphabet[index];\n        }\n        else{\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var encrypted = \"\";\n    for(var i = 0; i < s.length; i++){\n        var letter = s[i];\n        var index = alphabet.indexOf(letter);\n        var newIndex = index + 2;\n        if(newIndex >= 26){\n            newIndex = newIndex - 26;\n        }\n        encrypted += alphabet[newIndex];\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let newString = \"\";\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if(charCode >= 97 && charCode <= 122){\n            charCode = charCode + 4;\n            if(charCode > 122){\n                charCode = charCode - 26;\n            }\n            newString += String.fromCharCode(charCode);\n        }\n        else if(charCode >= 65 && charCode <= 90){\n            charCode = charCode + 4;\n            if(charCode > 90){\n                charCode = charCode - 26;\n            }\n            newString += String.fromCharCode(charCode);\n        }\n        else{\n            newString += String.fromCharCode(charCode);\n        }\n    }\n    return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newAlphabet = alphabet.substring(2*2) + alphabet.substring(0, 2*2);\n    var encrypted = \"\";\n    for(var i = 0; i < s.length; i++){\n        var index = alphabet.indexOf(s[i]);\n        if(index > -1){\n            encrypted += newAlphabet[index];\n        }\n        else{\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let newString = \"\";\n    for (let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if (charCode >= 97 && charCode <= 122){\n            charCode += 2 * 2;\n            if (charCode > 122){\n                charCode -= 26;\n            }\n        }\n        newString += String.fromCharCode(charCode);\n    }\n    return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let newString = \"\";\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if(charCode >= 65 && charCode <= 90){\n            charCode += 2 * 2;\n            if(charCode > 90){\n                charCode -= 26;\n            }\n        } else if(charCode >= 97 && charCode <= 122){\n            charCode += 2 * 2;\n            if(charCode > 122){\n                charCode -= 26;\n            }\n        }\n        newString += String.fromCharCode(charCode);\n    }\n    return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var newAlphabet = alphabet.slice(2*2);\n  newAlphabet = newAlphabet + alphabet.slice(0,2*2);\n  var encrypted = \"\";\n  for(var i = 0; i < s.length; i++){\n    var index = alphabet.indexOf(s[i]);\n    if(index > -1){\n      encrypted += newAlphabet[index];\n    }\n    else{\n      encrypted += s[i];\n    }\n  }\n  return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let newStr = '';\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 122){\n      charCode = charCode + 2 * 2;\n      if(charCode > 122){\n        charCode = charCode - 26;\n      }\n      newStr += String.fromCharCode(charCode);\n    } else if(charCode >= 65 && charCode <= 90){\n      charCode = charCode + 2 * 2;\n      if(charCode > 90){\n        charCode = charCode - 26;\n      }\n      newStr += String.fromCharCode(charCode);\n    } else {\n      newStr += String.fromCharCode(charCode);\n    }\n  }\n  return newStr;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let newAlphabet = alphabet.slice(2*2)+alphabet.slice(0,2*2);\n  let newString = \"\";\n  for(let i = 0; i < s.length; i++){\n    let index = alphabet.indexOf(s[i]);\n    newString += newAlphabet[index];\n  }\n  return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n    let newAlphabet = alphabet.slice(2).concat(alphabet.slice(0,2));\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        if (index > -1){\n            encrypted += newAlphabet[index];\n        } else {\n            encrypted += s[i];\n        }\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let newStr = \"\";\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 122){\n      newStr += String.fromCharCode(((charCode - 97 + 4) % 26) + 97);\n    } else if(charCode >= 65 && charCode <= 90){\n      newStr += String.fromCharCode(((charCode - 65 + 4) % 26) + 65);\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var newString = \"\";\n  for (var i = 0; i < s.length; i++){\n    var index = alphabet.indexOf(s[i]);\n    if (index < 24){\n      newString += alphabet[index + 4];\n    } else {\n      newString += alphabet[index - 22];\n    }\n  }\n  return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let newString = \"\";\n    for(let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        if(index + 4 >= 26){\n            index = index + 4 - 26;\n        } else {\n            index = index + 4;\n        }\n        newString += alphabet[index];\n    }\n    return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let newString = '';\n  for(let i = 0; i < s.length; i++){\n    let charCode = s.charCodeAt(i);\n    if(charCode >= 97 && charCode <= 122){\n      charCode += 4;\n      if(charCode > 122){\n        charCode -= 26;\n      }\n      newString += String.fromCharCode(charCode);\n    }\n    else if(charCode >= 65 && charCode <= 90){\n      charCode += 4;\n      if(charCode > 90){\n        charCode -= 26;\n      }\n      newString += String.fromCharCode(charCode);\n    }\n    else{\n      newString += s[i];\n    }\n  }\n  return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++){\n        let index = alphabet.indexOf(s[i]);\n        let newIndex = index - 2;\n        if (newIndex < 0){\n            newIndex = newIndex + 26;\n        }\n        encrypted += alphabet[newIndex];\n    }\n    return encrypted;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let newString = '';\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if(charCode >= 65 && charCode <= 90){\n            charCode = charCode + 2 * 2;\n            if(charCode > 90){\n                charCode = charCode - 26;\n            }\n        }\n        else if(charCode >= 97 && charCode <= 122){\n            charCode = charCode + 2 * 2;\n            if(charCode > 122){\n                charCode = charCode - 26;\n            }\n        }\n        newString += String.fromCharCode(charCode);\n    }\n    return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newString = \"\";\n    for(var i = 0; i < s.length; i++){\n        var index = alphabet.indexOf(s[i]);\n        if(index + 4 > 25){\n            index = index - 26;\n        }\n        newString += alphabet[index + 4];\n    }\n    return newString;\n}\n", "//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var encrypted = \"\";\n  for(var i = 0; i < s.length; i++){\n    var index = alphabet.indexOf(s[i]);\n    if(index > -1){\n      encrypted += alphabet[index + 2*2];\n    }\n  }\n  return encrypted;\n}\n"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let min = lst[0];\n  let secondMin = lst[1];\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      secondMin = min;\n      min = lst[i];\n    } else if(lst[i] < secondMin){\n      secondMin = lst[i];\n    }\n  }\n  return secondMin;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let sorted = lst.sort((a, b) => a - b);\n  return sorted[1];\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    var min = lst[0];\n    var min2 = lst[1];\n    if(min2 < min){\n        var temp = min;\n        min = min2;\n        min2 = temp;\n    }\n    for(var i = 2; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        } else if(lst[i] < min2){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if (lst.length < 2) return undefined;\n  let sorted = lst.sort((a, b) => a - b);\n  return sorted[1];\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let sorted = lst.sort((a,b) => a-b);\n  return sorted[1];\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if (lst.length < 2) return undefined;\n  let min = lst[0];\n  let secondMin = lst[1];\n  if (secondMin < min) {\n    [min, secondMin] = [secondMin, min];\n  }\n  for (let i = 2; i < lst.length; i++) {\n    if (lst[i] < min) {\n      [min, secondMin] = [lst[i], min];\n    } else if (lst[i] < secondMin) {\n      secondMin = lst[i];\n    }\n  }\n  return secondMin;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2) return undefined;\n  let sorted = lst.sort((a,b) => a-b);\n  return sorted[1];\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    var min = lst[0];\n    var min2 = lst[1];\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] < min2){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            secondMin = min;\n            min = lst[i];\n        } else if (lst[i] < secondMin && lst[i] !== min) {\n            secondMin = lst[i];\n        }\n    }\n    return secondMin;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let min = lst[0];\n    let min2 = lst[1];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] < min2 && lst[i] != min){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    var min = lst[0];\n    var min2 = lst[1];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] < min2 && lst[i] > min){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if (lst.length < 2) return undefined;\n    var min = Math.min(...lst);\n    var min2 = Math.min(...lst.filter(x => x > min));\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  let min = lst[0];\n  let secondMin = lst[1];\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      secondMin = min;\n      min = lst[i];\n    } else if(lst[i] < secondMin){\n      secondMin = lst[i];\n    }\n  }\n  return secondMin;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let min = lst[0];\n    let min2 = lst[1];\n    if(min2 < min){\n        let temp = min;\n        min = min2;\n        min2 = temp;\n    }\n    for(let i = 2; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] < min2 && lst[i] != min){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    let min = lst[0];\n    let min2 = lst[1];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] < min2 && lst[i] > min){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    var min = lst[0];\n    var next_min = lst[1];\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            next_min = min;\n            min = lst[i];\n        }\n        else if(lst[i] < next_min){\n            next_min = lst[i];\n        }\n    }\n    return next_min;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  var min = lst[0];\n  var secondMin = lst[1];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      secondMin = min;\n      min = lst[i];\n    }\n    else if(lst[i] < secondMin){\n      secondMin = lst[i];\n    }\n  }\n  return secondMin;\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    if(lst.length < 2){\n        return undefined;\n    }\n    var min = lst[0];\n    var min2 = lst[1];\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min2 = min;\n            min = lst[i];\n        }\n        else if(lst[i] < min2 && lst[i] != min){\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length < 2){\n    return undefined;\n  }\n  var sorted = lst.sort(function(a, b){return a - b;});\n  return sorted[1];\n}\n", "//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if (lst.length < 2) return undefined;\n  var min = Math.min.apply(null, lst);\n  var min_index = lst.indexOf(min);\n  var min_2 = Math.min.apply(null, lst.slice(min_index + 1));\n  var min_2_index = lst.indexOf(min_2);\n  return lst[min_2_index];\n}\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    var words = S.split(/[.?!]/);\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].indexOf(\"I\") === 0) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var words = S.split(/[.?!]/);\n  for(var i = 0; i < words.length; i++){\n    if(words[i].indexOf(\"I\") === 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  let sentences = S.split(/[.?!]/);\n  for(let i = 0; i < sentences.length; i++){\n    if(sentences[i].startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(x => x.startsWith('I')).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    return S.split(/[.?!]/).filter(x=>x.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(function(x){\n    return x.trim().startsWith(\"I\");\n  }).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var sentences = S.split(/[.?!]/);\n  for (var i = 0; i < sentences.length; i++) {\n    if (sentences[i].indexOf('I') === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(x=>x.startsWith('I')).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var words = S.split(/[.?!]/);\n  for(var i = 0; i < words.length; i++){\n    if(words[i].indexOf(\"I\") === 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var sentences = S.split(/[.?!]/);\n  for (var i = 0; i < sentences.length; i++) {\n    if (sentences[i].indexOf('I') === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.!?]/).filter(function(s){\n    return s.trim().startsWith('I');\n  }).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(x => x.startsWith(\"I\")).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let count = 0;\n    let words = S.split(/[.?!]/);\n    for(let i = 0; i < words.length; i++){\n        if(words[i].startsWith(\"I\")){\n            count++;\n        }\n    }\n    return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var sentences = S.split(/[.?!]/);\n  for(var i = 0; i < sentences.length; i++){\n    if(sentences[i].trim().startsWith(\"I\")){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  let words = S.split(/[.?!]/);\n  words.forEach(word => {\n    if (word.startsWith('I')) count++;\n  });\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(x => x.startsWith('I')).length\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(function(x){\n    return x.indexOf('I') === 0;\n  }).length;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var sentences = S.split(/[.?!]/);\n  for(var i = 0; i < sentences.length; i++){\n    if(sentences[i].indexOf(\"I \") == 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var words = S.split(/[.?!]/);\n  for (var i = 0; i < words.length; i++) {\n    if (words[i].trim().startsWith(\"I\")) {\n      count++;\n    }\n  }\n  return count;\n}\n", "//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  return S.split(/[.?!]/).filter(function(sentence){\n    return sentence.trim().startsWith('I');\n  }).length;\n}\n"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x === y + z || y === x + z || z === x + y) {\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number'){\n        if (x === y + z || x === z + y || x === y - z || x === z - y){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if (x === y + z || x === z + y || x === y - z || x === z - y) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){\n    if (x === y + z || y === x + z || z === x + y){\n      return true\n    }\n  }\n  return false\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x + y === z && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x + y === z && x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z)){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (x === y + z && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if (x === y + z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true;\n  }\n  return false;\n}\n"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n        if(vowels.indexOf(message[i]) > -1){\n            newMessage += message[i + 2];\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    for(let i = 0; i < message.length; i++){\n        if(vowels.includes(message[i])){\n            encoded += message[i + 2];\n        }\n        else{\n            encoded += message[i].toUpperCase();\n        }\n    }\n    return encoded;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encodedMessage = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(vowels.indexOf(letter) > -1){\n            var index = vowels.indexOf(letter);\n            encodedMessage += vowels[index + 2];\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n        if (message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        }\n        else{\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let newMessage2 = \"\";\n    for (let i = 0; i < newMessage.length; i++){\n        if (vowels.includes(newMessage[i])){\n            let index = vowels.indexOf(newMessage[i]);\n            let nextVowel = vowels[index + 2];\n            newMessage2 += nextVowel;\n        }\n        else{\n            newMessage2 += newMessage[i];\n        }\n    }\n    return newMessage2;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a','e','i','o','u'];\n    var encodedMessage = '';\n    for(var i = 0; i < message.length; i++){\n        if(vowels.indexOf(message[i]) > -1){\n            encodedMessage += message[i+2];\n        }\n        else{\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a','e','i','o','u'];\n    var result = '';\n    for(var i = 0; i < message.length; i++){\n        if(vowels.indexOf(message[i]) > -1){\n            result += message[i+2];\n        } else {\n            result += message[i].toUpperCase();\n        }\n    }\n    return result;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encodedMessage = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(vowels.indexOf(letter) > -1){\n            var index = vowels.indexOf(letter);\n            encodedMessage += vowels[index + 2];\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    for (let i = 0; i < message.length; i++) {\n        let letter = message[i];\n        if (vowels.includes(letter)) {\n            let index = vowels.indexOf(letter) + 2;\n            if (index > 4) {\n                index = index - 5;\n            }\n            encoded += vowels[index];\n        } else {\n            encoded += letter.toUpperCase();\n        }\n    }\n    return encoded;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encodedMessage = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(vowels.indexOf(letter) > -1){\n            var index = vowels.indexOf(letter) + 2;\n            encodedMessage += vowels[index % 5];\n        } else {\n            encodedMessage += letter;\n        }\n    }\n    return encodedMessage.toUpperCase();\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encodedMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        if (vowels.includes(message[i])) {\n            encodedMessage += message[i + 2];\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = \"aeiou\";\n    var encoded = \"\";\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(vowels.indexOf(letter) > -1){\n            var index = vowels.indexOf(letter) + 2;\n            if(index > 4){\n                index = index - 5;\n            }\n            encoded += vowels[index];\n        } else {\n            encoded += letter.toUpperCase();\n        }\n    }\n    return encoded;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var newMessage = '';\n    for (var i = 0; i < message.length; i++){\n        var char = message[i];\n        if (vowels.indexOf(char.toLowerCase()) > -1){\n            var index = vowels.indexOf(char.toLowerCase());\n            var newChar = vowels[(index + 2) % 5];\n            newMessage += newChar.toUpperCase();\n        } else {\n            newMessage += char.toUpperCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let i = 0; i < message.length; i++){\n        let char = message[i];\n        if(vowels.includes(char)){\n            let index = vowels.indexOf(char);\n            let newIndex = (index + 2) % 5;\n            newMessage += vowels[newIndex];\n        }\n        else{\n            newMessage += char.toUpperCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encodedMessage = '';\n    for (var i = 0; i < message.length; i++){\n        if (vowels.indexOf(message[i]) !== -1){\n            encodedMessage += message[i+2];\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encodedMessage = '';\n    for(var i = 0; i < message.length; i++){\n        if(vowels.indexOf(message[i]) > -1){\n            encodedMessage += message[i+2];\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(message[i] === \"a\" || message[i] === \"e\" || message[i] === \"i\" || message[i] === \"o\" || message[i] === \"u\"){\n            newMessage += message[i + 2];\n        }\n        else if(message[i] === \"A\" || message[i] === \"E\" || message[i] === \"I\" || message[i] === \"O\" || message[i] === \"U\"){\n            newMessage += message[i + 2].toUpperCase();\n        }\n        else if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n        }\n        else{\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        if(vowels.indexOf(letter) > -1){\n            var index = vowels.indexOf(letter) + 2;\n            if(index > 4){\n                index = index - 5;\n            }\n            newMessage += vowels[index];\n        }else{\n            newMessage += letter.toUpperCase();\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var encodedMessage = '';\n    for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n        var isVowel = vowels.indexOf(letter) !== -1;\n        if(isVowel){\n            var index = vowels.indexOf(letter);\n            var newLetter = vowels[(index + 2) % 5];\n            encodedMessage += newLetter;\n        } else {\n            encodedMessage += letter.toUpperCase();\n        }\n    }\n    return encodedMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] === message[i].toLowerCase()){\n            newMessage += message[i].toUpperCase();\n        } else {\n            newMessage += message[i].toLowerCase();\n        }\n    }\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = 0; i < newMessage.length; i++){\n        for(let j = 0; j < vowels.length; j++){\n            if(newMessage[i] === vowels[j]){\n                newMessage = newMessage.replace(newMessage[i], vowels[(j + 2) % 5]);\n            }\n        }\n    }\n    return newMessage;\n}\n", "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n        var char = message[i];\n        if(vowels.indexOf(char) > -1){\n            var index = vowels.indexOf(char) + 2;\n            if(index > 4){\n                index = index - 5;\n            }\n            newMessage += vowels[index];\n        } else {\n            newMessage += char.toUpperCase();\n        }\n    }\n    return newMessage;\n}\n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  for(var j = 0; j < String(max).length; j++){\n    sum += Number(String(max)[j", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  let sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 1", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  return sumDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let max = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return sumOfDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  var sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 10);\n  }\n ", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  for(let i = 0; i < String(max).length; i++){\n    sum += Number(String(max)[i", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  return sumOfDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  let sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 10);\n  }\n ", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < String(max).length; i++){\n    sum += Number(String(max)[i]);\n  }\n  return", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n  }\n  return sumDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return sumDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for(var i=0; i<lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return sumDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    var max = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(isPrime(lst[i]) && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return sumOfDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  let sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 10);\n  }\n ", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return sumDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  return sumDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  for(var i = 0; i < String(max).length; i++){\n    sum += Number(String(max)[i", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i]) && lst[i] > max){\n      max = lst[i];\n    }\n  }\n  return sumOfDigits(max);\n}\n", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    }\n  }\n  let sum = 0;\n  while (max > 0) {\n    sum += max % 10;\n    max = Math.floor(max", "//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])){\n      if(lst[i] > max){\n        max = lst[i];\n      }\n    }\n  }\n  var sum = 0;\n  while(max > 0){\n    sum += max % 10;\n    max = Math.floor(max / 1"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = true;\n  let upper = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      lower = false;\n    }\n    if(key.toUpperCase() !== key){\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lower = true;\n  let upper = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      lower = false;\n    }\n    if (key.toUpperCase() !== key) {\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = true;\n  let upper = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      lower = false;\n    }\n    if (key.toUpperCase() !== key) {\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      lowerCase = false;\n    }\n    if (key.toUpperCase() !== key) {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      lowerCase = false;\n    }\n    if (key.toUpperCase() !== key) {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    let lower = true;\n    let upper = true;\n    for (let key in dict){\n        if (key.toLowerCase() !== key){\n            lower = false;\n        }\n        if (key.toUpperCase() !== key){\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = true;\n  let upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (key !== key.toLowerCase()) {\n      lowerCase = false;\n    }\n    if (key !== key.toUpperCase()) {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  if(Object.keys(dict).length === 0){\n    return false;\n  }\n  let lowerCase = true;\n  let upperCase = true;\n  for(let key in dict){\n    if(key.toLowerCase() !== key){\n      lowerCase = false;\n    }\n    if(key.toUpperCase() !== key){\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    let lower = true;\n    let upper = true;\n    for (let key in dict){\n        if (key.toLowerCase() !== key){\n            lower = false;\n        }\n        if (key.toUpperCase() !== key){\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    let lower = true;\n    let upper = true;\n    for(let key in dict){\n        if(key.toLowerCase() !== key){\n            lower = false;\n        }\n        if(key.toUpperCase() !== key){\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    let lower = true;\n    let upper = true;\n    for(let key in dict){\n        if(key.toLowerCase() != key){\n            lower = false;\n        }\n        if(key.toUpperCase() != key){\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict) {\n        if (key !== key.toLowerCase()) {\n            lower = false;\n        }\n        if (key !== key.toUpperCase()) {\n            upper = false;\n        }\n    }\n    return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key in dict) {\n    if (key.toLowerCase() !== key) {\n      lowerCase = false;\n    }\n    if (key.toUpperCase() !== key) {\n      upperCase = false;\n    }\n  }\n  return lowerCase || upperCase;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = true;\n  let upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n", "//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let lower = true;\n  let upper = true;\n  for (let key in dict){\n    if (key.toLowerCase() !== key){\n      lower = false;\n    }\n    if (key.toUpperCase() !== key){\n      upper = false;\n    }\n  }\n  return lower || upper;\n}\n"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var result = [];\n    for(var i = 2; i < n; i++){\n        if(is_prime(i)){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let result = [];\n  for(let i = 2; i < n; i++){\n    if(is_prime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let result = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var result = [];\n    for(var i = 2; i < n; i++){\n        if(isPrime(i)){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var arr = [];\n    for(var i = 2; i < n; i++){\n        if(isPrime(i)){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var primes = [];\n  for(var i = 2; i < n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let arr = [];\n    for(let i = 2; i < n; i++){\n        if(isPrime(i)){\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var primes = [];\n  for(var i = 2; i < n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let result = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let result = [];\n  for(let i = 2; i < n; i++){\n    if(is_prime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let prime = [];\n  for(let i = 2; i < n; i++){\n    let count = 0;\n    for(let j = 2; j <= Math.sqrt(i); j++){\n      if(i % j === 0){\n        count++;\n        break;\n      }\n    }\n    if(count === 0 && i !== 1){\n      prime.push(i);\n    }\n  }\n  return prime;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(is_prime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let arr = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let primes = [];\n  for(let i = 2; i < n; i++){\n    if(isPrime(i)){\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i < n; i++){\n        if(is_prime(i)){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var prime = [];\n  for(var i = 2; i < n; i++){\n    if(isPrime(i)){\n      prime.push(i);\n    }\n  }\n  return prime;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let prime = [];\n  for(let i = 2; i < n; i++){\n    if(is_prime(i)){\n      prime.push(i);\n    }\n  }\n  return prime;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var result = [];\n  for(var i = 2; i < n; i++){\n    if(is_prime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var prime = [];\n  for(var i = 2; i < n; i++){\n    if(isPrime(i)){\n      prime.push(i);\n    }\n  }\n  return prime;\n}\n", "//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let result = [];\n  for (let i = 2; i < n; i++){\n    if (is_prime(i)){\n      result.push(i);\n    }\n  }\n  return result;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return (a % 10) * (b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n", "//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    return (a % 10) * (b % 10);\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i].toUpperCase() == s[i]){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    var vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && vowels.includes(s[i]) && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (i % 2 === 0 && s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0){\n            if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 && \"AEIOU\".includes(s[i].toUpperCase())){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i += 2){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n  var int = Math.round(num);\n  if (int - num > 0.5) {\n    return int - 1;\n  } else {\n    return int;\n  }\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(parseFloat(value));\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(parseFloat(value));\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n", "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  return Math.round(value);\n}\n"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    var arr = [];\n    for(var i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 == 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        } else {\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 2);\n        } else {\n            arr.push(n + 1);\n        }\n        n += 2;\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    var arr = [];\n    for(var i=0; i<n; i++){\n        if(n%2==0){\n            arr.push(n+1);\n            n+=2;\n        }\n        else{\n            arr.push(n+1);\n            n+=2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 == 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let arr = [];\n  for(let i = 0; i < n; i++){\n    if(n % 2 === 0){\n      arr.push(n + 2);\n    } else {\n      arr.push(n + 1);\n    }\n    n = arr[i];\n  }\n  return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n);\n            n += 1;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 == 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        } else {\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        } else {\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        } else {\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let arr = [];\n    for(let i = 0; i < n; i++){\n        if(n % 2 === 0){\n            arr.push(n + 1);\n            n += 2;\n        }\n        else{\n            arr.push(n + 1);\n            n += 2;\n        }\n    }\n    return arr;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/\\s|,/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[ ,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n", "//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/[\\s,]+/);\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if (x > y) {\n        return -1;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if (x > y) {\n        return -1;\n    }\n    if (x % 2 == 0) {\n        return x;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if (x > y) {\n        return -1;\n    }\n    if (x % 2 === 0) {\n        return x;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    if(x % 2 == 1 && y % 2 == 1){\n        return -1;\n    }\n    var i = x + 1;\n    while(i < y){\n        if(i % 2 == 0){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    else{\n        return choose_num(x+1, y);\n    }\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 === 0){\n        return x;\n    }\n    if(y % 2 === 0){\n        return y;\n    }\n    if(y - x === 1){\n        return -1;\n    }\n    return y - 1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x % 2 != 0){\n        x += 1;\n    }\n    if(y % 2 != 0){\n        y -= 1;\n    }\n    if(x > y){\n        return -1;\n    }\n    else{\n        return y;\n    }\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if (x > y) {\n        return -1;\n    }\n    if (x % 2 === 0) {\n        return x;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if (x > y) {\n        return -1;\n    }\n    if (x % 2 === 0) {\n        return x;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 === 0){\n        return x;\n    }\n    if(y % 2 === 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 === 0){\n        return x;\n    }\n    if(y % 2 === 0){\n        return y;\n    }\n    return -1;\n}\n", "//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    if(x > y){\n        return -1;\n    }\n    if(x % 2 == 0){\n        return x;\n    }\n    if(y % 2 == 0){\n        return y;\n    }\n    return -1;\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    var sum = 0;\n    for (var i = n; i <= m; i++) {\n        sum += i;\n    }\n    return sum / (m - n + 1).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if (n > m) {\n        return -1;\n    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m) return -1;\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  let sum = 0;\n  for(let i = n; i <= m; i++){\n    sum += i;\n  }\n  let avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    let avg = sum / (m - n + 1);\n    return \"0b\" + Math.round(avg).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n", "//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n > m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n    return (sum / (m - n + 1)).toString(2);\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n        var hasEvenDigit = false;\n        while(num > 0){\n            var digit = num % 10;\n            if(digit % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let hasEven = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                hasEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let hasEvenDigit = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n        var isEven = false;\n        while(num > 0){\n            if(num % 10 % 2 == 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().match(/[02468]/g) == null){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n        var isEven = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var hasEvenDigit = false;\n        var num = x[i];\n        while(num > 0){\n            if(num % 2 == 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let hasEvenDigit = false;\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!hasEvenDigit){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n                result.push(x[i]);\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i=0; i<x.length; i++){\n        var num = x[i];\n        var isEven = false;\n        while(num>0){\n            if(num%2==0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num/10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,b){return a-b;});\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 2 === 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  for(var i = 0; i < x.length; i++){\n    if(x[i].toString().match(/[02468]/g) === null){\n      result.push(x[i]);\n    }\n  }\n  return result.sort(function(a, b){\n    return a - b;\n  });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        while(num > 0){\n            if(num % 2 === 0){\n                num = 0;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(num === 0){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().match(/[02468]/g) === null){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i];\n        while(num > 0){\n            var digit = num % 10;\n            if(digit % 2 == 0){\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(num == 0){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n}\n", "//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num % 10 % 2 == 0){\n                isEven = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    for(let i = 0; i < result.length; i++){\n        switch(result[i]){\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    for(let i = 0; i < result.length; i++){\n        switch(result[i]){\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort(function(a, b){\n    return b - a;\n  });\n  for(var i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    result.sort(function(a, b){\n        return a - b;\n    });\n    result.reverse();\n    for(var i = 0; i < result.length; i++){\n        switch(result[i]){\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    result.sort(function(a, b){\n        return a - b;\n    });\n    result.reverse();\n    for(var i = 0; i < result.length; i++){\n        switch(result[i]){\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            newArr.push(arr[i]);\n        }\n    }\n    newArr.sort((a, b) => b - a);\n    for(let i = 0; i < newArr.length; i++){\n        switch(newArr[i]){\n            case 1:\n                newArr[i] = \"One\";\n                break;\n            case 2:\n                newArr[i] = \"Two\";\n                break;\n            case 3:\n                newArr[i] = \"Three\";\n                break;\n            case 4:\n                newArr[i] = \"Four\";\n                break;\n            case 5:\n                newArr[i] = \"Five\";\n                break;\n            case 6:\n                newArr[i] = \"Six\";\n                break;\n            case 7:\n                newArr[i] = \"Seven\";\n                break;\n            case 8:\n                newArr[i] = \"Eight\";\n                break;\n            case 9:\n                newArr[i] = \"Nine\";\n                break;\n        }\n    }", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => a - b);\n    result.reverse();\n    for(let i = 0; i < result.length; i++){\n        switch(result[i]){\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = 'One';\n        break;\n      case 2:\n        result[i] = 'Two';\n        break;\n      case 3:\n        result[i] = 'Three';\n        break;\n      case 4:\n        result[i] = 'Four';\n        break;\n      case 5:\n        result[i] = 'Five';\n        break;\n      case 6:\n        result[i] = 'Six';\n        break;\n      case 7:\n        result[i] = 'Seven';\n        break;\n      case 8:\n        result[i] = 'Eight';\n        break;\n      case 9:\n        result[i] = 'Nine';\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  let numbers = {\n    1: 'One',\n    2: 'Two',\n    3: 'Three',\n    4: 'Four',\n    5: 'Five',\n    6: 'Six',\n    7: 'Seven',\n    8: 'Eight',\n    9: 'Nine'\n  };\n  arr.forEach(function(item){\n    if(item >= 1 && item <= 9){\n      result.push(numbers[item]);\n    }\n  });\n  return result.reverse();\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for (let i = 0; i < result.length; i++){\n    switch (result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort(function(a, b){\n    return b - a;\n  });\n  for(var i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort(function(a, b){return a - b;});\n  result.reverse();\n  for(var i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let arr2 = arr.filter(x => x >= 1 && x <= 9).reverse();\n  let arr3 = arr2.map(x => {\n    switch (x) {\n      case 1:\n        return \"One\";\n      case 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n      case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\";\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"Nine\";\n      default:\n        return \"\";\n    }\n  });\n  return arr3;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let newArr = arr.filter(x => x >= 1 && x <= 9);\n  newArr.sort((a, b) => b - a);\n  newArr = newArr.map(x => {\n    switch(x){\n      case 1:\n        return 'One';\n      case 2:\n        return 'Two';\n      case 3:\n        return 'Three';\n      case 4:\n        return 'Four';\n      case 5:\n        return 'Five';\n      case 6:\n        return 'Six';\n      case 7:\n        return 'Seven';\n      case 8:\n        return 'Eight';\n      case 9:\n        return 'Nine';\n    }\n  });\n  return newArr;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    for(let i = 0; i < result.length; i++){\n        switch(result[i]){\n            case 1:\n                result[i] = \"One\";\n                break;\n            case 2:\n                result[i] = \"Two\";\n                break;\n            case 3:\n                result[i] = \"Three\";\n                break;\n            case 4:\n                result[i] = \"Four\";\n                break;\n            case 5:\n                result[i] = \"Five\";\n                break;\n            case 6:\n                result[i] = \"Six\";\n                break;\n            case 7:\n                result[i] = \"Seven\";\n                break;\n            case 8:\n                result[i] = \"Eight\";\n                break;\n            case 9:\n                result[i] = \"Nine\";\n                break;\n        }\n    }\n    return result;\n}\n", "//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let result = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[i]);\n    }\n  }\n  result.sort((a, b) => b - a);\n  for(let i = 0; i < result.length; i++){\n    switch(result[i]){\n      case 1:\n        result[i] = \"One\";\n        break;\n      case 2:\n        result[i] = \"Two\";\n        break;\n      case 3:\n        result[i] = \"Three\";\n        break;\n      case 4:\n        result[i] = \"Four\";\n        break;\n      case 5:\n        result[i] = \"Five\";\n        break;\n      case 6:\n        result[i] = \"Six\";\n        break;\n      case 7:\n        result[i] = \"Seven\";\n        break;\n      case 8:\n        result[i] = \"Eight\";\n        break;\n      case 9:\n        result[i] = \"Nine\";\n        break;\n    }\n  }\n  return result;\n}\n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }\n        else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        }\n        else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(factorial(i));\n    } else {\n      arr.push(sum(i));\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let fact = 1;\n            for(let j = 1; j <= i; j++){\n                fact *= j;\n            }\n            arr.push(fact);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let arr = [];\n  for(let i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(factorial(i));\n    } else {\n      arr.push(sum(i));\n    }\n  }\n  return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        } else {\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}\n", "//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(factorial(i));\n        } else {\n            arr.push(sum(i));\n        }\n    }\n    return arr;\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1; i<=n; i++){\n        if(is_palindrome(i)){\n            if(i%2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1;i<=n;i++){\n        if(isPalindrome(i)){\n            if(i%2==0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even,odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i=1; i<=n; i++){\n        if(isPalindrome(i)){\n            if(i%2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(is_palindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            }\n            else{\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n", "//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even = 0;\n    let odd = 0;\n    for(let i = 1; i <= n; i++){\n        if(isPalindrome(i)){\n            if(i % 2 === 0){\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n        else{\n            return arr.length - i;\n        }\n    }\n    return 0;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num < 0){\n      num = num * -1;\n    }\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n        var num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        if(num < 0){\n            num = -num;\n        }\n        let sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    var count = 0;\n    for (var i = 0; i < arr.length; i++){\n        var num = arr[i];\n        var sum = 0;\n        while (num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n        let sum = 0;\n        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  return arr.filter(x => {\n    let sum = 0;\n    let num = Math.abs(x);\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    return sum > 0;\n  }).length;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  var count = 0;\n  for(var i = 0; i < arr.length; i++){\n    var num = arr[i];\n    var sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  var sum = 0;\n  for(var i = 0; i < arr.length; i++){\n    var num = arr[i];\n    if(num < 0){\n      num = num * -1;\n    }\n    var num_str = num.toString();\n    for(var j = 0; j < num_str.length; j++){\n      sum += parseInt(num_str[j]);\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return arr.length;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  return arr.filter(x => x.toString().split('').reduce((a, b) => a + parseInt(b)) > 0).length;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  return arr.filter(function(num){\n    var sum = 0;\n    var numStr = num.toString();\n    for(var i = 0; i < numStr.length; i++){\n      sum += parseInt(numStr[i]);\n    }\n    return sum > 0;\n  }).length;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  return arr.filter(function(x){\n    return x.toString().split('').reduce(function(a, b){\n      return a + parseInt(b);\n    }, 0) > 0;\n  }).length;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  return arr.filter(function(num){\n    return num.toString().split('').reduce(function(a, b){\n      return a + parseInt(b);\n    }, 0) > 0;\n  }).length;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let sum = 0;\n    let num = arr[i];\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n", "//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    let num = arr[i];\n    let sum = 0;\n    while(num > 0){\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum > 0){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let count = 0;\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n        i++;\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    let i = 0;\n    let j = 1;\n    let k = 2;\n    while(j < arr.length){\n        if(arr[i] > arr[j]){\n            count++;\n            if(count > 1){\n                return false;\n            }\n            while(k < arr.length){\n                if(arr[j] > arr[k]){\n                    return false;\n                }\n                k++;\n            }\n        }\n        i++;\n        j++;\n        k++;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e =", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] > arr[j]){\n            count++;\n            if(count > 1){\n                return false;\n            }\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < j){\n        if(arr[i] > arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let count = 0;\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n        i++;\n    }\n    if(count == 1 || count == 0){\n        return true;\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0)\n        return true;\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(count > 1)\n                return false;\n        }\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let count = 0;\n    let i = 0;\n    let j = arr.length - 1;\n    while(i < arr.length){\n        if(arr[i] > arr[j]){\n            count++;\n        }\n        i++;\n        j--;\n    }\n    return count <= 1;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e =", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0)\n        return true;\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[i + 1]){\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0)\n        return true;\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > arr[i+1])\n            count++;\n    }\n    if(count == 1)\n        return true;\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[i+1]){\n            count++;\n        }\n        i++;\n    }\n    if(count == 1){\n        return true;\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[j]){\n            count++;\n        }\n        j++;\n        if(j == arr.length){\n            i++;\n            j = i;\n        }\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0) return true;\n    let count = 0;\n    let temp = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < temp){\n            count++;\n            if(count > 1) return false;\n        }\n        temp = arr[i];\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let flag = true;\n    while(i < arr.length){\n        if(arr[i] > arr[i+1]){\n            flag = false;\n            break;\n        }\n        i++;\n    }\n    if(flag){\n        return true;\n    }\n    while(j < arr.length){\n        if(arr[j] > arr[j+1]){\n            count++;\n        }\n        j++;\n    }\n    if(count == 1){\n        return true;\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let count = 0;\n    let sorted = true;\n    let i = 0;\n    while(sorted && i < arr.length){\n        if(arr[i] > arr[i + 1]){\n            count++;\n            if(count > 1){\n                sorted = false;\n            }\n        }\n        i++;\n    }\n    return sorted;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length === 0){\n        return true;\n    }\n    let count = 0;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            count++;\n        }\n    }\n    if(count === 0 || count === 1){\n        return true;\n    }\n    return false;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0){\n        return true;\n    }\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[i+1]){\n            count++;\n            j = i;\n            while(j < arr.length){\n                if(arr[j] < arr[j+1]){\n                    k = j;\n                }\n                j++;\n            }\n            if(count > 1){\n                return false;\n            }\n        }\n        i++;\n    }\n    return true;\n}\n", "//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    if(arr.length == 0)\n        return true;\n    let i = 0;\n    while(i < arr.length){\n        if(arr[i] > arr[i+1])\n            return false;\n        i++;\n    }\n    return true;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      count++;\n    }\n  }\n  if(count > lst2.length){\n    return \"NO\";\n  }\n  return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 1){\n      count++;\n    }\n  }\n  if(count > lst2.length){\n    return \"NO\";\n  }\n  return \"YES\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while(i < lst1.length && j < lst2.length){\n    if(lst1[i] % 2 === 0){\n      i++;\n    } else if(lst2[j] % 2 === 0){\n      lst1[i] = lst2[j];\n      i++;\n      j++;\n      count++;\n    } else {\n      j++;\n    }\n  }\n  if(count === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let even = 0;\n    let odd = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            odd++;\n        }\n        else{\n            even++;\n        }\n    }\n    if(even === lst1.length){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++){\n    if (lst1[i] % 2 !== 0){\n      for (let j = 0; j < lst2.length; j++){\n        if (lst2[j] % 2 === 0){\n          lst1[i] = lst2[j];\n          lst2[j] = lst1[i];\n          count++;\n          break;\n        }\n      }\n    }\n  }\n  if (count === lst1.length){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      for(let j = 0; j < lst2.length; j++){\n        if(lst2[j] % 2 === 0){\n          lst1[i] = lst2[j];\n          lst2[j] = lst1[i];\n          count++;\n          break;\n        }\n      }\n    }\n  }\n  if(count === lst1.length){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd--;\n    } else {\n      even--;\n    }\n  }\n  if(even >= 0 && odd >= 0){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      for(let j = 0; j < lst2.length; j++){\n        if(lst2[j] % 2 === 0){\n          lst1[i] = lst2[j];\n          lst2[j] = lst1[i];\n          count++;\n        }\n      }\n    }\n  }\n  if(count === lst1.length){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  if(even === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    let even = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even++;\n        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            count++;\n        }\n    }\n    if(count >= even){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    }\n    else{\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd++;\n    }\n    else{\n      even++;\n    }\n  }\n  if(even === lst1.length){\n    return \"YES\";\n  }\n  else{\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  // your code here\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++){\n    if (lst1[i] % 2 === 0){\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++){\n    if (lst2[i] % 2 === 0){\n      odd += 1;\n    } else {\n      even += 1;\n    }\n  }\n  if (even === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 !== 0){\n      for(let j = 0; j < lst2.length; j++){\n        if(lst2[j] % 2 === 0){\n          lst1[i] = lst2[j];\n          lst2[j] = lst1[i];\n          count++;\n          break;\n        }\n      }\n    }\n  }\n  if(count === lst1.length){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let count = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      count++;\n    }\n  }\n  if(count === lst1.length){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd--;\n    } else {\n      even--;\n    }\n  }\n  if(even >= 0 && odd >= 0){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst1.length; i++){\n    if (lst1[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++){\n    if (lst2[i] % 2 === 0){\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  if (even === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd++;\n    } else {\n      even++;\n    }\n  }\n  if(even === lst1.length){\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    }\n    else{\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd++;\n    }\n    else{\n      even++;\n    }\n  }\n  if(even === lst1.length){\n    return \"YES\";\n  }\n  else{\n    return \"NO\";\n  }\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 !== 0){\n            for(let j = 0; j < lst2.length; j++){\n                if(lst2[j] % 2 === 0){\n                    lst1[i] = lst2[j];\n                    lst2[j] = lst1[i];\n                    count++;\n                    break;\n                }\n            }\n        }\n    }\n    if(count === lst1.length){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 === 0){\n      even++;\n    }\n    else{\n      odd++;\n    }\n  }\n  for(let i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 === 0){\n      odd--;\n    }\n    else{\n      even--;\n    }\n  }\n  if(even < 0 || odd < 0){\n    return \"NO\";\n  }\n  else{\n    return \"YES\";\n  }\n}\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var obj = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]] === undefined){\n            obj[arr[i]] = 1;\n        }else{\n            obj[arr[i]] += 1;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(' ');\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1;\n    }else{\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var result = {};\n  var arr = test.split(' ');\n  for(var i = 0; i < arr.length; i++){\n    if(result[arr[i]]){\n      result[arr[i]]++;\n    }else{\n      result[arr[i]] = 1;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var obj = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]] === undefined){\n            obj[arr[i]] = 1;\n        }else{\n            obj[arr[i]]++;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var obj = {};\n  var arr = test.split(\" \");\n  for(var i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    } else {\n      obj[arr[i]] += 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let obj = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }\n        else{\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    }else{\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let obj = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }\n        else{\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    let arr = test.split(\" \");\n    let obj = {};\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]] === undefined){\n            obj[arr[i]] = 1;\n        } else {\n            obj[arr[i]] += 1;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let arr = test.split(\" \");\n  let obj = {};\n  let max = 0;\n  let maxKey = \"\";\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]] === undefined){\n      obj[arr[i]] = 1;\n    }else{\n      obj[arr[i]] += 1;\n    }\n    if(obj[arr[i]] > max){\n      max = obj[arr[i]];\n      maxKey = arr[i];\n    }\n  }\n  let result = {};\n  for(let key in obj){\n    if(obj[key] === max){\n      result[key] = max;\n    }\n  }\n  return result;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(' ');\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    }\n    else{\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var obj = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1;\n    } else {\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var obj = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n", "//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let obj = {};\n  let arr = test.split(\" \");\n  for(let i = 0; i < arr.length; i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    }else{\n      obj[arr[i]] = 1;\n    }\n  }\n  return obj;\n}\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('')\n  return [result, result === result.split('').reverse().join('')]\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(item => !c.includes(item)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('')\n  return [result, result === result.split('').reverse().join('')]\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(char => !c.includes(char)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let arr = s.split(\"\");\n  let arr2 = c.split(\"\");\n  for(let i = 0; i < arr.length; i++){\n    for(let j = 0; j < arr2.length; j++){\n      if(arr[i] === arr2[j]){\n        arr.splice(i, 1);\n        i--;\n      }\n    }\n  }\n  let str = arr.join(\"\");\n  let isPalindrome = str === str.split(\"\").reverse().join(\"\");\n  return [str, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('')\n  return [result, result === result.split('').reverse().join('')]\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let newS = s.split(\"\");\n  let newC = c.split(\"\");\n  let result = [];\n  for(let i = 0; i < newS.length; i++){\n    for(let j = 0; j < newC.length; j++){\n      if(newS[i] === newC[j]){\n        newS.splice(i, 1);\n        i--;\n      }\n    }\n  }\n  result.push(newS.join(\"\"));\n  result.push(isPalindrome(result[0]));\n  return result;\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split(\"\").filter(char => !c.includes(char)).join(\"\");\n  return [result, result === result.split(\"\").reverse().join(\"\")];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let newStr = s.split(\"\").filter(item => !c.includes(item)).join(\"\");\n  return [newStr, newStr === newStr.split(\"\").reverse().join(\"\")];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = s.split('').filter(x => !c.includes(x)).join('');\n    return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split(\"\").filter(x => !c.includes(x)).join(\"\");\n  return [result, result === result.split(\"\").reverse().join(\"\")];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let newStr = s.split(\"\").filter(x => !c.includes(x)).join(\"\");\n  return [newStr, newStr === newStr.split(\"\").reverse().join(\"\")];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let newStr = s.split(\"\").filter(char => !c.includes(char)).join(\"\");\n  let isPalindrome = newStr === newStr.split(\"\").reverse().join(\"\");\n  return [newStr, isPalindrome];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let newStr = s.split('').filter(x => !c.includes(x)).join('');\n  return [newStr, newStr === newStr.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(x => !c.includes(x)).join('')\n  return [result, result === result.split('').reverse().join('')]\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split('').filter(item => !c.includes(item)).join('');\n  return [result, result === result.split('').reverse().join('')];\n}\n", "//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = s.split(\"\").filter(x => !c.includes(x)).join(\"\");\n  return [result, result === result.split(\"\").reverse().join(\"\")];\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(lst[i][j] % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        var count = 0;\n        for(var j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 == 1){\n                count++;\n            }\n        }\n        result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n    }\n    return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(lst[i][j] % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 === 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(lst[i][j] % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(lst[i][j] % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(str){\n    return \"the number of odd elements \" + str.split(\"\").filter(function(x){\n      return x % 2 === 1;\n    }).length + \"n the str\" + str.split(\"\").filter(function(x){\n      return x % 2 === 1;\n    }).length + \"ng \" + str.split(\"\").filter(function(x){\n      return x % 2 === 1;\n    }).length + \" of the \" + str.split(\"\").filter(function(x){\n      return x % 2 === 1;\n    }).length + \"nput.\";\n  });\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + x.split(\"\").filter(function(x){\n      return parseInt(x) % 2 == 1\n    }).length + \"n the str\" + x.split(\"\").filter(function(x){\n      return parseInt(x) % 2 == 1\n    }).length + \"ng \" + x.split(\"\").filter(function(x){\n      return parseInt(x) % 2 == 1\n    }).length + \" of the \" + x.split(\"\").filter(function(x){\n      return parseInt(x) % 2 == 1\n    }).length + \"nput.\"\n  })\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + x.split(\"\").filter(function(y){\n      return y % 2 === 1\n    }).length + \"n the str\" + x.split(\"\").filter(function(y){\n      return y % 2 === 1\n    }).length + \"ng \" + x.split(\"\").filter(function(y){\n      return y % 2 === 1\n    }).length + \" of the \" + x.split(\"\").filter(function(y){\n      return y % 2 === 1\n    }).length + \"nput.\"\n  })\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i=0; i<lst.length; i++){\n    var count = 0;\n    for(var j=0; j<lst[i].length; j++){\n      if(lst[i][j] % 2 != 0){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  return lst.map(function(x){\n    return \"the number of odd elements \" + x.split(\"\").filter(function(x){\n      return x % 2 === 1\n    }).length + \"n the str\" + x.split(\"\").filter(function(x){\n      return x % 2 === 1\n    }).length + \"ng \" + x.split(\"\").filter(function(x){\n      return x % 2 === 1\n    }).length + \" of the \" + x.split(\"\").filter(function(x){\n      return x % 2 === 1\n    }).length + \"nput.\"\n  })\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 != 0){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 != 0){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i=0; i<lst.length; i++){\n    var count = 0;\n    for(var j=0; j<lst[i].length; j++){\n      if(lst[i][j] % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 == 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n", "//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    var count = 0;\n    for(var j = 0; j < lst[i].length; j++){\n      if(parseInt(lst[i][j]) % 2 === 1){\n        count++;\n      }\n    }\n    result.push(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n  }\n  return result;\n}\n"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n        if(sum > 0){\n            sum = 0;\n        }\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    min = Math.min(min, sum);\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    min = Math.min(min, sum);\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    min = Math.min(min, sum);\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    min = Math.min(min, sum);\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    min = Math.min(min, sum);\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    var sum = 0;\n    var min = Infinity;\n    for(var i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n    }\n    return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n    if(sum > 0){\n      sum = 0;\n    }\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = nums[0];\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n    min = Math.min(min, sum);\n  }\n  return min;\n}\n", "//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let min = nums[0];\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        min = Math.min(min, sum);\n    }\n    return min;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let total = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            total += grid[i][j];\n        }\n        count += Math.ceil(total / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_length = grid.length;\n    let col_length = grid[0].length;\n    let row_end = false;\n    let col_end = false;\n    while(row < row_length && col < col_length){\n        let row_capacity = 0;\n        let col_capacity = 0;\n        while(row < row_length && !row_end){\n            row_capacity += grid[row][col];\n            if(row_capacity >= capacity){\n                row_capacity = 0;\n                row_end = true;\n            }\n            row++;", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_count = grid.length;\n    let col_count = grid[0].length;\n    let row_end = row_count - 1;\n    let col_end = col_count - 1;\n    let row_dir = 1;\n    let col_dir = 1;\n    while (row >= 0 && row <= row_end && col >= 0 && col <= col_end){\n        let water = 0;\n        while (water < capacity && row >= 0 && row <= row_end){\n            water += grid[row][col];\n            row += row_dir;\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let total = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            total += grid[i][j];\n        }\n        count += Math.ceil(total / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    while(row < grid.length){\n        while(col < grid[row].length){\n            if(grid[row][col] == 1){\n                count += 1;\n                grid[row][col] = 0;\n                for(let i = row; i < row + capacity && i < grid.length; i++){\n                    for(let j = col; j < col + capacity && j < grid[row].length; j++){\n                        if(grid[i][j] == 1){\n                            grid[i][j] = 0;\n                            count += 1;\n                        }", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n        let total = 0;\n        for(let j = 0; j < row.length; j++){\n            if(row[j] == 1){\n                total += 1;\n            }\n        }\n        count += Math.ceil(total / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n        let sum = 0;\n        for(let j = 0; j < row.length; j++){\n            sum += row[j];\n        }\n        count += Math.ceil(sum / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_length = grid.length;\n    let col_length = grid[0].length;\n    let bucket = capacity;\n    let current_well = 0;\n    let current_row = 0;\n    let current_col = 0;\n    while(row < row_length){\n        while(col < col_length){\n            if(grid[row][col] == 1){\n                current_well = grid[row][col];\n                current_row = row;\n                current_col = col;\n                break;\n            }\n            col++;\n        }\n        if(current_well", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_count = 0;\n    let col_count = 0;\n    while (row < grid.length){\n        while (col < grid[row].length){\n            if (grid[row][col] == 1){\n                row_count += 1;\n                col_count += 1;\n            }\n            col += 1;\n        }\n        if (row_count > 0){\n            count += Math.ceil(row_count / capacity);\n        }\n        row_count = 0;\n        col = 0;\n        row += 1;\n    }\n    return", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for (let row of grid){\n        let total = 0;\n        for (let cell of row){\n            if (cell === 1){\n                total += 1;\n            }\n        }\n        count += Math.ceil(total / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let total = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            total += grid[i][j];\n        }\n        count += Math.ceil(total / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    while(row < grid.length){\n        let water = 0;\n        while(col < grid[row].length){\n            if(grid[row][col] == 1){\n                water += 1;\n            }\n            col += 1;\n        }\n        count += Math.ceil(water / capacity);\n        row += 1;\n        col = 0;\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_count = grid.length;\n    let col_count = grid[0].length;\n    while(row < row_count && col < col_count){\n        let water = 0;\n        while(water < capacity && row < row_count){\n            water += grid[row][col];\n            row += 1;\n        }\n        while(water > 0 && col < col_count){\n            water -= grid[row - 1][col];\n            col += 1;\n        }\n        count += 1;\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n        let sum = 0;\n        for(let j = 0; j < row.length; j++){\n            sum += row[j];\n        }\n        count += Math.ceil(sum / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_length = grid.length;\n    let col_length = grid[0].length;\n    let bucket = capacity;\n    let well_filled = false;\n\n    while(row < row_length && col < col_length){\n        while(col < col_length && bucket > 0){\n            if(grid[row][col] == 1){\n                bucket -= 1;\n            }\n            col += 1;\n        }\n        if(bucket == 0){\n            count += 1;\n            bucket = capacity;\n            well_filled = true;\n        }\n        if(well", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n        let sum = 0;\n        for(let j = 0; j < row.length; j++){\n            sum += row[j];\n        }\n        count += Math.ceil(sum / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    while(row < grid.length){\n        let water = 0;\n        while(col < grid[row].length){\n            if(grid[row][col] == 1){\n                water += 1;\n            }\n            col += 1;\n        }\n        count += Math.ceil(water/capacity);\n        col = 0;\n        row += 1;\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    for(let row of grid){\n        let row_count = 0;\n        for(let cell of row){\n            if(cell == 1){\n                row_count += 1;\n            }\n        }\n        count += Math.ceil(row_count / capacity);\n    }\n    return count;\n}\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_count = grid.length;\n    let col_count = grid[0].length;\n    let row_end = row_count - 1;\n    let col_end = col_count - 1;\n    while(row <= row_end && col <= col_end){\n        let water = 0;\n        while(water < capacity && row <= row_end){\n            water += grid[row][col];\n            row++;\n        }\n        while(water > 0 && col <= col_end){\n            water -= grid[row][col];\n            col++;\n        }\n        count++;\n", "//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let count = 0;\n    let row = 0;\n    let col = 0;\n    let row_len = grid.length;\n    let col_len = grid[0].length;\n    let row_end = false;\n    let col_end = false;\n    while(row < row_len && col < col_len){\n        if(grid[row][col] == 1){\n            let bucket = 0;\n            while(bucket < capacity && row < row_len && col < col_len){\n                bucket += grid[row][col];\n                col++;\n                if(col == col_len){\n                    col = 0;\n                    row++;\n                    if(row =="], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).split('1').length - 1;\n    let b_ones = b.toString(2).split('1').length - 1;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).match(/1/g).length;\n    let b_ones = b.toString(2).match(/1/g).length;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).match(/1/g).length;\n    let b_ones = b.toString(2).match(/1/g).length;\n    return a_ones === b_ones ? a - b : a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    if (a.toString(2).split('1').length === b.toString(2).split('1').length) {\n      return a - b;\n    }\n    return a.toString(2).split('1').length - b.toString(2).split('1').length;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).match(/1/g).length;\n    let b_ones = b.toString(2).match(/1/g).length;\n    return a_ones - b_ones || a - b;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=>{\n    let a_ones = a.toString(2).match(/1/g).length\n    let b_ones = b.toString(2).match(/1/g).length\n    if (a_ones === b_ones) {\n      return a - b\n    }\n    return a_ones - b_ones\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b) => {\n    let a1 = a.toString(2).split('').reduce((a,b) => a + (b === '1' ? 1 : 0), 0);\n    let b1 = b.toString(2).split('').reduce((a,b) => a + (b === '1' ? 1 : 0), 0);\n    return a1 === b1 ? a - b : a1 - b1;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    if (a.toString(2).split('1').length === b.toString(2).split('1').length) {\n      return a - b;\n    }\n    return a.toString(2).split('1').length - b.toString(2).split('1').length;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = (a.toString(2).match(/1/g) || []).length;\n    let b_ones = (b.toString(2).match(/1/g) || []).length;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=>{\n    let a_bin = a.toString(2)\n    let b_bin = b.toString(2)\n    let a_ones = a_bin.match(/1/g)\n    let b_ones = b_bin.match(/1/g)\n    if (a_ones.length === b_ones.length) {\n      return a - b\n    } else {\n      return a_ones.length - b_ones.length\n    }\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let aBin = a.toString(2);\n    let bBin = b.toString(2);\n    let aOnes = aBin.split('1').length - 1;\n    let bOnes = bBin.split('1').length - 1;\n    if (aOnes === bOnes) {\n      return a - b;\n    }\n    return aOnes - bOnes;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).match(/1/g).length;\n    let b_ones = b.toString(2).match(/1/g).length;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=>{\n    let a1 = a.toString(2).split('').filter(x=>x==='1').length\n    let b1 = b.toString(2).split('').filter(x=>x==='1').length\n    if (a1 === b1) {\n      return a - b\n    }\n    return a1 - b1\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).match(/1/g).length;\n    let b_ones = b.toString(2).match(/1/g).length;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).split('1').length - 1;\n    let b_ones = b.toString(2).split('1').length - 1;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a,b)=> {\n    let a1 = a.toString(2).match(/1/g)\n    let b1 = b.toString(2).match(/1/g)\n    if (a1 && b1) {\n      if (a1.length === b1.length) {\n        return a - b\n      }\n      return a1.length - b1.length\n    }\n    if (a1) {\n      return 1\n    }\n    if (b1) {\n      return -1\n    }\n    return a - b\n  })\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    if (a.toString(2).split('1').length === b.toString(2).split('1').length) {\n      return a - b;\n    }\n    return a.toString(2).split('1').length - b.toString(2).split('1').length;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    if (a.toString(2).split('1').length === b.toString(2).split('1').length) {\n      return a - b;\n    }\n    return a.toString(2).split('1').length - b.toString(2).split('1').length;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    const aOnes = a.toString(2).match(/1/g).length;\n    const bOnes = b.toString(2).match(/1/g).length;\n    return aOnes === bOnes ? a - b : aOnes - bOnes;\n  });\n}\n", "//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort((a, b) => {\n    let a_ones = a.toString(2).match(/1/g).length;\n    let b_ones = b.toString(2).match(/1/g).length;\n    if (a_ones === b_ones) {\n      return a - b;\n    }\n    return a_ones - b_ones;\n  });\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n        count++;\n      }\n    }\n    if(count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = s.split(' ');\n  let result = [];\n  for (let i = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++){\n      if (words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u'){\n        count++;\n      }\n    }\n    if (count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++){\n        let count = 0;\n        for (let j = 0; j < words[i].length; j++){\n            if (words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if (count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n        count++;\n      }\n    }\n    if(count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length; j++) {\n            if (words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u') {\n                count++;\n            }\n        }\n        if (count == n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length; i++){\n        let count = 0;\n        for (let j = 0; j < words[i].length; j++){\n            if (words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u'){\n                count++;\n            }\n        }\n        if (count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n        count++;\n      }\n    }\n    if(count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  var words = s.split(\" \");\n  var result = [];\n  for(var i = 0; i < words.length; i++){\n    if(count_consonants(words[i]) == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n        count++;\n      }\n    }\n    if(count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = s.split(\" \");\n  let result = [];\n  for(let i = 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length; j++){\n      if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n        count++;\n      }\n    }\n    if(count == n){\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(' ');\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != 'a' && words[i][j] != 'e' && words[i][j] != 'i' && words[i][j] != 'o' && words[i][j] != 'u'){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n", "//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = s.split(\" \");\n    let result = [];\n    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j = 0; j < words[i].length; j++){\n            if(words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j] != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\"){\n                count++;\n            }\n        }\n        if(count == n){\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowel = \"\";\n    for(var i=word.length-1; i>=0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var wordLength = word.length;\n    var vowel = \"\";\n    for(var i = wordLength - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) != -1){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var word_array = word.split('');\n    var word_length = word_array.length;\n    var result = '';\n    for(var i = word_length - 1; i >= 0; i--){\n        if(vowels.indexOf(word_array[i]) > -1 && i < word_length - 1 && i > 0){\n            if(vowels.indexOf(word_array[i + 1]) == -1 && vowels.indexOf(word_array[i - 1]) == -1){\n                result = word_array[i];\n                break;\n            }\n        }\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowel = \"\";\n    for(var i = word.length-1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    var vowels_index = [];\n    var consonants_index = [];\n    for (var i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i]) > -1) {\n            vowels_index.push(i);\n        } else {\n            consonants_index.push(i);\n        }\n    }\n    var vowels_index_length = vowels_index.length;\n    var consonants_index_length = consonants_index.length;\n    if (vowels_index_length === 0 || consonants_index_length === 0) {\n        return \"\";\n    }\n    var vowels_index_length = vowels_index.length;\n    var consonants_index_length = consonants_index.length;\n    if (vowels_index_length === 0 || consonants_index_length === 0) {\n        return \"\";\n    }\n    var vowels_index_length = vowels_index.length;\n    var consonants_index_length = consonants_index.length;\n    if (vowels_index_length === 0 || consonants_index_length === 0)", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    let word_array = word.split('')\n    let result = ''\n    for (let i = word_array.length - 1; i >= 0; i--) {\n        if (vowels.includes(word_array[i])) {\n            result = word_array[i]\n            break\n        }\n    }\n    return result\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = 'aeiouAEIOU'\n    let wordArray = word.split('')\n    let result = ''\n    for (let i = wordArray.length - 1; i >= 0; i--) {\n        if (vowels.includes(wordArray[i])) {\n            result = wordArray[i]\n            break\n        }\n    }\n    return result\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowels_index = [];\n    var consonants_index = [];\n    for(var i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i]) != -1){\n            vowels_index.push(i);\n        }else{\n            consonants_index.push(i);\n        }\n    }\n    var result = \"\";\n    for(var i = 0; i < consonants_index.length; i++){\n        if(vowels_index.length == 0){\n            break;\n        }\n        if(consonants_index[i] < vowels_index[0]){\n            continue;\n        }\n        result = word[vowels_index[0]];\n        break;\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowel = \"\";\n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var word = word.split(\"\");\n    var result = \"\";\n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) != -1){\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let vowel = '';\n    let word_length = word.length;\n    for(let i = word_length - 1; i >= 0; i--){\n        if(vowels.includes(word[i]) && i != word_length - 1 && i != 0){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  let vowel = ''\n  let i = word.length - 1\n  while(i >= 0){\n    if(vowels.includes(word[i])){\n      vowel = word[i]\n      break\n    }\n    i--\n  }\n  return vowel\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowel = \"\";\n    for(var i = word.length-1; i>=0; i--){\n        if(vowels.indexOf(word[i])>=0){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var word_length = word.length;\n    var vowel_index = -1;\n    var vowel_index_list = [];\n    for(var i = 0; i < word_length; i++){\n        if(vowels.indexOf(word[i]) != -1){\n            vowel_index_list.push(i);\n        }\n    }\n    for(var i = 0; i < vowel_index_list.length; i++){\n        if(vowel_index_list[i] != 0 && vowel_index_list[i] != word_length - 1){\n            vowel_index = vowel_index_list[i];\n            break;\n        }\n    }\n    return word[vowel_index];\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowels_index = [];\n    var consonants_index = [];\n    for(var i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i]) != -1){\n            vowels_index.push(i);\n        }\n        else{\n            consonants_index.push(i);\n        }\n    }\n    var result = \"\";\n    for(var i = 0; i < consonants_index.length; i++){\n        if(vowels_index.length == 0){\n            break;\n        }\n        if(consonants_index[i] < vowels_index[0]){\n            break;\n        }\n        if(consonants_index[i] > vowels_index[0]){\n            result = word[vowels_index[0]];\n            vowels_index.shift();\n        }\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = \"aeiouAEIOU\";\n    let vowels_index = [];\n    let consonants_index = [];\n    let vowels_index_from_right = [];\n    let consonants_index_from_right = [];\n    let vowels_from_right = [];\n    let consonants_from_right = [];\n    let vowels_from_right_index = [];\n    let consonants_from_right_index = [];\n    let vowels_from_right_index_from_right = [];\n    let consonants_from_right_index_from_right = [];\n    let vowels_from_right_from_right = [];\n    let consonants_from_right_from_right = [];\n    let vowels_from_right_index_from_right_from_right = [];\n    let consonants_from_right_index_from_right_from_right = [];\n    let vowels_from_right_from_right_from_right = [];\n    let consonants_from_right_from_right_from_right = [];\n    let vowels_from_right_index_from_right_from_right_from_right = [];\n    let consonants_from_right_index_from_right_from_right_from_right = [];\n    let vowels_from_right_from_right_from_right_", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let vowels_index = [];\n    let consonants_index = [];\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.includes(word[i])) {\n            vowels_index.push(i);\n        } else {\n            consonants_index.push(i);\n        }\n    }\n    let result = [];\n    for (let i = 0; i < vowels_index.length; i++) {\n        if (vowels_index[i] > consonants_index[consonants_index.length - 1]) {\n            result.push(vowels_index[i]);\n        }\n    }\n    if (result.length > 0) {\n        return word[result[result.length - 1]];\n    } else {\n        return '';\n    }\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowels_index = [];\n    var consonants_index = [];\n    var vowels_count = 0;\n    var consonants_count = 0;\n    for(var i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i]) != -1){\n            vowels_index.push(i);\n            vowels_count++;\n        }\n        else{\n            consonants_index.push(i);\n            consonants_count++;\n        }\n    }\n    if(vowels_count == 0 || consonants_count < 2){\n        return \"\";\n    }\n    else{\n        var vowels_index_reverse = vowels_index.reverse();\n        for(var i = 0; i < vowels_index_reverse.length; i++){\n            if(vowels_index_reverse[i] > consonants_index[0] && vowels_index_reverse[i] < consonants_index[1]){\n                return word[vowels_index_reverse[i]];\n            }\n        }\n        return \"\";\n    }\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var word = word.split(\"\");\n    var result = \"\";\n    for(var i = word.length-1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) >= 0){\n            if(i == 0 || i == word.length-1){\n                result = \"\";\n            }else{\n                result = word[i];\n            }\n            break;\n        }\n    }\n    return result;\n}\n", "//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = \"aeiouAEIOU\";\n    var vowel = \"\";\n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) != -1){\n            vowel = word[i];\n            break;\n        }\n    }\n    return vowel;\n}\n"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === '(') {\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if (open === close) {\n    return 'Yes';\n  }\n  return 'No';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    var a = lst[0];\n    var b = lst[1];\n    var c = a + b;\n    var open = 0;\n    var close = 0;\n    for (var i = 0; i < c.length; i++){\n        if (c[i] === \"(\"){\n            open++;\n        }\n        else if (c[i] === \")\"){\n            close++;\n        }\n    }\n    if (open === close){\n        return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] === '('){\n                open++;\n            }\n            else{\n                close++;\n            }\n        }\n    }\n    if(open === close){\n        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join(\"\");\n  let stack = [];\n  for (let i = 0; i < str.length; i++){\n    if (str[i] === \"(\"){\n      stack.push(str[i]);\n    } else {\n      if (stack.length === 0){\n        return \"No\";\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst[0] + lst[1];\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0) {\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  var str = lst[0] + lst[1];\n  var count = 0;\n  for (var i = 0; i < str.length; i++){\n    if (str[i] === '('){\n      count++;\n    } else {\n      count--;\n    }\n    if (count < 0){\n      return 'No';\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  return open === close ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === \"(\"){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if (open === close){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let open = 0;\n    let close = 0;\n    for (let i = 0; i < lst.length; i++){\n        for (let j = 0; j < lst[i].length; j++){\n            if (lst[i][j] === \"(\"){\n                open++;\n            } else {\n                close++;\n            }\n        }\n    }\n    if (open === close){\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst.join(\"\");\n  let count = 0;\n  for (let i = 0; i < str.length; i++){\n    if (str[i] === \"(\") count++;\n    else count--;\n    if (count < 0) return \"No\";\n  }\n  return count === 0 ? \"Yes\" : \"No\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst[0] + lst[1];\n  let open = 0;\n  for (let i = 0; i < str.length; i++){\n    if (str[i] === \"(\"){\n      open++;\n    } else {\n      open--;\n    }\n    if (open < 0){\n      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  let str = lst[0] + lst[1];\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === \"(\"){\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if(open === close){\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let left = 0;\n  let right = 0;\n  for (let i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === '('){\n        left++;\n      } else {\n        right++;\n      }\n    }\n  }\n  if (left === right){\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst[0] + lst[1]\n  let count = 0\n  for (let i = 0; i < str.length; i++){\n    if (str[i] === '('){\n      count++\n    } else {\n      count--\n    }\n    if (count < 0){\n      return 'No'\n    }\n  }\n  return count === 0 ? 'Yes' : 'No'\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === '('){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if (open === close){\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let str = lst[0] + lst[1]\n  let open = 0\n  for(let i = 0; i < str.length; i++){\n    if(str[i] === '('){\n      open++\n    } else {\n      open--\n    }\n    if(open < 0){\n      return 'No'\n    }\n  }\n  return open === 0 ? 'Yes' : 'No'\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === '('){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if (open === close){\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let count = 0;\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === '('){\n        count++;\n      }\n      else if(lst[i][j] === ')'){\n        count--;\n      }\n    }\n  }\n  return count === 0 ? 'Yes' : 'No';\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let open = 0;\n  let close = 0;\n  for (let i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === '('){\n        open++;\n      } else {\n        close++;\n      }\n    }\n  }\n  if (open === close){\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", "//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let left = 0;\n  let right = 0;\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j] === \"(\"){\n        left++;\n      }\n      if(lst[i][j] === \")\"){\n        right++;\n      }\n    }\n  }\n  if(left === right){\n    return \"Yes\";\n  }\n  return \"No\";\n}\n"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0) return [];\n    if(k === arr.length) return arr.sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(result.length < k){\n            result.push(arr[i]);\n            result.sort((a, b) => a - b);\n        }\n        else if(arr[i] > result[0]){\n            result.shift();\n            result.push(arr[i]);\n            result.sort((a, b) => a - b);\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => a - b);\n    return sortedArr.slice(sortedArr.length - k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0){\n        return [];\n    }\n    if(k === arr.length){\n        return arr.sort((a, b) => a - b);\n    }\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(result.length < k){\n            result.push(arr[i]);\n        }\n        else{\n            let min = result[0];\n            let minIndex = 0;\n            for(let j = 0; j < result.length; j++){\n                if(result[j] < min){\n                    min = result[j];\n                    minIndex = j;\n                }\n            }\n            if(arr[i] > min){\n                result[minIndex] = arr[i];\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a, b) => a - b);\n    return sortedArr.slice(sortedArr.length - k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = arr.slice(0);\n    max.sort((a, b) => b - a);\n    return max.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[0]){\n            result.shift();\n            result.push(arr[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k === 0) return [];\n  if(k === 1) return [Math.max(...arr)];\n  if(k === arr.length) return arr.sort((a, b) => a - b);\n  let max = Math.max(...arr);\n  let min = Math.min(...arr);\n  let result = [];\n  let i = 0;\n  while(i < k){\n    if(arr[i] === max){\n      result.push(max);\n      i++;\n    }\n    else if(arr[i] === min){\n      result.push(min);\n      i++;\n    }\n    else{\n      let index = arr.indexOf(max);\n      arr[index] = min;\n      result.push(max);\n      i++;\n    }\n  }\n  return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxHeap = [];\n    for(let i = 0; i < arr.length; i++){\n        if(maxHeap.length < k){\n            maxHeap.push(arr[i]);\n            maxHeapify(maxHeap, maxHeap.length - 1);\n        }\n        else if(arr[i] > maxHeap[0]){\n            maxHeap[0] = arr[i];\n            maxHeapify(maxHeap, 0);\n        }\n    }\n    return maxHeap;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = arr.slice(0);\n  max.sort((a, b) => b - a);\n  return max.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    let index = 0;\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[index]){\n            result[index] = arr[i];\n            index++;\n        }\n    }\n    return result.sort((a, b) => b - a);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0){\n        return [];\n    }\n    if(k === 1){\n        return [Math.max(...arr)];\n    }\n    if(k === arr.length){\n        return arr.sort((a, b) => b - a);\n    }\n    let max = Math.max(...arr);\n    let min = Math.min(...arr);\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(max);\n    }\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < max){\n            result.push(arr[i]);\n            result.sort((a, b) => b - a);\n            result.pop();\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    let n = arr.length;\n    let i = 0;\n    while(i < k){\n        let max = arr[0];\n        let maxIndex = 0;\n        for(let j = 1; j < n; j++){\n            if(arr[j] > max){\n                max = arr[j];\n                maxIndex = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n        n--;\n        i++;\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = arr.slice(0);\n    max.sort((a, b) => b - a);\n    return max.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr = arr.sort((a,b) => b - a);\n    return sortedArr.slice(0, k);\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if (k === 0) return [];\n  if (k === arr.length) return arr.sort((a, b) => b - a);\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.length < k) {\n      result.push(arr[i]);\n      result.sort((a, b) => b - a);\n    } else if (arr[i] > result[0]) {\n      result[0] = arr[i];\n      result.sort((a, b) => b - a);\n    }\n  }\n  return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    for(let i = k; i < arr.length; i++){\n        let min = Math.min(...result);\n        if(arr[i] > min){\n            result.splice(result.indexOf(min), 1, arr[i]);\n        }\n    }\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    let j = 0;\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[j]){\n            result[j] = arr[i];\n            j++;\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result;\n}\n", "//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result = [];\n    for(let i = 0; i < k; i++){\n        result.push(arr[i]);\n    }\n    result.sort((a, b) => b - a);\n    return result;\n}\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for (let i = 0; i < k; i++){\n        if (arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i].toString().length <= 2){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for (let i = 0; i < k; i++){\n        if (arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }\n        else if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var result = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 == 1){\n            result.push(n);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var arr = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }\n        else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 == 1){\n            arr.push(n);\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [];\n    let num = n;\n    while(num !== 1){\n        if(num % 2 === 0){\n            num = num / 2;\n        }else{\n            num = (num * 3) + 1;\n        }\n        if(num % 2 !== 0){\n            arr.push(num);\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var result = [];\n    var current = n;\n    while(current != 1){\n        if(current % 2 == 0){\n            current = current / 2;\n        }else{\n            current = 3 * current + 1;\n        }\n        if(current % 2 == 1){\n            result.push(current);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    let temp = n;\n    while(temp != 1){\n        if(temp % 2 != 0){\n            result.push(temp);\n            temp = (3 * temp) + 1;\n        }\n        else{\n            temp = temp / 2;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var result = [];\n    var current = n;\n    while(current > 1){\n        if(current % 2 == 0){\n            current = current / 2;\n        }else{\n            current = 3 * current + 1;\n        }\n        if(current % 2 == 1){\n            result.push(current);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var result = [];\n    var current = n;\n    while(current != 1){\n        if(current % 2 == 0){\n            current = current / 2;\n        }else{\n            current = current * 3 + 1;\n        }\n        if(current % 2 == 1){\n            result.push(current);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    let current = n;\n    while(current > 1){\n        if(current % 2 === 0){\n            current = current / 2;\n        }else{\n            current = current * 3 + 1;\n        }\n        if(current % 2 !== 0){\n            result.push(current);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var result = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 == 1){\n            result.push(n);\n        }\n    }\n    return result.sort();\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var odd_collatz = [1];\n    var collatz = [n];\n    while(n != 1){\n        if(n % 2 == 0){\n            n = n / 2;\n            collatz.push(n);\n        }else{\n            n = 3 * n + 1;\n            collatz.push(n);\n        }\n    }\n    for(var i = 0; i < collatz.length; i++){\n        if(collatz[i] % 2 != 0){\n            odd_collatz.push(collatz[i]);\n        }\n    }\n    return odd_collatz;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [];\n    let num = n;\n    while(num !== 1){\n        if(num % 2 !== 0){\n            arr.push(num);\n            num = 3 * num + 1;\n        }else{\n            num = num / 2;\n        }\n    }\n    arr.push(1);\n    return arr;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    let odd = n;\n    while(odd > 1){\n        if(odd % 2 == 1){\n            result.push(odd);\n            odd = odd * 3 + 1;\n        }\n        else{\n            odd = odd / 2;\n        }\n    }\n    result.push(1);\n    return result.sort((a, b) => a - b);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    let odd = n;\n    while(odd > 1){\n        if(odd % 2 === 0){\n            odd = odd / 2;\n        } else {\n            odd = 3 * odd + 1;\n        }\n        if(odd % 2 === 1){\n            result.push(odd);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [];\n    let num = n;\n    while(num != 1){\n        if(num % 2 == 0){\n            num = num / 2;\n        }else{\n            num = num * 3 + 1;\n        }\n        if(num % 2 == 1){\n            arr.push(num);\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var result = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 == 1){\n            result.push(n);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    let current = n;\n    while(current > 1){\n        if(current % 2 === 0){\n            current = current / 2;\n        }else{\n            current = (3 * current) + 1;\n        }\n        if(current % 2 === 1){\n            result.push(current);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let result = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }\n        else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 == 1){\n            result.push(n);\n        }\n    }\n    return result.sort();\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    let num = n;\n    while(num !== 1){\n        if(num % 2 === 0){\n            num = num / 2;\n        }else{\n            num = 3 * num + 1;\n        }\n        arr.push(num);\n    }\n    return arr.filter(x => x % 2 !== 0);\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var arr = [];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        if(n % 2 == 1){\n            arr.push(n);\n        }\n    }\n    return arr;\n}\n", "//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let arr = [n];\n    while(n > 1){\n        if(n % 2 == 0){\n            n = n / 2;\n        }else{\n            n = 3 * n + 1;\n        }\n        arr.push(n);\n    }\n    return arr.filter(x => x % 2 != 0).sort((a, b) => a - b);\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split('-');\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n    if(date_arr.length != 3 || month < 1 || month > 12 || day < 1 || day > 31 || year < 1){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n        return false;\n    }\n    if(month == 2 && day > ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"-\");\n    var month = parseInt(date_array[0]);\n    var day = parseInt(date_array[1]);\n    var year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day > 30){\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split(\"-\");\n  let month = date_array[0];\n  let day = date_array[1];\n  let year = date_array[2];\n  let valid_months = [1,3,5,7,8,10,12];\n  let valid_months_30 = [4,6,9,11];\n  let valid_months_29 = [2];\n  let valid_months_31 = [1,3,5,7,8,10,12];\n  let valid_days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split('-');\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length !== 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(year < 1900 || year > 2020){\n        return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n    }\n    if((month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    var date_array = date.split(\"-\");\n    var month = date_array[0];\n    var day = date_array[1];\n    var year = date_array[2];\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 ||", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(year < 1900 || year > 2020){\n        return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(year < 1000 || year > 9999){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_arr = date.split(\"-\");\n  let month = parseInt(date_arr[0]);\n  let day = parseInt(date_arr[1]);\n  let year = parseInt(date_arr[2]);\n  if(date_arr.length != 3){\n    return false;\n  }\n  if(month < 1 || month > 12){\n    return false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month == 2 && day > 29){\n    return false;\n  }\n  if(month == 4 || month == 6 || month == 9 || month == 11){\n    if(day > 30){\n      return false;\n    }\n  }\n  if(year < 1000 || year > 9999){", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3 || month > 12 || month < 1 || day < 1 || day > 31 || (month == 2 && day > 29) || (month == 2 && day < 1) || (month == 4 && day > 30) || (month == 4 && day < 1) || (month == 6 && day > 30) || (month == 6 && day < 1) || (month == 9 && day > 30) || (month == 9 && day < 1) || (month == 11 && day > 30) || (month == 11 &&", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 3", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split(\"-\");\n  let month = date_array[0];\n  let day = date_array[1];\n  let year = date_array[2];\n  if(date_array.length != 3){\n    return false;\n  }\n  if(month < 1 || month > 12){\n    return false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month == 2 && day > 29){\n    return false;\n  }\n  if(month == 4 || month == 6 || month == 9 || month == 11){\n    if(day > 30){\n      return false;\n    }\n  }\n  if(year.length != 4){\n    return false;\n  }\n  return true;\n}\n", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(date.length === 0){\n    return false;\n  }\n  let date_array = date.split(\"-\");\n  let month = parseInt(date_array[0]);\n  let day = parseInt(date_array[1]);\n  let year = parseInt(date_array[2]);\n  if(month < 1 || month > 12){\n    return false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month === 2){\n    if(day < 1 || day > 29){\n      return false;\n    }\n  }\n  if(month === 4 || month === 6 || month === 9 || month === 11){\n    if(day < 1 || day > 30){\n      return false;\n    }\n  }\n  if(month", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  let date_array = date.split('-');\n  let month = date_array[0];\n  let day = date_array[1];\n  let year = date_array[2];\n  if(date_array.length !== 3){\n    return false;\n  }\n  if(month.length !== 2 || day.length !== 2 || year.length !== 4){\n    return false;\n  }\n  if(month < 1 || month > 12){\n    return false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month === 2 && day > 29){\n    return false;\n  }\n  if(month === 4 || month === 6 || month === 9 || month === 11 && day > 30){\n    return false;\n  }\n  return", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    let is_valid = false;\n    if(date.length > 0){\n        if(month >= 1 && month <= 12){\n            if(month == 2){\n                if(day >= 1 && day <= 29){\n                    is_valid = true;\n                }\n            }\n            else if(month == 4 || month == 6 || month == 9 || month == 11){\n                if(day >= 1 && day <= 30){\n                    is_valid = true;\n                }\n            }\n            else{\n                if(day >= 1 && day <= 31){\n                    is_valid =", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"-\");\n    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n    let year = parseInt(date_arr[2]);\n    if(date_arr.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_arr = date.split(\"-\");\n    let month = date_arr[0];\n    let day = date_arr[1];\n    let year = date_arr[2];\n    if(date_arr.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && day > 31){\n        return false;\n    }\n    if((month == 4 || month == 6 || month == 9 ||", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split('-');\n    let month = date_array[0];\n    let day = date_array[1];\n    let year = date_array[2];\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month.length != 2 || day.length != 2 || year.length != 4){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return false;\n       ", "//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    let date_array = date.split(\"-\");\n    let month = parseInt(date_array[0]);\n    let day = parseInt(date_array[1]);\n    let year = parseInt(date_array[2]);\n    if(date_array.length != 3){\n        return false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11 && day > 30){\n        return false;\n    }\n    return true;\n}\n"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s/);\n  }\n  else if (txt.match(/\\,/)) {\n    return txt.split(/\\,/);\n  }\n  else {\n    return txt.split('').filter(function(x){\n      return x.match(/[a-z]/);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s/);\n  } else if (txt.match(/\\,/)) {\n    return txt.split(/\\,/);\n  } else {\n    return txt.split('').filter(function(x) {\n      return x.match(/[a-z]/);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s/);\n  } else if (txt.match(/\\,/)) {\n    return txt.split(/\\,/);\n  } else {\n    return txt.split('').filter(function(x){\n      return x.match(/[a-z]/);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(\" \") > -1) {\n    return txt.split(\" \");\n  } else if (txt.indexOf(\",\") > -1) {\n    return txt.split(\",\");\n  } else {\n    var count = 0;\n    for (var i = 0; i < txt.length; i++) {\n      if (txt.charCodeAt(i) % 2 === 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(\" \") > -1) return txt.split(\" \");\n  if (txt.indexOf(\",\") > -1) return txt.split(\",\");\n  return txt.split(\"\").filter(function(x){\n    return x.match(/[a-z]/i);\n  }).length % 2;\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') >= 0) {\n    return txt.split(' ');\n  } else if (txt.indexOf(',') >= 0) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(x) {\n      return x.match(/[a-z]/);\n    }).length % 2;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s+/);\n  } else if (txt.match(/,/)) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(c){\n      return c.match(/[a-z]/);\n    }).length % 2;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s/);\n  }\n  else if (txt.match(/\\,/)) {\n    return txt.split(/\\,/);\n  }\n  else {\n    return txt.split('').filter(function(x){\n      return x.match(/[a-z]/);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s+/);\n  }\n  if (txt.match(/,/)) {\n    return txt.split(/,/);\n  }\n  return txt.split('').filter(function(c){\n    return c.match(/[a-z]/i);\n  }).length % 2;\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) return txt.split(/\\s/);\n  if (txt.match(/\\,/)) return txt.split(/\\,/);\n  return txt.split('').filter(function(c){\n    return c.match(/[a-z]/);\n  }).length;\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) return txt.split(/\\s+/);\n  if (txt.match(/,/)) return txt.split(/,/);\n  return txt.split('').filter(function(x){return x.match(/[a-z]/i)}).length % 2;\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/g)) {\n    return txt.split(/\\s/g);\n  } else if (txt.match(/\\,/g)) {\n    return txt.split(/\\,/g);\n  } else {\n    return txt.split('').filter(function(c){\n      return c.match(/[a-z]/i);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(\" \") > -1) {\n    return txt.split(\" \");\n  } else if (txt.indexOf(\",\") > -1) {\n    return txt.split(\",\");\n  } else {\n    return txt.split(\"\").filter(function(x) {\n      return x.toLowerCase() === x;\n    }).length % 2;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) {\n    return txt.split(/\\s+/);\n  } else if (txt.match(/,/)) {\n    return txt.split(/,/);\n  } else {\n    return txt.split('').filter(function(x) {\n      return x.match(/[a-z]/);\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(\" \") > -1) {\n    return txt.split(\" \");\n  } else if (txt.indexOf(\",\") > -1) {\n    return txt.split(\",\");\n  } else {\n    return txt.split(\"\").filter(function(x){\n      return x.match(/[a-z]/);\n    }).length % 2;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) return txt.split(/\\s/);\n  if (txt.match(/\\,/)) return txt.split(/\\,/);\n  return txt.split('').filter(function(x){\n    return x.match(/[a-z]/);\n  }).length;\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.match(/\\s/)) return txt.split(/\\s/);\n  if (txt.match(/\\,/)) return txt.split(/\\,/);\n  return txt.split('').filter(function(x){\n    return x.match(/[a-z]/i);\n  }).length % 2;\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') > -1) {\n    return txt.split(' ');\n  } else if (txt.indexOf(',') > -1) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(c){\n      return c.toLowerCase() === c;\n    }).length;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') > -1) {\n    return txt.split(' ');\n  } else if (txt.indexOf(',') > -1) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(x){\n      return x.toLowerCase()\n    }).length % 2;\n  }\n}\n", "//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  if (txt.indexOf(' ') > -1) {\n    return txt.split(' ');\n  } else if (txt.indexOf(',') > -1) {\n    return txt.split(',');\n  } else {\n    return txt.split('').filter(function(x){\n      return x.toLowerCase()\n    }).length % 2;\n  }\n}\n"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var count = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == lst[i+1]){\n      count++;\n    }\n  }\n  if(count > 1){\n    return false;\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n        if(lst[i] === lst[i + 1]){\n            count++;\n            if(count > 1){\n                return false;\n            }\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let sorted = true;\n  for(let i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if(lst.length === 1){\n        return true;\n    }\n    for(var i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n   ", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var count = 0;\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n    if(lst[i] == lst[i + 1]){\n      count++;\n    }\n  }\n  if(count > 1){\n    return false;\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n   ", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var i = 0;\n  var j = 1;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var j = 1;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n ", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var count = 0;\n  var last = lst[0];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < last){\n      return false;\n    }\n    if(lst[i] == last){\n      count++;\n    }\n    last = lst[i];\n  }\n  return count < 2;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var count = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < lst[i + 1]){\n      count++;\n    }\n  }\n  if(count === lst.length - 1){\n    return true;\n  }\n  return false;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var i = 0;\n  var j = 0;\n  var count = 0;\n  var count2 = 0;\n  var count3 = 0;\n  var count4 = 0;\n  var count5 = 0;\n  var count6 = 0;\n  var count7 = 0;\n  var count8 = 0;\n  var count9 = 0;\n  var count10 = 0;\n  var count11 = 0;\n  var count12 = 0;\n  var count13 = 0;\n  var count14 = 0;\n  var count15 = 0;\n  var count16 = 0;\n  var count17 = 0;\n  var count18 = 0;\n  var count19 = 0;\n  var count20 = 0;\n  var count21 = 0;\n  var count22 = 0;\n  var count23 = 0;\n  var count24 = 0;\n  var count", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n   ", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var count = 0;\n  for(var i = 0; i < lst.length - 1; i++){\n    if(lst[i] > lst[i + 1]){\n      return false;\n    }\n    if(lst[i] === lst[i + 1]){\n      count++;\n    }\n  }\n  if(count > 1){\n    return false;\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    if(lst.length < 2){\n        return true;\n    }\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < lst[i-1]){\n            return false;\n        }\n    }\n    return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let sorted = true;\n  let last = lst[0];\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < last){\n      sorted = false;\n      break;\n    }\n    last = lst[i];\n  }\n  return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var sorted = true;\n  var last = lst[0];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < last){\n      sorted = false;\n      break;\n    }\n    if(lst[i] === last){\n      sorted = false;\n      break;\n    }\n    last = lst[i];\n  }\n  return sorted;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  if (lst.length < 2) return true;\n  var prev = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) return false;\n    if (lst[i] === prev) return false;\n    prev = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var last = lst[0];\n  for(var i=1; i<lst.length; i++){\n    if(lst[i] < last){\n      return false;\n    }\n    if(lst[i] === last){\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var last = lst[0];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < last){\n      return false;\n    }\n    if(lst[i] === last){\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n", "//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    var count = 0;\n    for(var i=0; i<lst.length-1; i++){\n        if(lst[i] > lst[i+1]){\n            return false;\n        }\n        if(lst[i] == lst[i+1]){\n            count++;\n        }\n    }\n    if(count > 1){\n        return false;\n    }\n    return true;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  var start1 = interval1[0];\n  var end1 = interval1[1];\n  var start2 = interval2[0];\n  var end2 = interval2[1];\n  if (start1 > end1 || start2 > end2) return \"NO\";\n  if (start1 > start2) {\n    if (end1 < end2) {\n      return isPrime(end1 - start2) ? \"YES\" : \"NO\";\n    } else {\n      return isPrime(end2 - start2) ? \"YES\" : \"NO\";\n    }\n  } else {\n    if (end2 < end1) {\n      return isPrime(end2 - start1) ? \"YES\" : \"NO\";\n    } else {\n      return isPrime(end1 - start1) ? \"YES\" : \"NO\";\n    }\n  }\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1])\n    return \"NO\";\n  if (interval1[0] > interval2[1] || interval2[0] > interval1[1])\n    return \"NO\";\n  var intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n  if (intersection[1] - intersection[0] == 1)\n    return \"NO\";\n  if (intersection[1] - intersection[0] == 2)\n    return \"YES\";\n  var isPrime = true;\n  for (var i = 2; i < intersection[1] - intersection[0]; i++)\n    if ((intersection[1] - intersection[0]) % i == 0)\n      isPrime = false;\n  return isPrime ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0])\n    return \"NO\";\n  var start = Math.max(interval1[0], interval2[0]);\n  var end = Math.min(interval1[1], interval2[1]);\n  var length = end - start + 1;\n  if (isPrime(length))\n    return \"YES\";\n  else\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  var start = Math.max(interval1[0], interval2[0]);\n  var end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    var length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1])\n    return \"NO\";\n  var start = Math.max(interval1[0], interval2[0]);\n  var end = Math.min(interval1[1], interval2[1]);\n  if (start > end)\n    return \"NO\";\n  var length = end - start + 1;\n  if (isPrime(length))\n    return \"YES\";\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        let length = end - start + 1;\n        let isPrime = true;\n        for (let i = 2; i < length; i++) {\n            if (length % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        return isPrime ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var start = Math.max(interval1[0], interval2[0]);\n    var end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        var length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  var start1 = interval1[0];\n  var end1 = interval1[1];\n  var start2 = interval2[0];\n  var end2 = interval2[1];\n  if (start1 > end1 || start2 > end2)\n    return \"NO\";\n  if (start1 > start2)\n    start1 = start2;\n  if (end1 < end2)\n    end1 = end2;\n  if (start1 > end1)\n    return \"NO\";\n  var length = end1 - start1;\n  if (isPrime(length))\n    return \"YES\";\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (end < start) return \"NO\";\n  let length = end - start + 1;\n  if (isPrime(length)) return \"YES\";\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        let length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0])\n    return \"NO\";\n  var intersection = [Math.max(interval1[0], interval2[0]), Math.min(interval1[1], interval2[1])];\n  return isPrime(intersection[1] - intersection[0]) ? \"YES\" : \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        let length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  var start1 = interval1[0];\n  var end1 = interval1[1];\n  var start2 = interval2[0];\n  var end2 = interval2[1];\n  var intersectionStart = Math.max(start1, start2);\n  var intersectionEnd = Math.min(end1, end2);\n  if (intersectionStart <= intersectionEnd) {\n    var intersectionLength = intersectionEnd - intersectionStart + 1;\n    if (isPrime(intersectionLength)) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    return isPrime(length) ? \"YES\" : \"NO\";\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  var start = Math.max(interval1[0], interval2[0]);\n  var end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    var length = end - start + 1;\n    return isPrime(length) ? \"YES\" : \"NO\";\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end){\n        let length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n\n    let intersectionStart = Math.max(start1, start2);\n    let intersectionEnd = Math.min(end1, end2);\n\n    if (intersectionStart <= intersectionEnd) {\n        let intersectionLength = intersectionEnd - intersectionStart + 1;\n        return isPrime(intersectionLength) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = Math.max(interval1[0], interval2[0]);\n  let end = Math.min(interval1[1], interval2[1]);\n  if (start <= end) {\n    let length = end - start + 1;\n    if (isPrime(length)) {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    if (start <= end) {\n        let length = end - start + 1;\n        return isPrime(length) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}\n"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let prod = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod *= -1;\n        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) return undefined;\n    let sign = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            sign *= -1;\n            sum += Math.abs(arr[i]);\n        } else if (arr[i] > 0) {\n            sign *= 1;\n            sum += arr[i];\n        }\n    }\n    return sign * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length == 0) return undefined;\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n            sum += Math.abs(arr[i]);\n        } else if (arr[i] > 0) {\n            product *= 1;\n            sum += arr[i];\n        } else {\n            product *= 0;\n            sum += 0;\n        }\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n        } else if (arr[i] > 0) {\n            product *= 1;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n            sum += Math.abs(arr[i]);\n        } else if (arr[i] < 0) {\n            product *= -1;\n            sum += Math.abs(arr[i]);\n        } else {\n            product *= 0;\n            sum += 0;\n        }\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length == 0) return undefined;\n    let sum = 0;\n    let sign = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            sign *= -1;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * sign;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length == 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += Math.abs(arr[i]);\n        }\n        else if (arr[i] < 0) {\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n        }\n        else {\n            prod *= 0;\n            sum += 0;\n        }\n    }\n    return prod * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let signs = arr.reduce((acc, val) => {\n        if(val > 0) acc += 1;\n        if(val < 0) acc -= 1;\n        return acc;\n    }, 0);\n    let magnitudes = arr.reduce((acc, val) => acc + Math.abs(val), 0);\n    return magnitudes * Math.pow(signs, arr.length);\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let result = 1;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0) sign = -1;\n        result *= Math.abs(arr[i]);\n    }\n    return result * sign;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let result = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            result *= 1;\n            sum += Math.abs(arr[i]);\n        }\n        else if(arr[i] < 0){\n            result *= -1;\n            sum += Math.abs(arr[i]);\n        }\n        else{\n            result *= 0;\n            sum += 0;\n        }\n    }\n    return result * sum;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) return undefined;\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod *= 1;\n      sum += arr[i];\n    } else if (arr[i] < 0) {\n      prod *= -1;\n      sum += Math.abs(arr[i]);\n    } else {\n      prod *= 0;\n      sum += 0;\n    }\n  }\n  return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0){\n        return undefined;\n    }\n    let product = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            product *= -1;\n        }\n        else if(arr[i] > 0){\n            product *= 1;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let sign = 1;\n    let product = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n            sign = -1;\n        }\n        product *= sign;\n    }\n    return arr.reduce((a, b) => a + Math.abs(b)) * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  if (arr.length === 0) {\n    return undefined;\n  }\n  let prod = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod *= -1;\n    } else if (arr[i] > 0) {\n      prod *= 1;\n    } else {\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n  return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) return undefined;\n    let signs = arr.map(x => x < 0 ? -1 : x > 0 ? 1 : 0);\n    let product = signs.reduce((a, b) => a * b);\n    let sum = arr.reduce((a, b) => a + Math.abs(b));\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let result = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            result *= -1;\n        }\n    }\n    return result * arr.reduce((a, b) => Math.abs(a) + Math.abs(b));\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) return undefined;\n    let prod = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            prod *= 1;\n            sum += Math.abs(arr[i]);\n        } else if (arr[i] < 0) {\n            prod *= -1;\n            sum += Math.abs(arr[i]);\n        } else {\n            prod *= 0;\n            sum += Math.abs(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n            product *= -1;\n        }\n    }\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n", "//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    if(arr.length === 0) return undefined;\n    let product = 1;\n    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0) product *= 1;\n        if(arr[i] < 0) product *= -1;\n        if(arr[i] === 0) product *= 0;\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n    let visited = [];\n    let current = 0;\n    let currentRow = 0;\n    let currentCol = 0;\n    let currentValue = grid[currentRow][currentCol];\n    let visitedCount = 0;\n    let visited", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let minPath = [];\n    let minPathLength = Infinity;\n\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let min = 1;\n    let max = n * n;\n    let result = [];\n    let visited = [];\n    let queue = [];\n    let current = grid[0][0];\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let next = 0", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    // Write your code here\n    let n = grid.length;\n    let m = grid[0].length;\n    let dp = new Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(m);\n    }\n    for(let i = 0; i < n; i++){", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = [];\n    let current = 0;\n    let currentRow = 0;\n    let currentCol = 0;\n    let currentValue = grid[0][0];\n    let nextValue = 0;\n    let nextRow = 0;\n    let nextCol = 0", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let minPath = [];\n    let visited = [];\n    let current = 0;\n    let currentRow = 0;\n    let currentCol = 0;\n    let nextRow = 0;\n    let nextCol = 0;\n    let next = 0;\n    let nextVisited = [];\n    let nextPath = [];\n    let nextPathLength", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  //your code here\n  let minPath = [];\n  let start = [0, 0];\n  let end = [grid.length - 1, grid.length - 1];\n  let visited = [];\n  let queue = [];\n  let count = 0;\n  let path = [];\n  let current = start;\n  let next = [];\n  let", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    //your code here\n}\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = [];\n    let min = 1;\n    let max = n * n;\n    let current = 1;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    let path = [];\n    let visitedPath = [];\n   ", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // your code here\n  let n = grid.length;\n  let minPath = [];\n  let visited = new Set();\n  let minPathLength = n * n;\n  let minPathSet = new Set();\n  let minPathSetLength = 0;\n  let minPathSetList = [];\n  let path = [];\n  let pathLength = 0;", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = [];\n    let current = 0;\n    let currentRow = 0;\n    let currentCol = 0;\n    let nextRow = 0;\n    let nextCol = 0;\n    let next = 0;\n    let nextVisited = [];\n    let next", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    // Write your code here\n    let n = grid.length;\n    let minPath = [];\n    let visited = new Set();\n    let min = Number.MAX_SAFE_INTEGER;\n    let minPathLength = Number.MAX_SAFE_INTEGER;\n    let start = 0;\n    for(let i = 0; i", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = [];\n    let path = [];\n    let min = Infinity;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    // Write your code here\n    let n = grid.length;\n    let minPath = [];\n    let visited = new Set();\n    let min = Infinity;\n    let minPathLength = Infinity;\n    let pathLength = 0;\n    let path = [];\n    let x = 0;\n    let y = 0;\n    let next", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  // Write your code here\n  let n = grid.length;\n  let minPath = [];\n  let visited = new Set();\n  let min = 1;\n  let max = n * n;\n  let current = 1;\n  let currentRow = 0;\n  let currentCol = 0;\n  let nextRow = 0;\n  let", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    // Write your code here\n    let n = grid.length;\n    let minPath = [];\n    let visited = new Set();\n    let min = Infinity;\n    let minPathLength = Infinity;\n    let pathLength = 0;\n    let path = [];\n    let x = 0;\n    let y = 0;\n    let dx", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = [];\n    let min = Infinity;\n    let path = [];\n    let x = 0;\n    let y = 0;\n\n    for(let i = 0; i < n; i++){\n        visited.push(new Array(n).fill(false));\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let min = Infinity;\n    let minPathLength = Infinity;\n    let pathLength = 0;\n    let path = [];\n    let x = 0;\n", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let visited = new Array(n).fill(0).map(x => new Array(n).fill(0));\n    let min = 10000000000000000000000000000000000000000000", "//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let n = grid.length;\n    let minPath = [];\n    let visited = new Set();\n    let min = Infinity;\n    let minPathLength = Infinity;\n    let start = 0;\n    let end = n - 1;\n    let row = 0;\n    let col = 0;\n    let path = [];\n   "], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + arr[i] / 2);\n        }\n        else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + (i / 2));\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3, 2];\n  for (let i = 3; i < n; i++){\n    if (i % 2 === 0){\n      arr.push(1 + (i / 2));\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3, 2];\n  for(let i = 3; i < n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + (i / 2));\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for(let i = 2; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i < n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for (let i = 3; i <= n; i++){\n        if (i % 2 === 0){\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3, 2];\n  for(let i = 3; i <= n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3];\n  for(let i = 2; i < n; i++){\n    if(i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [1, 3, 2];\n  for (let i = 3; i < n; i++){\n    if (i % 2 === 0){\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3, 2];\n    for(let i = 3; i < n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [1, 3];\n    for(var i = 2; i < n; i++){\n        if(i % 2 === 0){\n            result.push(1 + i / 2);\n        } else {\n            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [1, 3];\n    for (let i = 2; i < n; i++) {\n        if (i % 2 === 0) {\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var odd = 1;\n    var num = n;\n    while(num > 0){\n        var digit = num % 10;\n        if(digit % 2 != 0){\n            odd *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var result = 1;\n    var str = n.toString();\n    for(var i = 0; i < str.length; i++){\n        if(str[i] % 2 == 1){\n            result *= str[i];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let str = n.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            product *= str[i];\n        }\n    }\n    return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var product = 1;\n    var string = n.toString();\n    for(var i = 0; i < string.length; i++){\n        if(string[i] % 2 != 0){\n            product *= string[i];\n        }\n    }\n    return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    let num = n;\n    while(num > 0){\n        let digit = num % 10;\n        if(digit % 2 !== 0){\n            odd *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    let str = n.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 != 0){\n            odd *= str[i];\n        }\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let result = 1;\n    let str = n.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 != 0){\n            result *= str[i];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var product = 1;\n    var str = n.toString();\n    for(var i = 0; i < str.length; i++){\n        if(str[i] % 2 != 0){\n            product *= str[i];\n        }\n    }\n    return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    let even = 1;\n    let num = n;\n    while(num > 0){\n        if(num % 2 === 0){\n            even *= num;\n        } else {\n            odd *= num;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var odd = 1;\n    var num = n;\n    while(num > 0){\n        var digit = num % 10;\n        if(digit % 2 != 0){\n            odd *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let nString = n.toString();\n    for(let i = 0; i < nString.length; i++){\n        if(nString[i] % 2 != 0){\n            product *= parseInt(nString[i]);\n        }\n    }\n    return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let result = 1;\n    let str = n.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            result *= parseInt(str[i]);\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var odd = 1;\n    var num = n;\n    while(num > 0){\n        var digit = num % 10;\n        if(digit % 2 != 0){\n            odd *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    var result = 1;\n    var str = n.toString();\n    for(var i = 0; i < str.length; i++){\n        if(str[i] % 2 != 0){\n            result *= str[i];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    let num = n;\n    while(num > 0){\n        let remainder = num % 10;\n        if(remainder % 2 !== 0){\n            odd *= remainder;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    while(n){\n        if(n%2){\n            odd *= n%10;\n        }\n        n = Math.floor(n/10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    for(let i = 0; i < n.toString().length; i++){\n        if(n.toString()[i] % 2 !== 0){\n            odd *= parseInt(n.toString()[i]);\n        }\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let product = 1;\n    let str = n.toString();\n    for(let i = 0; i < str.length; i++){\n        if(str[i] % 2 !== 0){\n            product *= str[i];\n        }\n    }\n    return product;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    let num = n;\n    while(num > 0){\n        let digit = num % 10;\n        if(digit % 2 != 0){\n            odd *= digit;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n", "//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let odd = 1;\n    let num = n;\n    while(num > 0){\n        if(num % 2 != 0){\n            odd *= num % 10;\n        }\n        num = Math.floor(num / 10);\n    }\n    return odd;\n}\n"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let count = 0;\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      count++;\n    }\n    else if(string[i] === ']'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return count > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      stack.push('[')\n    }\n    else if(string[i] === ']'){\n      if(stack.length > 0){\n        stack.pop()\n      }\n      else{\n        return false\n      }\n    }\n  }\n  return stack.length > 0 ? false : true\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let count = 0;\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      count++;\n    }\n    else if(string[i] === ']'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return count > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n            if(stack.length > 0){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    return stack.length > 0 ? false : true;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let count = 0;\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === '['){\n      count++;\n    }\n    else if(string[i] === ']'){\n      count--;\n    }\n    if(count < 0){\n      return false;\n    }\n  }\n  return count > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n            if(stack.length > 0){\n                stack.pop();\n            }\n            else{\n                return false;\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    let left = 0;\n    let right = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n            left++;\n        }\n        else if(string[i] === ']'){\n            stack.pop();\n            right++;\n        }\n    }\n    return left > right;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            open++;\n        } else {\n            close++;\n        }\n        if(close > open){\n            return false;\n        }\n    }\n    return open !== close;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            open++;\n        }\n        else{\n            close++;\n        }\n        if(open === close){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        }\n        else if(string[i] === ']'){\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n        } else {\n            if(stack.length === 0){\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length !== 0;\n}\n", "//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n        }\n        else{\n            if(stack.length === 0){\n                return false;\n            }\n            else{\n                stack.pop();\n            }\n        }\n    }\n    return stack.length > 0;\n}\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + b * b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a,b)=>a+b*b,0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + b * b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a,b)=>a+b*b,0)\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a, b) => a + b * b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce(function(a, b){\n    return a + Math.pow(b, 2);\n  });\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a, b) => a + b * b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a,b)=>a+b*b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce(function(a, b) {\n        return a + Math.pow(b, 2);\n    }, 0);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    return lst.map(Math.ceil).reduce((a,b) => a + b*b);\n}\n", "//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  return lst.map(Math.ceil).reduce((a,b) => a + b*b, 0);\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length === 0) return false;\n  let lastChar = txt[txt.length - 1];\n  let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  let lastCharIsSpace = lastChar.match(/\\s/);\n  return lastCharIsLetter && !lastCharIsSpace;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let lastChar = txt[txt.length - 1];\n  let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  let lastCharIsSpace = lastChar.match(/\\s/);\n  if (lastCharIsLetter && !lastCharIsSpace) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let lastChar = txt.slice(-1);\n    let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    let lastCharIsNotPartOfWord = lastChar.match(/[a-zA-Z]/) === null;\n    return lastCharIsLetter && lastCharIsNotPartOfWord;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  var lastChar = txt.slice(-1);\n  var lastCharIsLetter = lastChar.match(/[a-z]/i);\n  var lastCharIsSpace = lastChar.match(/\\s/);\n  if (lastCharIsLetter && !lastCharIsSpace) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let words = txt.split(\" \");\n  let lastWord = words[words.length - 1];\n  return lastWord.length > 0 && lastWord[lastWord.length - 1].match(/[a-zA-Z]/);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let lastChar = txt[txt.length - 1];\n    let lastCharIsLetter = lastChar.match(/[a-z]/i);\n    let lastCharIsSpace = lastChar.match(/\\s/);\n    if (lastCharIsLetter && !lastCharIsSpace) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let words = txt.split(\" \");\n    let last_word = words[words.length - 1];\n    let last_char = last_word[last_word.length - 1];\n    return last_char.match(/[a-zA-Z]/) && !last_char.match(/\\w/);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let lastChar = txt[txt.length - 1];\n    let isLetter = lastChar.match(/[a-zA-Z]/);\n    let isSpace = lastChar.match(/\\s/);\n    if (isLetter && !isSpace) {\n        return true;\n    }\n    return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let lastChar = txt[txt.length - 1];\n    let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    let lastCharIsSpace = lastChar.match(/\\s/);\n    return lastCharIsLetter && !lastCharIsSpace;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    var lastChar = txt.slice(-1);\n    var lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    var lastCharIsSpace = lastChar.match(/\\s/);\n    var lastCharIsWord = txt.slice(-2).match(/\\s[a-zA-Z]/);\n    if (lastCharIsLetter && !lastCharIsSpace && !lastCharIsWord){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if (txt.length == 0) return false;\n  if (txt.length == 1) return true;\n  if (txt.length > 1 && txt[txt.length - 1] != \" \" && txt[txt.length - 2] == \" \") return true;\n  return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let lastChar = txt[txt.length - 1];\n    let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    let lastCharIsSpace = lastChar.match(/\\s/);\n    let lastCharIsNotLetter = !lastCharIsLetter;\n    let lastCharIsNotSpace = !lastCharIsSpace;\n    let lastCharIsNotWord = lastCharIsNotLetter && lastCharIsNotSpace;\n    return lastCharIsNotWord;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  if(txt.length == 0) return false;\n  if(txt.length == 1) return true;\n  if(txt.charAt(txt.length - 1) == \" \") return false;\n  if(txt.charAt(txt.length - 1) == \"e\") return false;\n  if(txt.charAt(txt.length - 1) == \"i\") return false;\n  if(txt.charAt(txt.length - 1) == \"o\") return false;\n  if(txt.charAt(txt.length - 1) == \"u\") return false;\n  if(txt.charAt(txt.length - 1) == \"a\") return false;\n  if(txt.charAt(txt.length - 1) == \"s\") return false;\n  if(txt.charAt(txt.length - 1) == \"d\") return false;\n  if(txt.charAt(txt.length - 1) == \"f\") return false;\n  if(txt.charAt(txt.length - 1) == \"g\") return false;\n  if(txt.charAt(txt.length - 1) == \"h\") return false;\n  if(txt.charAt(txt.length - 1) == \"j\") return false;\n  if(txt.charAt(txt.length - 1) == \"k\") return false;\n  if(txt.charAt(txt.length - 1) ==", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let lastChar = txt[txt.length - 1];\n  let isLetter = lastChar.match(/[a-zA-Z]/);\n  let isSpace = lastChar.match(/\\s/);\n  if (isLetter && !isSpace) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  return txt.split(' ').pop().match(/[a-zA-Z]$/)\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let words = txt.split(\" \");\n    let lastWord = words[words.length - 1];\n    let lastChar = lastWord[lastWord.length - 1];\n    return lastChar.match(/[a-zA-Z]/) && !lastChar.match(/[a-zA-Z]+/);\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let lastChar = txt.slice(-1);\n  let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  let lastCharIsNotPartOfWord = txt.slice(-2) !== \" \";\n  return lastCharIsLetter && lastCharIsNotPartOfWord;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  var lastChar = txt[txt.length-1];\n  var lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  var lastCharIsSpace = lastChar.match(/\\s/);\n  if(lastCharIsLetter && !lastCharIsSpace){\n    return true;\n  }\n  return false;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let lastChar = txt[txt.length - 1];\n  let lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n  let lastCharIsWord = lastChar.match(/\\w/);\n  return lastCharIsLetter && !lastCharIsWord;\n}\n", "//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    var lastChar = txt.slice(-1);\n    var lastCharIsLetter = lastChar.match(/[a-zA-Z]/);\n    var lastCharIsSpace = lastChar.match(/\\s/);\n    if (lastCharIsLetter && !lastCharIsSpace){\n        return true;\n    } else {\n        return false;\n    }\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let index = -1;\n    for(let i = 0; i < arr.length - 1; i++){\n        if(arr[i] >= arr[i + 1]){\n            index = i;\n        }\n    }\n    return index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(var i=0;i<arr.length;i++){\n        if(arr[i]<arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    while(i < arr.length){\n        if(arr[i] >= arr[i + 1]){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var max = -1;\n    for(i = 0; i < arr.length; i++){\n        for(j = i + 1; j < arr.length; j++){\n            if(arr[i] >= arr[j]){\n                if(j > max){\n                    max = j;\n                }\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var max = -1;\n    for(i = 0; i < arr.length; i++){\n        for(j = i + 1; j < arr.length; j++){\n            if(arr[i] >= arr[j]){\n                if(max < j){\n                    max = j;\n                }\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 1;\n    var len = arr.length;\n    while(i < len && j < len){\n        if(arr[i] < arr[j]){\n            i++;\n            j++;\n        } else {\n            j++;\n        }\n    }\n    return i == len - 1 ? -1 : i;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 1;\n    var len = arr.length;\n    var result = -1;\n    while(i < len){\n        if(arr[i] >= arr[j]){\n            result = i;\n        }\n        i++;\n        j++;\n    }\n    return result;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = arr[0];\n    var max_index = 0;\n    for(var i = 1; i < arr.length; i++){\n        if(arr[i] < max){\n            max = arr[i];\n            max_index = i;\n        }\n    }\n    return max_index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let i = 0;\n    let j = 1;\n    while(j < arr.length){\n        if(arr[i] < arr[j]){\n            return i;\n        }\n        i++;\n        j++;\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let i = 0;\n    let j = 1;\n    let max = -1;\n    while(j < arr.length){\n        if(arr[i] < arr[j]){\n            max = Math.max(max, i);\n            i = j;\n        }\n        j++;\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var max = -1;\n    for(i = 0; i < arr.length; i++){\n        for(j = i + 1; j < arr.length; j++){\n            if(arr[i] >= arr[j]){\n                if(j > max){\n                    max = j;\n                }\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]<arr[i-1]){\n            return i;\n        }\n    }\n    return -1;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var result = -1;\n    for(i = 0; i < arr.length; i++){\n        for(j = i + 1; j < arr.length; j++){\n            if(arr[i] >= arr[j]){\n                result = i;\n                break;\n            }\n        }\n    }\n    return result;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var len = arr.length;\n    var result = -1;\n    for(i = 0; i < len; i++){\n        for(j = i + 1; j < len; j++){\n            if(arr[i] >= arr[j]){\n                result = j;\n                break;\n            }\n        }\n    }\n    return result;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var max = -1;\n    var len = arr.length;\n    for(i = 0; i < len; i++){\n        for(j = i + 1; j < len; j++){\n            if(arr[i] >= arr[j]){\n                if(j > max){\n                    max = j;\n                }\n            }\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let i = 0;\n    let j = 1;\n    while(j < arr.length){\n        if(arr[i] < arr[j]){\n            i++;\n            j++;\n        }\n        else{\n            j++;\n        }\n    }\n    return i;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var result = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < arr[i+1]){\n            result = i;\n        }\n    }\n    return result;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < arr[i-1]){\n            max = i;\n        }\n    }\n    return max;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= arr[i + 1]){\n            index = i;\n        }\n    }\n    return index;\n}\n", "//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var i = 0;\n    var j = 0;\n    var len = arr.length;\n    var max = -1;\n    while(i < len){\n        j = i + 1;\n        while(j < len){\n            if(arr[i] < arr[j]){\n                if(arr[j] < max || max == -1){\n                    max = arr[j];\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let max = undefined;\n    let min = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (max === undefined || lst[i] > max)){\n            max = lst[i];\n        }\n        if(lst[i] > 0 && (min === undefined || lst[i] < min)){\n            min = lst[i];\n        }\n    }\n    return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = lst.filter(x => x > 0).sort((a, b) => a - b)[0];\n    let largest = lst.filter(x => x < 0).sort((a, b) => b - a)[0];\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var max = lst.reduce(function(a, b){\n        return Math.max(a, b);\n    });\n    var min = lst.reduce(function(a, b){\n        return Math.min(a, b);\n    });\n    if (max < 0 && min > 0) {\n        return [undefined, undefined];\n    } else if (max < 0) {\n        return [max, undefined];\n    } else if (min > 0) {\n        return [undefined, min];\n    } else {\n        return [max, min];\n    }\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = lst.filter(x => x > 0).sort((a, b) => a - b)[0];\n    let largest = lst.filter(x => x < 0).sort((a, b) => b - a)[0];\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  var max = undefined;\n  var min = undefined;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (max === undefined || lst[i] > max)){\n      max = lst[i];\n    }\n    if(lst[i] > 0 && (min === undefined || lst[i] < min)){\n      min = lst[i];\n    }\n  }\n  return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if (lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var max = -Infinity;\n    var min = Infinity;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    if(max < 0){\n        max = undefined;\n    }\n    if(min > 0){\n        min = undefined;\n    }\n    return [max, min];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if (lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] < 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    let smallest = undefined;\n    let largest = undefined;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n            smallest = lst[i];\n        }\n        if (lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n            largest = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    var smallest = undefined;\n    var largest = undefined;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(smallest === undefined || lst[i] < smallest){\n                smallest = lst[i];\n            }\n        }\n        else if(lst[i] > 0){\n            if(largest === undefined || lst[i] > largest){\n                largest = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n}\n", "//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let smallest = undefined;\n  let largest = undefined;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] < 0 && (smallest === undefined || lst[i] < smallest)){\n      smallest = lst[i];\n    }\n    if(lst[i] > 0 && (largest === undefined || lst[i] > largest)){\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) {\n    return undefined;\n  }\n  if (typeof a === 'string') {\n    a = a.replace(',', '.');\n  }\n  if (typeof b === 'string') {\n    b = b.replace(',', '.');\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(a === b) return undefined;\n    if(a > b) return a;\n    return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (a === b) {\n        return undefined;\n    }\n    else if (a > b) {\n        return a;\n    }\n    else {\n        return b;\n    }\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(a === b) return undefined;\n    if(typeof a === 'string') a = parseFloat(a.replace(',', '.'));\n    if(typeof b === 'string') b = parseFloat(b.replace(',', '.'));\n    return a > b ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) {\n    return undefined;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(a === b) return undefined;\n  if(a > b) return a;\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(a === b) return undefined;\n    if(a > b) return a;\n    return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) return undefined;\n  if (typeof a === 'string') a = parseFloat(a.replace(',', '.'));\n  if (typeof b === 'string') b = parseFloat(b.replace(',', '.'));\n  return a > b ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) {\n    return undefined;\n  }\n  if (typeof a === 'string') {\n    a = parseFloat(a.replace(',', '.'));\n  }\n  if (typeof b === 'string') {\n    b = parseFloat(b.replace(',', '.'));\n  }\n  return a > b ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) {\n    return undefined;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) return undefined;\n  if (typeof a === 'string') a = a.replace(',', '.');\n  if (typeof b === 'string') b = b.replace(',', '.');\n  return a > b ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(a === b) return undefined;\n    if(typeof a === 'string') a = parseFloat(a.replace(',','.'));\n    if(typeof b === 'string') b = parseFloat(b.replace(',','.'));\n    return a > b ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) {\n    return undefined;\n  }\n  if (a > b) {\n    return a;\n  }\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) return undefined;\n  if (a > b) return a;\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (a === b) {\n        return undefined;\n    }\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (a === b) return undefined;\n    if (a > b) return a;\n    return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (a === b) return undefined;\n  if (a > b) return a;\n  return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(a === b){\n        return undefined;\n    }\n    if(a > b){\n        return a;\n    }\n    return b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  let a_type = typeof a;\n  let b_type = typeof b;\n  if (a_type === b_type) {\n    if (a === b) {\n      return undefined;\n    }\n    return Math.max(a, b);\n  }\n  return a_type === 'number' ? a : b;\n}\n", "//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if (a === b) {\n        return undefined;\n    }\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var even = [];\n    for (var i = 2; i < n; i += 2) {\n        even.push(i);\n    }\n    var result = false;\n    for (var i = 0; i < even.length; i++) {\n        for (var j = 0; j < even.length; j++) {\n            for (var k = 0; k < even.length; k++) {\n                for (var l = 0; l < even.length; l++) {\n                    if (even[i] + even[j] + even[k] + even[l] == n) {\n                        result = true;\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2!=0) return false;\n    var count=0;\n    for(var i=2;i<=n/2;i+=2){\n        if(n-i%2==0) count++;\n        if(count==4) return true;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if (n % 2 != 0) return false;\n    var i = 2;\n    var j = 4;\n    var k = 6;\n    var l = 8;\n    while (i < n){\n        while (j < n){\n            while (k < n){\n                while (l < n){\n                    if (i + j + k + l == n) return true;\n                    l += 2;\n                }\n                l = 8;\n                k += 2;\n            }\n            k = 6;\n            j += 2;\n        }\n        j = 4;\n        i += 2;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2==0){\n        for(var i=2;i<=n;i+=2){\n            for(var j=i+2;j<=n;j+=2){\n                for(var k=j+2;k<=n;k+=2){\n                    for(var l=k+2;l<=n;l+=2){\n                        if(i+j+k+l==n){\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var even = [];\n    for(var i = 2; i < n; i+=2){\n        even.push(i);\n    }\n    for(var i = 0; i < even.length; i++){\n        for(var j = i + 1; j < even.length; j++){\n            for(var k = j + 1; k < even.length; k++){\n                for(var l = k + 1; l < even.length; l++){\n                    if(even[i] + even[j] + even[k] + even[l] === n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let even = 0;\n    for(let i = 2; i <= n; i += 2){\n        if(n % i === 0){\n            even += 1;\n        }\n    }\n    return even === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i=1; i<=n; i++){\n        for(let j=i+1; j<=n; j++){\n            for(let k=j+1; k<=n; k++){\n                for(let l=k+1; l<=n; l++){\n                    if(i+j+k+l === n && i%2 === 0 && j%2 === 0 && k%2 === 0 && l%2 === 0){\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let even = [];\n    for (let i = 2; i <= n; i += 2) {\n        even.push(i);\n    }\n    let result = [];\n    for (let i = 0; i < even.length; i++) {\n        for (let j = i + 1; j < even.length; j++) {\n            for (let k = j + 1; k < even.length; k++) {\n                for (let l = k + 1; l < even.length; l++) {\n                    if (even[i] + even[j] + even[k] + even[l] === n) {\n                        result.push(even[i]);\n                        result.push(even[j]);\n                        result.push(even[k]);\n                        result.push(even[l]);\n                    }\n                }\n            }\n        }\n    }\n    return result.length === 4;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var sum = 0;\n    for(var i = 0; i < 4; i++){\n        sum += 2 * (i + 1);\n    }\n    return sum == n;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    for (i = 0; i <= n; i += 2) {\n        for (j = 0; j <= n; j += 2) {\n            for (k = 0; k <= n; k += 2) {\n                for (l = 0; l <= n; l += 2) {\n                    if (i + j + k + l == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var sum = 0;\n    var count = 0;\n    for(var i=1; i<=n; i++){\n        if(i%2==0){\n            sum += i;\n            count++;\n        }\n        if(count==4){\n            return true;\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            for(let k = 0; k < n; k++){\n                for(let l = 0; l < n; l++){\n                    if(i + j + k + l == n && i % 2 == 0 && j % 2 == 0 && k % 2 == 0 && l % 2 == 0){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2==0){\n        return false;\n    }\n    var i=1;\n    var j=1;\n    var k=1;\n    var l=1;\n    var sum=0;\n    while(i<n){\n        while(j<n){\n            while(k<n){\n                while(l<n){\n                    if(i%2==0 && j%2==0 && k%2==0 && l%2==0){\n                        sum=i+j+k+l;\n                        if(sum==n){\n                            return true;\n                        }\n                    }\n                    l+=2;\n                }\n                l=1;\n                k+=2;\n            }\n            k=1;\n            j+=2;\n        }\n        j=1;\n        i+=2;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2!=0) return false\n    var i=2\n    while(i<n){\n        if(n-i%2==0) return true\n        i+=2\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var even = [];\n    for (var i = 2; i <= n; i += 2) {\n        even.push(i);\n    }\n    for (var i = 0; i < even.length; i++) {\n        for (var j = i + 1; j < even.length; j++) {\n            for (var k = j + 1; k < even.length; k++) {\n                for (var l = k + 1; l < even.length; l++) {\n                    if (even[i] + even[j] + even[k] + even[l] == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2==0){\n        for(var i=0;i<n;i++){\n            if(n-i%2==0){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    for(i=2; i<=n; i+=2){\n        for(j=2; j<=n; j+=2){\n            for(k=2; k<=n; k+=2){\n                for(l=2; l<=n; l+=2){\n                    if(i+j+k+l === n){\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2!=0) return false;\n    var i=2;\n    var j=2;\n    var k=2;\n    var l=2;\n    while(i<n){\n        while(j<n){\n            while(k<n){\n                while(l<n){\n                    if(i+j+k+l==n){\n                        return true;\n                    }\n                    l+=2;\n                }\n                l=2;\n                k+=2;\n            }\n            k=2;\n            j+=2;\n        }\n        j=2;\n        i+=2;\n    }\n    return false;\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2==0){\n        for(let i=2;i<n;i+=2){\n            for(let j=i+2;j<n;j+=2){\n                for(let k=j+2;k<n;k+=2){\n                    for(let l=k+2;l<n;l+=2){\n                        if(i+j+k+l==n){\n                            return true\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n", "//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    if(n%2!=0)\n        return false;\n    var i=2;\n    var j=2;\n    var k=2;\n    var l=2;\n    while(i<=n/4){\n        while(j<=n/4){\n            while(k<=n/4){\n                while(l<=n/4){\n                    if(i+j+k+l==n)\n                        return true;\n                    l+=2;\n                }\n                k+=2;\n                l=2;\n            }\n            j+=2;\n            k=2;\n            l=2;\n        }\n        i+=2;\n        j=2;\n        k=2;\n        l=2;\n    }\n    return false;\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= fact(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    if (n === 1) {\n        return 1;\n    }\n    return n * special_factorial(n-1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = 1; i <= n; i++){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    if(n === 1){\n        return 1;\n    }\n    return n * special_factorial(n-1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for(let i = n; i > 0; i--){\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= factorial(i);\n  }\n  return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n", "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    let result = 1;\n    for(let i = n; i > 0; i--){\n        result *= factorial(i);\n    }\n    return result;\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, \"_\");\n    let newText2 = newText.replace(/_-/g, \"-\");\n    return newText2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, \"_\");\n    let newText2 = newText.replace(/\\s{2,}/g, \"-\");\n    return newText2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let new_text = text.replace(/ /g, \"_\");\n    return new_text.replace(/_(?=_)/g, \"-\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, '_');\n    return newText.replace(/\\s{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    var result = text.replace(/\\s+/g, '_');\n    return result.replace(/_-/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s+/g, \"_\");\n    return newText.replace(/_-/g, \"-\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, '_');\n    return newText.replace(/\\s{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, '_');\n    return newText.replace(/\\s{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, \"_\");\n    return newText.replace(/_(?=_)/g, \"-\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, \"_\");\n    let newText2 = newText.replace(/_-/g, \"-\");\n    return newText2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, '_');\n    return newText.replace(/\\s{2,}/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, '_');\n    return newText.replace(/_(?=_)/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = text.replace(/\\s+/g, '_');\n    return result.replace(/\\_+/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    var newText = text.replace(/\\s/g, \"_\");\n    var newText = newText.replace(/\\s{2,}/g, \"-\");\n    return newText;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    var result = text.replace(/\\s+/g, '_');\n    return result.replace(/_-/g, '-');\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/ /g, \"_\");\n    let newText2 = newText.replace(/_/g, \"-\");\n    return newText2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let new_text = text.replace(/\\s/g, \"_\");\n    return new_text.replace(/\\s{2,}/g, \"-\");\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let new_text = text.replace(/\\s/g, \"_\");\n    let new_text_2 = new_text.replace(/_{2,}/g, \"-\");\n    return new_text_2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let newText = text.replace(/\\s/g, '_');\n    let newText2 = newText.replace(/\\s{2,}/g, '-');\n    return newText2;\n}\n", "//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let new_text = text.replace(/\\s/g, '_');\n    let new_text_2 = new_text.replace(/_/g, '-');\n    let new_text_3 = new_text_2.replace(/-{2,}/g, '-');\n    return new_text_3;\n}\n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.');\n    let dot2 = file_name.lastIndexOf('.');\n    let dot3 = file_name.indexOf('.', dot + 1);\n    let dot4 = file_name.lastIndexOf('.', dot2 - 1);\n    let dot5 = file_name.indexOf('.', dot3 + 1);\n    let dot6 = file_name.lastIndexOf('.', dot4 - 1);\n    let dot7 = file_name.indexOf('.', dot5 + 1);\n    let dot8 = file_name.lastIndexOf('.', dot6 - 1);\n    let dot9 = file_name.indexOf('.', dot7 + 1);\n    let dot10 = file_name.lastIndexOf('.', dot8 - 1);\n    let dot11 = file_name.indexOf('.', dot9 + 1);\n    let dot12 = file_name.lastIndexOf('.', dot10 - 1);\n    let dot13 = file_name.indexOf('.', dot11 + 1);\n    let dot14 = file_name.lastIndexOf('.', dot12 - 1);\n    let dot15 = file_name.indexOf('.', dot", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = 0;\n    let num = 0;\n    let txt = 0;\n    let exe = 0;\n    let dll = 0;\n    let yes = 0;\n    let no = 0;\n    for (let i = 0; i < file_name.length; i++){\n        if (file_name[i] === \".\"){\n            dot++;\n        }\n        if (file_name[i] === \"0\" || file_name[i] === \"1\" || file_name[i] === \"2\" || file_name[i] === \"3\" || file_name[i] === \"4\" || file_name[i] === \"5\" || file_name[i] === \"6\" || file_name[i] === \"7\" || file_name[i] === \"8\" || file_name[i] === \"9\"){\n            num++;\n        }\n        if (file_name[i] === \"t\" && file_name[i+1] === \"x\" && file_name[i+2] === \"t\" && file_name[i+3] === \".\"){\n            txt++;\n        }\n        if (file_name[i]", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.')\n    let dot_count = 0\n    let dot_index = 0\n    let dot_index_array = []\n    let dot_index_array_length = 0\n    let dot_index_array_length_count = 0\n    let dot_index_array_length_count_count = 0\n    let dot_index_array_length_count_count_count = 0\n    let dot_index_array_length_count_count_count_count = 0\n    let dot_index_array_length_count_count_count_count_count = 0\n    let dot_index_array_length_count_count_count_count_count_count = 0\n    let dot_index_array_length_count_count_count_count_count_count_count = 0\n    let dot_index_array_length_count_count_count_count_count_count_count_count = 0\n    let dot_index_array_length_count_count_count_count_count_count_count_count_count = 0\n    let dot_index_array_length_count_count_count_count_count_count_count_count_count_", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.')\n    let dot_count = file_name.split('.').length - 1\n    let dot_ext = file_name.split('.')[dot_count]\n    let dot_ext_list = ['txt', 'exe', 'dll']\n    let dot_ext_check = dot_ext_list.includes(dot_ext)\n    let dot_check = dot_count === 1\n    let dot_start = file_name[0] === '.'\n    let dot_start_check = file_name[0] !== '.'\n    let dot_digit_count = file_name.split('').filter(x => x >= '0' && x <= '9').length\n    let dot_digit_check = dot_digit_count <= 3\n    let dot_letter_check = file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z'\n    let dot_letter_check_2 = file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z'", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let count = 0;\n  let dot = 0;\n  let dot_index = 0;\n  let dot_index_2 = 0;\n  let dot_index_3 = 0;\n  let dot_index_4 = 0;\n  let dot_index_5 = 0;\n  let dot_index_6 = 0;\n  let dot_index_7 = 0;\n  let dot_index_8 = 0;\n  let dot_index_9 = 0;\n  let dot_index_10 = 0;\n  let dot_index_11 = 0;\n  let dot_index_12 = 0;\n  let dot_index_13 = 0;\n  let dot_index_14 = 0;\n  let dot_index_15 = 0;\n  let dot_index_16 = 0;\n  let dot_index_17 = 0;\n  let dot_index_18 = 0;\n  let dot_index_19 = 0;\n  let dot_index_20 = 0;\n  let dot_index_21 = 0;\n  let dot_index_22 = ", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.');\n    let dot2 = file_name.lastIndexOf('.');\n    let dot3 = file_name.indexOf('.', dot + 1);\n    let dot4 = file_name.lastIndexOf('.', dot2 - 1);\n    let dot5 = file_name.indexOf('.', dot3 + 1);\n    let dot6 = file_name.lastIndexOf('.', dot4 - 1);\n    let dot7 = file_name.indexOf('.', dot5 + 1);\n    let dot8 = file_name.lastIndexOf('.', dot6 - 1);\n    let dot9 = file_name.indexOf('.', dot7 + 1);\n    let dot10 = file_name.lastIndexOf('.', dot8 - 1);\n    let dot11 = file_name.indexOf('.', dot9 + 1);\n    let dot12 = file_name.lastIndexOf('.', dot10 - 1);\n    let dot13 = file_name.indexOf('.', dot11 + 1);\n    let dot14 = file_name.lastIndexOf('.', dot12 - 1);\n    let dot15 = file_name.indexOf('.', dot", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.');\n    let dot2 = file_name.lastIndexOf('.');\n    let dot3 = file_name.indexOf('.', dot + 1);\n    let dot4 = file_name.lastIndexOf('.', dot2 - 1);\n    let dot5 = file_name.indexOf('.', dot3 + 1);\n    let dot6 = file_name.lastIndexOf('.', dot4 - 1);\n    let dot7 = file_name.indexOf('.', dot5 + 1);\n    let dot8 = file_name.lastIndexOf('.', dot6 - 1);\n    let dot9 = file_name.indexOf('.', dot7 + 1);\n    let dot10 = file_name.lastIndexOf('.', dot8 - 1);\n    let dot11 = file_name.indexOf('.', dot9 + 1);\n    let dot12 = file_name.lastIndexOf('.', dot10 - 1);\n    let dot13 = file_name.indexOf('.', dot11 + 1);\n    let dot14 = file_name.lastIndexOf('.', dot12 - 1);\n    let dot15 = file_name.indexOf('.', dot", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let arr = file_name.split('.')\n  let count = 0\n  for (let i = 0; i < arr[0].length; i++){\n    if (arr[0][i] >= '0' && arr[0][i] <= '9'){\n      count++\n    }\n  }\n  if (count > 3 || arr[0].length === 0 || arr[1] !== 'txt' && arr[1] !== 'exe' && arr[1] !== 'dll'){\n    return 'No'\n  }\n  return 'Yes'\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.');\n    let dot2 = file_name.lastIndexOf('.');\n    let dot3 = file_name.indexOf('.', dot + 1);\n    let dot4 = file_name.lastIndexOf('.', dot2 - 1);\n    let dot5 = file_name.indexOf('.', dot3 + 1);\n    let dot6 = file_name.lastIndexOf('.', dot4 - 1);\n    let dot7 = file_name.indexOf('.', dot5 + 1);\n    let dot8 = file_name.lastIndexOf('.', dot6 - 1);\n    let dot9 = file_name.indexOf('.', dot7 + 1);\n    let dot10 = file_name.lastIndexOf('.', dot8 - 1);\n    let dot11 = file_name.indexOf('.', dot9 + 1);\n    let dot12 = file_name.lastIndexOf('.', dot10 - 1);\n    let dot13 = file_name.indexOf('.', dot11 + 1);\n    let dot14 = file_name.lastIndexOf('.', dot12 - 1);\n    let dot15 = file_name.indexOf('.', dot", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.');\n    let dot2 = file_name.lastIndexOf('.');\n    let dot3 = file_name.indexOf('.', dot + 1);\n    let dot4 = file_name.lastIndexOf('.', dot2 - 1);\n    let dot5 = file_name.indexOf('.', dot3 + 1);\n    let dot6 = file_name.lastIndexOf('.', dot4 - 1);\n    let dot7 = file_name.indexOf('.', dot5 + 1);\n    let dot8 = file_name.lastIndexOf('.', dot6 - 1);\n    let dot9 = file_name.indexOf('.', dot7 + 1);\n    let dot10 = file_name.lastIndexOf('.', dot8 - 1);\n    let dot11 = file_name.indexOf('.', dot9 + 1);\n    let dot12 = file_name.lastIndexOf('.', dot10 - 1);\n    let dot13 = file_name.indexOf('.', dot11 + 1);\n    let dot14 = file_name.lastIndexOf('.', dot12 - 1);\n    let dot15 = file_name.indexOf('.', dot", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = 0;\n    let dot = 0;\n    let dotIndex = 0;\n    let dotIndex2 = 0;\n    let dotIndex3 = 0;\n    let dotIndex4 = 0;\n    let dotIndex5 = 0;\n    let dotIndex6 = 0;\n    let dotIndex7 = 0;\n    let dotIndex8 = 0;\n    let dotIndex9 = 0;\n    let dotIndex10 = 0;\n    let dotIndex11 = 0;\n    let dotIndex12 = 0;\n    let dotIndex13 = 0;\n    let dotIndex14 = 0;\n    let dotIndex15 = 0;\n    let dotIndex16 = 0;\n    let dotIndex17 = 0;\n    let dotIndex18 = 0;\n    let dotIndex19 = 0;\n    let dotIndex20 = 0;\n    let dotIndex21 = 0;\n    let dotIndex22 = 0;\n    let dotIndex23 = 0;\n    let dotIndex24 = 0;\n    let dotIndex25 = 0;\n    let dotIndex26 =", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = 0;\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] === '.'){\n            if(file_name.slice(0, i) === ''){\n                return 'No';\n            }\n            if(file_name.slice(i + 1) !== 'txt' && file_name.slice(i + 1) !== 'exe' && file_name.slice(i + 1) !== 'dll'){\n                return 'No';\n            }\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n        }\n        if(count > 3){\n            return 'No';\n        }\n    }\n    return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.');\n    let dot2 = file_name.lastIndexOf('.');\n    let ext = file_name.slice(dot+1);\n    let ext2 = file_name.slice(dot2+1);\n    let name = file_name.slice(0,dot);\n    let name2 = file_name.slice(0,dot2);\n    let num = file_name.match(/\\d/g);\n    let num2 = file_name.match(/\\d/g);\n    if (dot === -1 || dot2 !== -1 || ext !== 'txt' && ext !== 'exe' && ext !== 'dll' || ext2 !== 'txt' && ext2 !== 'exe' && ext2 !== 'dll' || num !== null || num2 !== null || name === '' || name2 === '' || name[0] < 'a' && name[0] > 'z' && name[0] < 'A' && name[0] > 'Z' || name2[0] < 'a' && name2[0] > 'z' && name2[0] < 'A' && name2[0] > 'Z'){\n        return 'No';\n    }\n    return 'Yes';\n}", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let dot = file_name.indexOf('.')\n    let dot_count = 0\n    let dot_count_2 = 0\n    let dot_count_3 = 0\n    let dot_count_4 = 0\n    let dot_count_5 = 0\n    let dot_count_6 = 0\n    let dot_count_7 = 0\n    let dot_count_8 = 0\n    let dot_count_9 = 0\n    let dot_count_10 = 0\n    let dot_count_11 = 0\n    let dot_count_12 = 0\n    let dot_count_13 = 0\n    let dot_count_14 = 0\n    let dot_count_15 = 0\n    let dot_count_16 = 0\n    let dot_count_17 = 0\n    let dot_count_18 = 0\n    let dot_count_19 = 0\n    let dot_count_20 = 0\n    let dot_count_21 = 0\n    let dot_count_22 = 0\n    let dot_count_23 = 0\n    let dot_count_24 = 0", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = 0;\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n        }\n    }\n    if(count > 3){\n        return 'No';\n    }\n    let dot = file_name.indexOf('.');\n    if(dot == -1){\n        return 'No';\n    }\n    let first = file_name.substring(0, dot);\n    if(first == ''){\n        return 'No';\n    }\n    let letter = first.charAt(0);\n    if(letter < 'a' || letter > 'z' || letter < 'A' || letter > 'Z'){\n        return 'No';\n    }\n    let second = file_name.substring(dot + 1);\n    if(second != 'txt' && second != 'exe' && second != 'dll'){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let dot = file_name.indexOf('.')\n  let dot_count = 0\n  let dot_count_1 = 0\n  let dot_count_2 = 0\n  let dot_count_3 = 0\n  let dot_count_4 = 0\n  let dot_count_5 = 0\n  let dot_count_6 = 0\n  let dot_count_7 = 0\n  let dot_count_8 = 0\n  let dot_count_9 = 0\n  let dot_count_0 = 0\n  let dot_count_10 = 0\n  let dot_count_11 = 0\n  let dot_count_12 = 0\n  let dot_count_13 = 0\n  let dot_count_14 = 0\n  let dot_count_15 = 0\n  let dot_count_16 = 0\n  let dot_count_17 = 0\n  let dot_count_18 = 0\n  let dot_count_19 = 0\n  let dot_count_20 = 0\n  let dot_count_21 = 0\n  let dot_count_22 = 0\n ", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let file_name_split = file_name.split('.')\n    let file_name_extension = file_name_split[1]\n    let file_name_start = file_name_split[0]\n    let file_name_start_split = file_name_start.split('')\n    let file_name_start_split_length = file_name_start_split.length\n    let file_name_start_split_length_count = 0\n    let file_name_start_split_length_count_number = 0\n    let file_name_start_split_length_count_letter = 0\n    let file_name_start_split_length_count_letter_start = false\n    let file_name_start_split_length_count_letter_end = false\n    let file_name_start_split_length_count_number_start = false\n    let file_name_start_split_length_count_number_end = false\n    let file_name_start_split_length_count_letter_start_index = 0\n    let file_name_start_split_length_count_letter_end_index = 0\n    let file_name_start_split_length_count_number", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let name = file_name.split('.')\n  let name_part = name[0]\n  let extention = name[1]\n  let count = 0\n  let count_ext = 0\n  let count_name = 0\n  let count_ext_name = 0\n  let count_ext_name_num = 0\n  let count_ext_name_num_dot = 0\n  let count_ext_name_num_dot_name = 0\n  let count_ext_name_num_dot_name_ext = 0\n  let count_ext_name_num_dot_name_ext_num = 0\n  let count_ext_name_num_dot_name_ext_num_dot = 0\n  let count_ext_name_num_dot_name_ext_num_dot_name = 0\n  let count_ext_name_num_dot_name_ext_num_dot_name_ext = 0\n  let count_ext_name_num_dot_name_ext_num_dot_name_ext_num = 0\n  let count_ext_name_num_dot_name_ext_num_dot_name_ext_num_dot = 0", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  let count = 0;\n  for (let i = 0; i < file_name.length; i++){\n    if (file_name[i] >= '0' && file_name[i] <= '9'){\n      count++;\n    }\n  }\n  if (count > 3){\n    return 'No';\n  }\n  let dot = file_name.indexOf('.');\n  if (dot == -1){\n    return 'No';\n  }\n  if (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z'){\n    if (file_name[dot + 1] == 't' && file_name[dot + 2] == 'x' && file_name[dot + 3] == 't'){\n      return 'Yes';\n    }\n    if (file_name[dot + 1] == 'e' && file_name[dot + 2] == 'x' && file_name[dot + 3] == 'e'){\n      return 'Yes';\n    }\n    if (file_name[dot + 1] == 'd' && file", "//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let count = 0;\n    let dot = 0;\n    let txt = 0;\n    let exe = 0;\n    let dll = 0;\n    let dot_index = 0;\n    let txt_index = 0;\n    let exe_index = 0;\n    let dll_index = 0;\n    let dot_index_2 = 0;\n    let txt_index_2 = 0;\n    let exe_index_2 = 0;\n    let dll_index_2 = 0;\n    let dot_index_3 = 0;\n    let txt_index_3 = 0;\n    let exe_index_3 = 0;\n    let dll_index_3 = 0;\n    let dot_index_4 = 0;\n    let txt_index_4 = 0;\n    let exe_index_4 = 0;\n    let dll_index_4 = 0;\n    let dot_index_5 = 0;\n    let txt_index_5 = 0;\n    let exe_index_5 = 0;\n    let dll_index_5 = 0;\n    let dot_index_6 = 0"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            lst[i] = Math.pow(lst[i], 2);\n        }\n        else if(i % 4 === 0 && i % 3 !== 0){\n            lst[i] = Math.pow(lst[i], 3);\n        }\n        sum += lst[i];\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            lst[i] = lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++){\n    if (i % 3 == 0){\n      sum += lst[i] * lst[i];\n    } else if (i % 4 == 0 && i % 3 != 0){\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if (i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if (i % 4 === 0 && i % 3 !== 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 === 0 && i % 3 !== 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 === 0 && i % 3 !== 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 == 0 && i % 3 != 0){\n            sum += lst[i] * lst[i] * lst[i];\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 == 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += Math.pow(lst[i], 2);\n        } else if (i % 4 == 0) {\n            sum += Math.pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 === 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 3 === 0){\n      sum += Math.pow(lst[i], 2);\n    }\n    else if(i % 4 === 0 && i % 3 !== 0){\n      sum += Math.pow(lst[i], 3);\n    }\n    else{\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 == 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += lst[i] * lst[i];\n        }\n        else if(i % 4 === 0 && i % 3 !== 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += Math.pow(lst[i], 2);\n        }\n        else if(i % 4 === 0 && i % 3 !== 0){\n            sum += Math.pow(lst[i], 3);\n        }\n        else{\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (isPrime(words[i].length)) {\n            result.push(words[i]);\n        }\n    }\n    return result.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let isPrime = true;\n        for(let j = 2; j < word.length; j++){\n            if(word.length % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let result = [];\n    for (let word of words){\n        if (isPrime(word.length)){\n            result.push(word);\n        }\n    }\n    return result.join(' ');\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(is_prime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let result = \"\";\n    let words = sentence.split(\" \");\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        let isPrime = true;\n        for (let j = 2; j < word.length; j++) {\n            if (word.length % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for (let i = 0; i < words.length; i++){\n        if (isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        if(isPrime(word.length)){\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        if(isPrime(word.length)){\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        if(isPrime(word.length)){\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for (let i = 0; i < words.length; i++){\n        if (isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for (let i = 0; i < words.length; i++){\n        let word = words[i];\n        let isPrime = true;\n        for (let j = 2; j < word.length; j++){\n            if (word.length % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime){\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let result = \"\";\n  let words = sentence.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    if (isPrime(words[i].length)) {\n      result += words[i] + \" \";\n    }\n  }\n  return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        if(is_prime(word.length)){\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n        if (isPrime(word.length)) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n", "//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(\" \");\n    let result = \"\";\n    for(let i = 0; i < words.length; i++){\n        if(isPrime(words[i].length)){\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n}\n"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0];\n  let xDen = x.split(\"/\")[1];\n  let nNum = n.split(\"/\")[0];\n  let nDen = n.split(\"/\")[1];\n  let result = (xNum * nNum) / (xDen * nDen);\n  return result % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0]\n  let xDen = x.split(\"/\")[1]\n  let nNum = n.split(\"/\")[0]\n  let nDen = n.split(\"/\")[1]\n  let num = xNum * nNum\n  let den = xDen * nDen\n  if (num % den === 0){\n    return true\n  } else {\n    return false\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNumerator = x.split(\"/\")[0];\n  let xDenominator = x.split(\"/\")[1];\n  let nNumerator = n.split(\"/\")[0];\n  let nDenominator = n.split(\"/\")[1];\n  let result = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n  return result % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0]\n  let xDen = x.split(\"/\")[1]\n  let nNum = n.split(\"/\")[0]\n  let nDen = n.split(\"/\")[1]\n  let xNumTimesnDen = parseInt(xNum) * parseInt(nDen)\n  let xDenTimesnNum = parseInt(xDen) * parseInt(nNum)\n  if (xNumTimesnDen === xDenTimesnNum) {\n    return true\n  } else {\n    return false\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNumerator = x.split(\"/\")[0];\n  let xDenominator = x.split(\"/\")[1];\n  let nNumerator = n.split(\"/\")[0];\n  let nDenominator = n.split(\"/\")[1];\n\n  let xMultiplied = (Number(xNumerator) * Number(nNumerator));\n  let nMultiplied = (Number(xDenominator) * Number(nDenominator));\n\n  if(xMultiplied % nMultiplied === 0){\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0];\n  let xDen = x.split(\"/\")[1];\n  let nNum = n.split(\"/\")[0];\n  let nDen = n.split(\"/\")[1];\n  let xNumTimesNDen = xNum * nDen;\n  let xDenTimesNNum = xDen * nNum;\n  if(xNumTimesNDen === xDenTimesNNum){\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let x_num = x.split(\"/\")[0];\n  let x_den = x.split(\"/\")[1];\n  let n_num = n.split(\"/\")[0];\n  let n_den = n.split(\"/\")[1];\n  let x_num_n_den = x_num * n_den;\n  let x_den_n_num = x_den * n_num;\n  if(x_num_n_den === x_den_n_num){\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0];\n  let xDen = x.split(\"/\")[1];\n  let nNum = n.split(\"/\")[0];\n  let nDen = n.split(\"/\")[1];\n  let newNum = xNum * nNum;\n  let newDen = xDen * nDen;\n  if(newNum % newDen === 0){\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split('/')[0]\n  let xDen = x.split('/')[1]\n  let nNum = n.split('/')[0]\n  let nDen = n.split('/')[1]\n  let result = (xNum * nDen) / (xDen * nNum)\n  return result % 1 === 0\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0];\n  let xDen = x.split(\"/\")[1];\n  let nNum = n.split(\"/\")[0];\n  let nDen = n.split(\"/\")[1];\n\n  let xNumTimesNDen = xNum * nDen;\n  let xDenTimesNNum = xDen * nNum;\n\n  if (xNumTimesNDen % xDenTimesNNum === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  let xMultiplied = (xNumerator * nNumerator);\n  let nMultiplied = (xDenominator * nDenominator);\n  if (xMultiplied % nMultiplied === 0) {\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  //your code here\n  let xNumerator = x.split(\"/\")[0];\n  let xDenominator = x.split(\"/\")[1];\n  let nNumerator = n.split(\"/\")[0];\n  let nDenominator = n.split(\"/\")[1];\n  let xNumeratorTimesN = parseInt(xNumerator) * parseInt(nNumerator);\n  let xDenominatorTimesN = parseInt(xDenominator) * parseInt(nDenominator);\n  if (xNumeratorTimesN % xDenominatorTimesN === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split('/')[0]\n  let xDen = x.split('/')[1]\n  let nNum = n.split('/')[0]\n  let nDen = n.split('/')[1]\n  let xMult = xNum * nDen\n  let nMult = nNum * xDen\n  if (xMult === nMult) {\n    return true\n  } else {\n    return false\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0]\n  let xDen = x.split(\"/\")[1]\n  let nNum = n.split(\"/\")[0]\n  let nDen = n.split(\"/\")[1]\n  let xNumTimesNDen = xNum * nDen\n  let xDenTimesNNum = xDen * nNum\n  if(xNumTimesNDen === xDenTimesNNum){\n    return true\n  }\n  return false\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNumerator = x.split(\"/\")[0];\n  let xDenominator = x.split(\"/\")[1];\n  let nNumerator = n.split(\"/\")[0];\n  let nDenominator = n.split(\"/\")[1];\n  let result = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n  return result % 1 === 0;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNumerator = x.split(\"/\")[0];\n  let xDenominator = x.split(\"/\")[1];\n  let nNumerator = n.split(\"/\")[0];\n  let nDenominator = n.split(\"/\")[1];\n\n  let xNumeratorMultipliedByNumerator = xNumerator * nNumerator;\n  let xDenominatorMultipliedByDenominator = xDenominator * nDenominator;\n\n  return xNumeratorMultipliedByNumerator / xDenominatorMultipliedByDenominator === Math.floor(xNumeratorMultipliedByNumerator / xDenominatorMultipliedByDenominator);\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0]\n  let xDen = x.split(\"/\")[1]\n  let nNum = n.split(\"/\")[0]\n  let nDen = n.split(\"/\")[1]\n  let xNumTimesNDen = xNum * nDen\n  let xDenTimesNNum = xDen * nNum\n  if(xNumTimesNDen === xDenTimesNNum){\n    return true\n  } else {\n    return false\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0]\n  let xDen = x.split(\"/\")[1]\n  let nNum = n.split(\"/\")[0]\n  let nDen = n.split(\"/\")[1]\n  let xNumN = xNum * nNum\n  let xDenN = xDen * nDen\n  if (xNumN % xDenN === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xNum = x.split(\"/\")[0];\n  let xDen = x.split(\"/\")[1];\n  let nNum = n.split(\"/\")[0];\n  let nDen = n.split(\"/\")[1];\n  let xNumTimesNDen = xNum * nDen;\n  let xDenTimesNNum = xDen * nNum;\n  if(xNumTimesNDen % xDenTimesNNum === 0){\n    return true;\n  }\n  return false;\n}\n", "//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  let xArr = x.split(\"/\");\n  let nArr = n.split(\"/\");\n  let xNum = parseInt(xArr[0]);\n  let xDen = parseInt(xArr[1]);\n  let nNum = parseInt(nArr[0]);\n  let nDen = parseInt(nArr[1]);\n  let result = (xNum * nNum) / (xDen * nDen);\n  return result % 1 === 0;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort(function(a, b){\n    var sumA = a.toString().split('').reduce(function(sum, digit){\n      return sum + parseInt(digit);\n    }, 0);\n    var sumB = b.toString().split('').reduce(function(sum, digit){\n      return sum + parseInt(digit);\n    }, 0);\n    return sumA - sumB;\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (sum_digits(a) - sum_digits(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (sum(a) - sum(b)) || (a - b);\n    });\n\n    function sum(num){\n        var result = 0;\n        while (num > 0){\n            result += num % 10;\n            num = Math.floor(num / 10);\n        }\n        return result;\n    }\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        var sumA = a.toString().split('').reduce(function(a, b){\n            return a + parseInt(b);\n        }, 0);\n        var sumB = b.toString().split('').reduce(function(a, b){\n            return a + parseInt(b);\n        }, 0);\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  return nums.sort(function(a,b){\n    return (sum(a) - sum(b)) || (a - b);\n  });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a,b){\n        return (sum(a) - sum(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (getSum(a) - getSum(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (a + '').split('').reduce(function(a, b){\n            return a + +b;\n        }, 0) - (b + '').split('').reduce(function(a, b){\n            return a + +b;\n        }, 0) || a - b;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (getSum(a) - getSum(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (sumDigits(a) - sumDigits(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a,b){\n        return (sum_digits(a) - sum_digits(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a,b){\n        var sumA = a.toString().split('').reduce(function(a,b){\n            return parseInt(a) + parseInt(b);\n        }, 0);\n        var sumB = b.toString().split('').reduce(function(a,b){\n            return parseInt(a) + parseInt(b);\n        }, 0);\n        if(sumA === sumB){\n            return a - b;\n        }\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        var sumA = a.toString().split('').reduce(function(a, b){\n            return a + parseInt(b);\n        }, 0);\n        var sumB = b.toString().split('').reduce(function(a, b){\n            return a + parseInt(b);\n        }, 0);\n        return sumA - sumB;\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (getSum(a) - getSum(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    var sum = [];\n    var sorted = [];\n    for (var i = 0; i < nums.length; i++){\n        var num = nums[i];\n        var sum_of_digits = 0;\n        while (num > 0){\n            sum_of_digits += num % 10;\n            num = Math.floor(num / 10);\n        }\n        sum.push(sum_of_digits);\n    }\n    for (var i = 0; i < sum.length; i++){\n        var num = nums[i];\n        var sum_of_digits = sum[i];\n        var index = sorted.length;\n        while (index > 0){\n            if (sum_of_digits < sum[sorted[index - 1]]){\n                index--;\n            } else {\n                break;\n            }\n        }\n        sorted.splice(index, 0, num);\n    }\n    return sorted;\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (sumDigits(a) - sumDigits(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (sumDigits(a) - sumDigits(b)) || (a - b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (a.toString().split('').reduce(function(a, b){\n            return a + parseInt(b);\n        }, 0) - b.toString().split('').reduce(function(a, b){\n            return a + parseInt(b);\n        }, 0) || a - b);\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return sumDigits(a) - sumDigits(b);\n    });\n}\n", "//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    return nums.sort(function(a, b){\n        return (a + '').split('').reduce(function(a, b){\n            return a + +b;\n        }, 0) - (b + '').split('').reduce(function(a, b){\n            return a + +b;\n        }, 0) || a - b;\n    });\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && (num % 10) % 2 == 1 && Math.floor(num / 10) % 2 == 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let num of nums){\n        if(num > 10){\n            let firstDigit = Math.floor(Math.abs(num) / 10);\n            let lastDigit = Math.abs(num) % 10;\n            if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        let firstDigit = Math.abs(num) % 10;\n        let lastDigit = Math.abs(num) % 100;\n        lastDigit = lastDigit / 10;\n        if(num > 10 && (firstDigit % 2 === 1) && (lastDigit % 2 === 1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && num % 10 % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10){\n            let firstDigit = Math.floor(num / 10);\n            let lastDigit = num % 10;\n            if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && (num % 10) % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  return nums.filter(x => x > 10 && x.toString().split('').filter(x => x % 2 === 1).length === 2).length;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && num % 10 % 2 == 1 && Math.floor(num / 10) % 2 == 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        let firstDigit = Math.abs(num) % 10;\n        let lastDigit = Math.abs(num) % 100;\n        lastDigit = lastDigit - (lastDigit % 10);\n        if(num > 10 && (firstDigit % 2 === 1) && (lastDigit % 2 === 1)){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && num % 10 % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && (num % 10) % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10){\n            let firstDigit = Math.floor(Math.abs(nums[i]) / 10);\n            let lastDigit = Math.abs(nums[i]) % 10;\n            if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && num % 10 % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && (nums[i] % 10) % 2 === 1 && Math.floor(nums[i] / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && (num % 10) % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n", "//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    let count = 0;\n    for(let i = 0; i < nums.length; i++){\n        let num = nums[i];\n        if(num > 10 && num % 10 % 2 === 1 && Math.floor(num / 10) % 2 === 1){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n - 2; i++){\n        for (let j = i + 1; j < n - 1; j++){\n            for (let k = j + 1; k < n; k++){\n                if ((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1);\n    }\n    let count = 0;\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] % 3 == 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for(let i = 0; i < n - 2; i++){\n        for(let j = i + 1; j < n - 1; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i=1; i<=n; i++){\n        a.push(i*i-i+1)\n    }\n    let count = 0\n    for(let i=0; i<n; i++){\n        for(let j=i+1; j<n; j++){\n            for(let k=j+1; k<n; k++){\n                if(a[i]+a[j]+a[k]%3==0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for(let i=1; i<=n; i++){\n        a.push(i*i - i + 1)\n    }\n    let count = 0\n    for(let i=0; i<n-2; i++){\n        for(let j=i+1; j<n-1; j++){\n            for(let k=j+1; k<n; k++){\n                if((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n - 2; i++) {\n        for (let j = i + 1; j < n - 1; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 === 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = []\n    for (let i = 1; i <= n; i++){\n        a.push(i * i - i + 1)\n    }\n    let count = 0\n    for (let i = 0; i < n; i++){\n        for (let j = i + 1; j < n; j++){\n            for (let k = j + 1; k < n; k++){\n                if ((a[i] + a[j] + a[k]) % 3 == 0){\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n", "//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for(let i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                if((a[i] + a[j] + a[k]) % 3 === 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    let result = [];\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n        for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    return planets.slice(index2 + 1, index1);\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n  return planets.slice(index1 + 1, index2);\n}\n\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let index1 = planets.indexOf(planet1)\n  let index2 = planets.indexOf(planet2)\n  if (index1 === -1 || index2 === -1) {\n    return []\n  }\n  if (index1 > index2) {\n    let temp = index1\n    index1 = index2\n    index2 = temp\n  }\n  return planets.slice(index1 + 1, index2)\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  if (index1 > index2) {\n    return planets.slice(index2 + 1, index1);\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  let result = [];\n  if (index1 === -1 || index2 === -1) {\n    return result;\n  }\n  if (index1 > index2) {\n    [index1, index2] = [index2, index1];\n  }\n  for (let i = index1 + 1; i < index2; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n    var result = [];\n    if (index1 === -1 || index2 === -1) {\n        return result;\n    }\n    if (index1 > index2) {\n        var temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for (var i = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  var planet1Index = planets.indexOf(planet1);\n  var planet2Index = planets.indexOf(planet2);\n  var result = [];\n  if (planet1Index === -1 || planet2Index === -1) {\n    return result;\n  }\n  if (planet1Index > planet2Index) {\n    var temp = planet1Index;\n    planet1Index = planet2Index;\n    planet2Index = temp;\n  }\n  for (var i = planet1Index + 1; i < planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if(index1 === -1 || index2 === -1){\n    return [];\n  }\n  if(index1 > index2){\n    let temp = index1;\n    index1 = index2;\n    index2 = temp;\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n    return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const index1 = planets.indexOf(planet1);\n  const index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  return planets.slice(Math.min(index1, index2) + 1, Math.max(index1, index2));\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n    }\n    return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  let result = [];\n  if (index1 < index2) {\n    for (let i = index1 + 1; i < index2; i++) {\n      result.push(planets[i]);\n    }\n  } else {\n    for (let i = index1 + 1; i < planets.length; i++) {\n      result.push(planets[i]);\n    }\n    for (let i = 0; i < index2; i++) {\n      result.push(planets[i]);\n    }\n  }\n  return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    var result = [];\n    if (index1 < index2) {\n        for (var i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else {\n        for (var i = index1 + 1; i < planets.length; i++) {\n            result.push(planets[i]);\n        }\n        for (var i = 0; i < index2; i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  let result = [];\n  if (index1 < index2) {\n    for (let i = index1 + 1; i < index2; i++) {\n      result.push(planets[i]);\n    }\n  } else {\n    for (let i = index1 + 1; i < planets.length; i++) {\n      result.push(planets[i]);\n    }\n    for (let i = 0; i < index2; i++) {\n      result.push(planets[i]);\n    }\n  }\n  return result;\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  let index1 = planets.indexOf(planet1)\n  let index2 = planets.indexOf(planet2)\n  let result = []\n  if (index1 === -1 || index2 === -1) {\n    return result\n  }\n  if (index1 > index2) {\n    let temp = index1\n    index1 = index2\n    index2 = temp\n  }\n  for (let i = index1 + 1; i < index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if(index1 === -1 || index2 === -1){\n    return [];\n  }\n  if(index1 > index2){\n    return planets.slice(index2 + 1, index1);\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n  if(index1 === -1 || index2 === -1){\n    return [];\n  }\n  if(index1 > index2){\n    let temp = index1;\n    index1 = index2;\n    index2 = temp;\n  }\n  return planets.slice(index1 + 1, index2);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n    }\n    if (planet1Index > planet2Index) {\n        var temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n    return planets.slice(planet1Index + 1, planet2Index);\n}\n", "//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  var index1 = planets.indexOf(planet1);\n  var index2 = planets.indexOf(planet2);\n  if (index1 === -1 || index2 === -1) {\n    return [];\n  }\n  var result = [];\n  if (index1 > index2) {\n    for (var i = index2 + 1; i < index1; i++) {\n      result.push(planets[i]);\n    }\n  } else {\n    for (var i = index1 + 1; i < index2; i++) {\n      result.push(planets[i]);\n    }\n  }\n  return result;\n}\n"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var sorted_list = lst.sort(function(a, b){\n        return a.length - b.length;\n    });\n    return sorted_list.filter(function(item){\n        return item.length % 2 === 0;\n    });\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let new_lst = []\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i].length % 2 === 0){\n            new_lst.push(lst[i])\n        }\n    }\n    return new_lst.sort()\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_list = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return new_lst.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 === 0) {\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  var sorted_list = lst.filter(function(x){\n    return x.length % 2 === 0;\n  });\n  return sorted_list.sort(function(a,b){\n    return a.length - b.length;\n  });\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  var result = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i].length % 2 === 0){\n      result.push(lst[i]);\n    }\n  }\n  return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let result = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort();\n    return new_lst;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return new_lst.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            result.push(lst[i]);\n        }\n    }\n    return result.sort();\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let sorted_list = lst.sort((a,b) => a.length - b.length);\n    let result = [];\n    for(let i = 0; i < sorted_list.length; i++){\n        if(sorted_list[i].length % 2 === 0){\n            result.push(sorted_list[i]);\n        }\n    }\n    return result;\n}\n", "//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i].length % 2 === 0){\n            new_lst.push(lst[i]);\n        }\n    }\n    return new_lst.sort();\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n % 2 === 0) {\n        return y;\n    }\n    else {\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n == 2){\n        return x;\n    }\n    else if(n % 2 == 0){\n        return y;\n    }\n    else{\n        for(let i = 3; i <= Math.sqrt(n); i += 2){\n            if(n % i == 0){\n                return y;\n            }\n        }\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 != 0 && n % n == 0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n%2==0 || n%3==0 || n%5==0 || n%7==0)\n        return y;\n    else\n        return x;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n > 1){\n        for(let i = 2; i < n; i++){\n            if(n % i === 0){\n                return y;\n            }\n        }\n        return x;\n    }\n    return y;\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n%2!=0 && n%3!=0 && n%5!=0 && n%7!=0 && n%11!=0 && n%13!=0 && n%17!=0 && n%19!=0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 != 0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 != 0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % 2 != 0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 || n % 97 == 0) {\n        return y;\n    } else {\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n % 2 == 0) {\n        return y;\n    }\n    else {\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n%2!=0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n%2==0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n === 2){\n        return x;\n    }\n    else if(n === 3){\n        return x;\n    }\n    else if(n === 5){\n        return x;\n    }\n    else if(n === 7){\n        return x;\n    }\n    else if(n === 11){\n        return x;\n    }\n    else if(n === 13){\n        return x;\n    }\n    else if(n === 17){\n        return x;\n    }\n    else if(n === 19){\n        return x;\n    }\n    else if(n === 23){\n        return x;\n    }\n    else if(n === 29){\n        return x;\n    }\n    else if(n === 31){\n        return x;\n    }\n    else if(n === 37){\n        return x;\n    }\n    else if(n === 41){\n        return x;\n    }\n    else if(n === 43){\n        return x;\n    }\n    else if(n === 47){\n        return x;\n    }\n    else if(n === 53){\n        return x;\n    }\n    else if(n === 59){\n        return x;\n    }\n    else if(n === 61){\n        return x;\n    }\n    else if(n === 67){\n        return x;\n    }\n    else if(n === 71){\n        return x;\n    }\n    else if(n === 73){\n        return x;\n    }\n    else if(n === 79){\n        return x;\n    }\n    else if", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(isPrime(n)){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\n", "//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n % 2 != 0) {\n        return x;\n    }\n    else {\n        return y;\n    }\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0 && lst[i] >= 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] >= 0){\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] >= 0 && Number.isInteger(lst[i])) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (lst[i] % 2 === 1 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (lst[i] % 2 === 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1 && lst[i] >= 0 && Number.isInteger(lst[i])) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 1 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(typeof lst[i] === 'number' && lst[i] % 2 !== 0 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n", "//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i] ** 2;\n        }\n    }\n    return sum;\n}\n"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((score, index) => Math.abs(score - guess[index]));\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((el, i) => Math.abs(el - guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((el, i) => Math.abs(el - guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((x, i) => Math.abs(x - guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = []\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]))\n  }\n  return result\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((item, index) => Math.abs(item - guess[index]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  return game.map((score, i) => Math.abs(score - guess[i]))\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i=0; i<game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for(let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n", "//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let result = [];\n  for (let i = 0; i < game.length; i++){\n    result.push(Math.abs(game[i] - guess[i]));\n  }\n  return result;\n}\n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let upper = 0;\n    let lower = 0;\n    let strength = 0;\n    let strongest = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        upper = 0;\n        lower = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        strength = upper - lower;\n        if (strength > 0) {\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let result = \"\";\n    let max = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let upper = 0;\n        let lower = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            }\n            else{\n                lower++;\n            }\n        }\n        let strength = upper - lower;\n        if(strength > max){\n            max = strength;\n            result = class_name + \".\" + extensions[i];\n        }\n    }\n    return result;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    var max = 0;\n    var max_ext = \"\";\n    for (var i = 0; i < extensions.length; i++){\n        var ext = extensions[i];\n        var cap = 0;\n        var sm = 0;\n        for (var j = 0; j < ext.length; j++){\n            if (ext[j] === ext[j].toUpperCase()){\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        var strength = cap - sm;\n        if (strength > max){\n            max = strength;\n            max_ext = ext;\n        }\n    }\n    return class_name + \".\" + max_ext;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let result = 0;\n    let strongest = \"\";\n    for (let i = 0; i < extensions.length; i++){\n        let upper = 0;\n        let lower = 0;\n        for (let j = 0; j < extensions[i].length; j++){\n            if (extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            }\n            else if (extensions[i][j] === extensions[i][j].toLowerCase()){\n                lower++;\n            }\n        }\n        let strength = upper - lower;\n        if (strength > result){\n            result = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongest = 0;\n  let strongest_index = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let upper = 0;\n    let lower = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        upper++;\n      } else {\n        lower++;\n      }\n    }\n    if (upper - lower > strongest) {\n      strongest = upper - lower;\n      strongest_index = i;\n    }\n  }\n  return class_name + \".\" + extensions[strongest_index];\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongest_ext = extensions[0];\n  let strongest_ext_strength = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = extensions[i].toUpperCase().length - extensions[i].toLowerCase().length;\n    if (strength > strongest_ext_strength) {\n      strongest_ext = extensions[i];\n      strongest_ext_strength = strength;\n    }\n  }\n  return class_name + \".\" + strongest_ext;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let result = 0;\n    let strongest = extensions[0];\n    for (let i = 0; i < extensions.length; i++) {\n        let current = extensions[i];\n        let upper = current.match(/[A-Z]/g).length;\n        let lower = current.match(/[a-z]/g).length;\n        let strength = upper - lower;\n        if (strength > result) {\n            result = strength;\n            strongest = current;\n        }\n    }\n    return `${class_name}.${strongest}`;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let upper = 0;\n    let lower = 0;\n    let max = 0;\n    let index = 0;\n    for(let i = 0; i < extensions.length; i++){\n        upper = 0;\n        lower = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            }\n            else{\n                lower++;\n            }\n        }\n        if(upper - lower > max){\n            max = upper - lower;\n            index = i;\n        }\n    }\n    return class_name + \".\" + extensions[index];\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let max_index = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let upper = 0;\n        let lower = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            }\n            else{\n                lower++;\n            }\n        }\n        if(upper - lower > max){\n            max = upper - lower;\n            max_index = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let upper = 0;\n    let lower = 0;\n    let strength = 0;\n    let strongest = \"\";\n    for(let i = 0; i < extensions.length; i++){\n        upper = 0;\n        lower = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            }\n            else{\n                lower++;\n            }\n        }\n        strength = upper - lower;\n        if(strength > 0){\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max = -Infinity;\n  let strongest = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n    if (strength > max) {\n      max = strength;\n      strongest = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let result = class_name + \".\" + extensions[0];\n    let max = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let current = extensions[i];\n        let upper = 0;\n        let lower = 0;\n        for (let j = 0; j < current.length; j++) {\n            if (current[j] === current[j].toUpperCase()) {\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        let strength = upper - lower;\n        if (strength > max) {\n            max = strength;\n            result = class_name + \".\" + current;\n        }\n    }\n    return result;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                strength++;\n            } else {\n                strength--;\n            }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let max = 0;\n    let strongest = \"\";\n    for(let i = 0; i < extensions.length; i++){\n        let upper = 0;\n        let lower = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            }\n            else if(extensions[i][j] === extensions[i][j].toLowerCase()){\n                lower++;\n            }\n        }\n        let strength = upper - lower;\n        if(strength > max){\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let current_strength = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                current_strength += 1;\n            } else {\n                current_strength -= 1;\n            }\n        }\n        if (current_strength > strongest_strength) {\n            strongest_strength = current_strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let upper = 0;\n    let lower = 0;\n    let strength = 0;\n    let strongest = \"\";\n    let strongest_strength = 0;\n    for (let i = 0; i < extensions.length; i++){\n        upper = 0;\n        lower = 0;\n        for (let j = 0; j < extensions[i].length; j++){\n            if (extensions[i][j] === extensions[i][j].toUpperCase()){\n                upper++;\n            } else {\n                lower++;\n            }\n        }\n        strength = upper - lower;\n        if (strength > strongest_strength){\n            strongest_strength = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let strongest_extension = extensions[0];\n  let strongest_extension_strength = 0;\n  for(let i = 0; i < extensions.length; i++){\n    let current_extension = extensions[i];\n    let current_extension_strength = 0;\n    for(let j = 0; j < current_extension.length; j++){\n      if(current_extension[j] === current_extension[j].toUpperCase()){\n        current_extension_strength++;\n      }\n      else{\n        current_extension_strength--;\n      }\n    }\n    if(current_extension_strength > strongest_extension_strength){\n      strongest_extension = current_extension;\n      strongest_extension_strength = current_extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let result = class_name + \".\" + extensions[0];\n  let max = 0;\n  for (let i = 0; i < extensions.length; i++) {\n    let current = extensions[i];\n    let upper = 0;\n    let lower = 0;\n    for (let j = 0; j < current.length; j++) {\n      if (current[j] === current[j].toUpperCase()) {\n        upper++;\n      } else {\n        lower++;\n      }\n    }\n    let strength = upper - lower;\n    if (strength > max) {\n      max = strength;\n      result = class_name + \".\" + current;\n    }\n  }\n  return result;\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max = -Infinity;\n  let max_index = -1;\n  for (let i = 0; i < extensions.length; i++) {\n    let strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n    if (strength > max) {\n      max = strength;\n      max_index = i;\n    }\n  }\n  return class_name + \".\" + extensions[max_index];\n}\n", "//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  let max = 0;\n  let strongest = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let upper = 0;\n    let lower = 0;\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        upper++;\n      } else {\n        lower++;\n      }\n    }\n    let strength = upper - lower;\n    if (strength > max) {\n      max = strength;\n      strongest = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest;\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length){\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) === b){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) === b) return true;\n        if(a.slice(i, i + b.length) === b.slice(b.length - i, b.length)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var b_len = b.length;\n    var a_len = a.length;\n    var b_arr = b.split(\"\");\n    var a_arr = a.split(\"\");\n    var b_arr_len = b_arr.length;\n    var a_arr_len = a_arr.length;\n    var b_arr_rotated = [];\n    var b_arr_rotated_len = 0;\n    var b_arr_rotated_len_max = 0;\n    var b_arr_rotated_len_min = 0;\n    var b_arr_rotated_len_max_index = 0;\n    var b_arr_rotated_len_min_index = 0;\n    var b_arr_rotated_len_max_index_prev = 0;\n    var b_arr_rotated_len_min_index_prev = 0;\n    var b_arr_rotated_len_max_index_prev_prev = 0;\n    var b_arr_rotated_len_min_index_prev_prev = 0;\n    var b_arr_rotated_len_max_index_prev_prev_prev = 0;\n    var b_arr_rotated_len_min_index_prev_prev_prev = 0;\n    var b_arr_rotated_len_max_index_prev_prev_prev_prev = 0;\n    var b_arr_rotated_len_min_index_", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(var i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) == b) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length){\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        let temp = a.slice(i, i + b.length);\n        if(temp == b){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) == b) return true;\n        if(a.slice(i, i + b.length) == b.slice(b.length - i, b.length)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if (a.length < b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n        if (a.slice(i, i + b.length) === b) return true;\n        if (a.slice(i, i + b.length) === b.slice(b.length - i) + b.slice(0, b.length - i)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if (a.length < b.length) return false;\n    if (a.includes(b)) return true;\n    for (let i = 0; i < a.length; i++) {\n        let rotated = a.slice(i) + a.slice(0, i);\n        if (rotated.includes(b)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length){\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        let temp = a.slice(i, a.length) + a.slice(0, i);\n        if(temp.indexOf(b) > -1){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var rotations = [];\n    for(var i = 0; i < a.length; i++){\n        rotations.push(a.substring(i) + a.substring(0, i));\n    }\n    return rotations.indexOf(b) != -1;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if (a.length < b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n        if (a.indexOf(b) >= 0) return true;\n        a = a.substr(1) + a.charAt(0);\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length){\n        return false;\n    }\n    for(let i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) === b){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if (a.length < b.length) return false;\n    for (var i = 0; i < a.length; i++) {\n        if (a.substring(i, i + b.length) === b) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(var i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) == b){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(var i = 0; i < a.length; i++){\n        if(a.substring(i, i + b.length) == b) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    for(i = 0; i < a.length; i++){\n        for(j = 0; j < b.length; j++){\n            if(a[i] == b[j]){\n                for(k = i + 1; k < a.length; k++){\n                    for(l = j + 1; l < b.length; l++){\n                        if(a[k] == b[l]){\n                            for(m = k + 1; m < a.length; m++){\n                                for(n = l + 1; n < b.length; n++){\n                                    if(a[m] == b[n]){\n                                        for(o = m + 1; o < a.length; o++){\n                                            for(p = n + 1; p < b.length; p++){\n                                                if(a[o] == b[p]){\n                                                    for(q = o + 1; q < a.length; q++){\n                                                        for(r = p + 1; r < b.length; r++){\n                                                            if(a[q] == b[r]){\n                                                                for(s = q + 1; s < a.length; s++){\n                                                                    for(t = r + 1; t <", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length){\n        return false;\n    }\n    for(var i = 0; i < a.length; i++){\n        if(a.substring(i, i + b.length) == b){\n            return true;\n        }\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(let i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) === b) return true;\n        if(a.slice(i, i + b.length) === b.slice(b.length) + b.slice(0, b.length)) return true;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    if(a.length < b.length) return false;\n    for(var i = 0; i < a.length; i++){\n        if(a.slice(i, i + b.length) == b) return true;\n        if(a.slice(i, i + b.length).length < b.length) break;\n    }\n    return false;\n}\n", "//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if (a.length < b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a.slice(i, i + b.length) === b) return true;\n    if (a.slice(i, i + b.length) === b.slice(b.length - i) + b.slice(0, b.length - i)) return true;\n  }\n  return false;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let numString = num.toString();\n    for(let i = 0; i < numString.length; i++){\n        if(Number(numString[i]) % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let numStr = num.toString();\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_string = num.toString();\n    for(let i = 0; i < num_string.length; i++){\n        if(parseInt(num_string[i]) % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(num_str[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let str = num.toString();\n    for(let i = 0; i < str.length; i++){\n        if(Number(str[i]) % 2 === 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let numStr = num.toString();\n    for(let i = 0; i < numStr.length; i++){\n        if(parseInt(numStr[i]) % 2 === 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_string = num.toString();\n    for(let i = 0; i < num_string.length; i++){\n        if(parseInt(num_string[i]) % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    var even = 0;\n    var odd = 0;\n    var num_str = num.toString();\n    for(var i = 0; i < num_str.length; i++){\n        if(num_str[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(num_str[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0){\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(num_str[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let numStr = num.toString();\n    for(let i = 0; i < numStr.length; i++){\n        if(numStr[i] % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(num_str[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    var even = 0;\n    var odd = 0;\n    var numString = num.toString();\n    for(var i = 0; i < numString.length; i++){\n        if(parseInt(numString[i]) % 2 === 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(num_str[i] % 2 == 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 === 0){\n            even++;\n        }\n        else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n", "//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let even = 0;\n    let odd = 0;\n    let num_str = num.toString();\n    for(let i = 0; i < num_str.length; i++){\n        if(parseInt(num_str[i]) % 2 == 0){\n            even++;\n        }else{\n            odd++;\n        }\n    }\n    return [even, odd];\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let digits = number.toString().split(\"\");\n    let digit = digits.pop();\n    let digit_count = 0;\n    while(digit){\n        if(digit == 9){\n            roman += \"ix\";\n        }else if(digit == 8){\n            roman += \"viii\";\n        }else if(digit == 7){\n            roman += \"vii\";\n        }else if(digit == 6){\n            roman += \"vi\";\n        }else if(digit == 5){\n            roman += \"v\";\n        }else if(digit == 4){\n            roman += \"iv\";\n        }else if(digit == 3){\n            roman += \"iii\";\n        }else if(digit == 2){\n            roman += \"ii\";\n        }else if(digit == 1){\n            roman += \"i\";\n        }\n        digit_count++;\n        digit = digits.pop();\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = \"\";\n    var digits = number.toString().split(\"\");\n    var digit = digits.length - 1;\n    var digit_value = 0;\n    var current_digit = 0;\n    var current_digit_value = 0;\n    var current_digit_roman = \"\";\n    var current_digit_roman_length = 0;\n    var current_digit_roman_index = 0;\n    var current_digit_roman_char = \"\";\n    var current_digit_roman_char_value = 0;\n    var current_digit_roman_char_index = 0;\n    var current_digit_roman_char_next = \"\";\n    var current_digit_roman_char_next_value = 0;\n    var current_digit_roman_char_next_index = 0;\n    var current_digit_roman_char_next_next = \"\";\n    var current_digit_roman_char_next_next_value = 0;\n    var current_digit_roman_char_next_next_index = 0;\n    var current_digit_roman_char_next_next_next = \"\";\n    var current_digit_roman_char_next_next_next_value = 0;\n    var current_digit_roman_char_next_next_next_index = 0;\n    var current_digit_roman_char_next_next_next_next = \"\";\n    var current_digit_roman_char_next_next_next_next_value = 0;\n    var current_digit_rom", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = \"\";\n    var roman_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    for(var key in roman_map){\n        while(number >= key){\n            roman += roman_map[key];\n            number -= key;\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let num = number;\n    let digits = [];\n    let digit = 0;\n    let digit_count = 0;\n    let digit_string = \"\";\n    let digit_string_length = 0;\n    let digit_string_length_limit = 0;\n    let digit_string_length_limit_multiplier = 1;\n    let digit_string_length_limit_multiplier_limit = 3;\n    let digit_string_length_limit_multiplier_limit_reached = false;\n    let digit_string_length_limit_multiplier_limit_reached_count = 0;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit = 3;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit_reached = false;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit_reached_count = 0;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit_reached_count_limit = 3;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit_reached_count_limit_reached = false;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit_reached_count_limit_reached_count = 0;\n    let digit_string_length_limit_multiplier_limit_reached_count_limit_reached_count_limit_reached_count_limit = ", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let roman_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    let keys = Object.keys(roman_map);\n    keys.sort((a,b) => b - a);\n    for(let key of keys){\n        let count = Math.floor(number / key);\n        roman += roman_map[key].repeat(count);\n        number -= key * count;\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = \"\";\n    var roman_numbers = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    for (var i in roman_numbers) {\n        while (number >= i) {\n            roman += roman_numbers[i];\n            number -= i;\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  let digits = number.toString().split(\"\");\n  let digit = digits.pop();\n  let digit_count = digits.length;\n  let digit_map = {\n    \"1\": \"i\",\n    \"2\": \"ii\",\n    \"3\": \"iii\",\n    \"4\": \"iv\",\n    \"5\": \"v\",\n    \"6\": \"vi\",\n    \"7\": \"vii\",\n    \"8\": \"viii\",\n    \"9\": \"ix\",\n    \"0\": \"x\"\n  };\n  while(digit_count > 0){\n    roman = digit_map[digit] + roman;\n    digit_count--;\n    if(digit_count > 0){\n      digit = digits.pop();\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = \"\";\n    var roman_numerals = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000\n    };\n    var roman_numerals_keys = Object.keys(roman_numerals);\n    var roman_numerals_values = Object.values(roman_numerals);\n    var roman_numerals_keys_length = roman_numerals_keys.length;\n    var roman_numerals_values_length = roman_numerals_values.length;\n    var roman_numerals_keys_length_half = Math.floor(roman_numerals_keys_length / 2);\n    var roman_numerals_values_length_half = Math.floor(roman_numerals_values_length / 2);\n    var roman_numerals_keys_length_half_index = roman_numerals_keys_length_half - 1;\n    var roman_numerals_values_length_half_index = roman_numerals_values_length_half - 1;\n    var roman_numerals_keys_length_half_index_plus_one = roman_numerals_keys_length_half;\n    var roman_numerals_values_length_half_index_plus_one = roman_numerals_values_length_half;\n    var roman_numerals_keys_length_half_index_minus_one = roman_numerals_keys_length_half - 2", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    };\n    var result = '';\n    var keys = Object.keys(roman);\n    keys.sort(function(a, b){\n        return b - a;\n    });\n    for(var i = 0; i < keys.length; i++){\n        while(number >= keys[i]){\n            result += roman[keys[i]];\n            number -= keys[i];\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  let roman_numerals = {\n    1: \"i\",\n    4: \"iv\",\n    5: \"v\",\n    9: \"ix\",\n    10: \"x\",\n    40: \"xl\",\n    50: \"l\",\n    90: \"xc\",\n    100: \"c\",\n    400: \"cd\",\n    500: \"d\",\n    900: \"cm\",\n    1000: \"m\"\n  };\n  let keys = Object.keys(roman_numerals);\n  keys.reverse();\n  for(let i = 0; i < keys.length; i++){\n    let key = keys[i];\n    let value = roman_numerals[key];\n    while(number >= key){\n      roman += value;\n      number -= key;\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let result = \"\";\n  let num = number;\n  let roman = {\n    \"I\": 1,\n    \"V\": 5,\n    \"X\": 10,\n    \"L\": 50,\n    \"C\": 100,\n    \"D\": 500,\n    \"M\": 1000\n  };\n  let romanKeys = Object.keys(roman);\n  let romanValues = Object.values(roman);\n  let romanKeysLength = romanKeys.length;\n  let romanValuesLength = romanValues.length;\n  let romanKeysLengthMinusOne = romanKeysLength - 1;\n  let romanValuesLengthMinusOne = romanValuesLength - 1;\n  let romanKeysLengthMinusTwo = romanKeysLength - 2;\n  let romanValuesLengthMinusTwo = romanValuesLength - 2;\n  let romanKeysLengthMinusThree = romanKeysLength - 3;\n  let romanValuesLengthMinusThree = romanValuesLength - 3;\n  let romanKeysLengthMinusFour = romanKeysLength - 4;\n  let romanValuesLengthMinusFour = romanValuesLength - 4;\n  let romanKeysLengthMinusFive = romanKeysLength - 5;\n  let romanValuesLengthMinusFive = romanValuesLength - 5;\n  let romanKeysLengthMinusSix = romanKeysLength - 6;\n  let romanValuesLengthMinusSix = romanValuesLength - 6;\n  let romanKeysLengthMinusSeven = romanKeysLength - 7;\n  let romanValuesLengthMinusSeven = romanValuesLength - 7", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let digits = number.toString().split(\"\");\n    let digit = digits.length - 1;\n    let digit_value = 0;\n    let digit_value_next = 0;\n    let digit_value_next_next = 0;\n    let digit_value_next_next_next = 0;\n    let digit_value_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next_next_next_next_next_next = 0;\n    let digit_value_next_next_next_next_next_next_next_next_next_next_next_", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  var roman = '';\n  var roman_map = {\n    1: 'i',\n    5: 'v',\n    10: 'x',\n    50: 'l',\n    100: 'c',\n    500: 'd',\n    1000: 'm'\n  };\n  var roman_keys = Object.keys(roman_map).reverse();\n  var remainder = number;\n  for(var i = 0; i < roman_keys.length; i++){\n    var key = roman_keys[i];\n    var value = roman_map[key];\n    var quotient = Math.floor(remainder / key);\n    remainder = remainder % key;\n    if(quotient <= 3){\n      for(var j = 0; j < quotient; j++){\n        roman += value;\n      }\n    } else if(quotient == 4){\n      roman += value + roman_map[key * 5];\n    } else if(quotient == 5){\n      roman += roman_map[key * 5];\n    } else if(quotient == 9){\n      roman += roman_map[key * 10] + roman_map[key];\n    } else if(quotient > 9){\n      roman += roman_map[key] + roman_map[key * 10];\n    }\n  }\n  return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let roman_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    let keys = Object.keys(roman_map);\n    keys.sort((a, b) => b - a);\n    for (let key of keys) {\n        while (number >= key) {\n            roman += roman_map[key];\n            number -= key;\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = '';\n    var roman_numbers = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    };\n    for (var i in roman_numbers) {\n        while (number >= i) {\n            roman += roman_numbers[i];\n            number -= i;\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    var roman = \"\";\n    var roman_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    var keys = Object.keys(roman_map);\n    keys.sort(function(a, b){\n        return b - a;\n    });\n    for(var i = 0; i < keys.length; i++){\n        while(number >= keys[i]){\n            roman += roman_map[keys[i]];\n            number -= keys[i];\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let result = \"\";\n    let roman = {\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    };\n    let keys = Object.keys(roman).reverse();\n    for(let i = 0; i < keys.length; i++){\n        let key = keys[i];\n        let value = roman[key];\n        while(number >= key){\n            result += value;\n            number -= key;\n        }\n    }\n    return result;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let num = number;\n    let roman_num = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    };\n    for(let i in roman_num){\n        while(num >= i){\n            roman += roman_num[i];\n            num -= i;\n        }\n    }\n    return roman;\n}\n", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  let roman_numbers = {\n    1: \"i\",\n    5: \"v\",\n    10: \"x\",\n    50: \"l\",\n    100: \"c\",\n    500: \"d\",\n    1000: \"m\"\n  };\n  let roman_numbers_keys = Object.keys(roman_numbers);\n  let roman_numbers_values = Object.values(roman_numbers);\n  let roman_numbers_keys_length = roman_numbers_keys.length;\n  let roman_numbers_values_length = roman_numbers_values.length;\n  let roman_numbers_keys_length_half = Math.floor(roman_numbers_keys_length / 2);\n  let roman_numbers_values_length_half = Math.floor(roman_numbers_values_length / 2);\n  let roman_numbers_keys_length_half_plus_one = roman_numbers_keys_length_half + 1;\n  let roman_numbers_values_length_half_plus_one = roman_numbers_values_length_half + 1;\n  let roman_numbers_keys_length_half_plus_one_minus_one = roman_numbers_keys_length_half_plus_one - 1;\n  let roman_numbers_values_length_half_plus_one_minus_one = roman_numbers_values_length_half_plus_one - 1;\n  let roman_numbers_keys_length_half_plus_one_minus_two = roman_numbers_keys_length_half_plus_one_minus_one", "//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman = \"\";\n    let num = number;\n    let nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    for(let i = 0; i < nums.length; i++){\n        while(num >= nums[i]){\n            roman += romans[i];\n            num -= nums[i];\n        }\n    }\n    return roman;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a){\n        return true;\n    }\n    return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 == c**2 || b**2 + c**2 == a**2 || a**2 + c**2 == b**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    return (a**2 + b**2 == c**2)\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a**2 + b**2 == c**2 || b**2 + c**2 == a**2 || a**2 + c**2 == b**2){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  var max = Math.max(a, b, c);\n  var min = Math.min(a, b, c);\n  var mid = a + b + c - max - min;\n  return Math.pow(max, 2) == Math.pow(min, 2) + Math.pow(mid, 2);\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 === c**2 || b**2 + c**2 === a**2 || c**2 + a**2 === b**2) {\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  return false;\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a*a + b*b == c*c){\n    return true;\n  }\n  else if(a*a + c*c == b*b){\n    return true;\n  }\n  else if(b*b + c*c == a*a){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n        return true\n    }\n    else{\n        return false\n    }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    return (a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2)\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if (a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  return (a**2 + b**2 == c**2) || (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2)\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a**2 + b**2 == c**2 || a**2 + c**2 == b**2 || b**2 + c**2 == a**2){\n        return true;\n    }\n    return false;\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max_word = words[0];\n    var max_count = 0;\n    for(var i = 0; i < words.length; i++){\n        var word = words[i];\n        var count = 0;\n        for(var j = 0; j < word.length; j++){\n            var char = word[j];\n            if(word.indexOf(char) == j){\n                count++;\n            }\n        }\n        if(count > max_count){\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = words[0];\n    for(let i = 0; i < words.length; i++){\n        let word = words[i];\n        let unique = new Set(word.split(\"\"));\n        if(unique.size > max){\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max_word = words[0];\n    var max_count = 0;\n    for(var i = 0; i < words.length; i++){\n        var count = 0;\n        var word = words[i];\n        for(var j = 0; j < word.length; j++){\n            if(word.indexOf(word[j]) == j){\n                count++;\n            }\n        }\n        if(count > max_count){\n            max_count = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for(let word of words){\n        let unique = new Set(word);\n        if(unique.size > max){\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for (let word of words){\n        let unique = new Set(word);\n        if (unique.size > max){\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  var max = 0;\n  var max_word = \"\";\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n    var unique = 0;\n    for(var j = 0; j < word.length; j++){\n      if(word.indexOf(word[j]) == j){\n        unique++;\n      }\n    }\n    if(unique > max){\n      max = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for (var i = 1; i < words.length; i++) {\n        if (words[i].length > max.length) {\n            max = words[i];\n        } else if (words[i].length == max.length) {\n            if (words[i] < max) {\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  var max = 0;\n  var max_word = \"\";\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n    var unique = 0;\n    for(var j = 0; j < word.length; j++){\n      if(word.indexOf(word[j]) == j){\n        unique++;\n      }\n    }\n    if(unique > max){\n      max = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  var max = 0;\n  var max_word = \"\";\n  for(var i = 0; i < words.length; i++){\n    var word = words[i];\n    var unique = 0;\n    for(var j = 0; j < word.length; j++){\n      var char = word[j];\n      if(word.indexOf(char) == j){\n        unique++;\n      }\n    }\n    if(unique > max){\n      max = unique;\n      max_word = word;\n    }\n  }\n  return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for(let i = 0; i < words.length; i++){\n        let unique = new Set(words[i]);\n        if(unique.size > max){\n            max = unique.size;\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max = 0;\n    let max_word = \"\";\n    for(let word of words){\n        let unique = new Set(word.split(\"\"));\n        if(unique.size > max){\n            max = unique.size;\n            max_word = word;\n        }\n    }\n    return max_word;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i = 1; i < words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n        else if(words[i].length == max.length){\n            if(words[i] < max){\n                max = words[i];\n            }\n        }\n    }\n    return max;\n}\n", "//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    var max = words[0];\n    for(var i=0; i<words.length; i++){\n        if(words[i].length > max.length){\n            max = words[i];\n        }\n    }\n    return max;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if (number + need > remaining) {\n    return [remaining, 0];\n  } else {\n    return [number + need, remaining - (number + need)];\n  }\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need\n  if (total > remaining) {\n    return [remaining, 0]\n  } else {\n    return [total, remaining - total]\n  }\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need, remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if (number + need > remaining) {\n    return [remaining, 0];\n  }\n  return [number + need, remaining - need];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need, remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if (number + need > remaining) {\n    return [remaining, 0];\n  }\n  return [number + need, remaining - need];\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need, remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + need, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let eaten = number + need\n  return eaten > remaining ? [eaten, 0] : [eaten, remaining - need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number+need, remaining-need]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + Math.min(need, remaining), remaining - Math.min(need, remaining)]\n}\n", "//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  return [number + need, remaining - need]\n}\n"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result += operand[i+1];\n    }\n    else if(operator[i] === '-'){\n      result -= operand[i+1];\n    }\n    else if(operator[i] === '*'){\n      result *= operand[i+1];\n    }\n    else if(operator[i] === '/'){\n      result /= operand[i+1];\n    }\n    else if(operator[i] === '**'){\n      result **= operand[i+1];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result += operand[i+1];\n    }\n    else if(operator[i] === '-'){\n      result -= operand[i+1];\n    }\n    else if(operator[i] === '*'){\n      result *= operand[i+1];\n    }\n    else if(operator[i] === '/'){\n      result /= operand[i+1];\n    }\n    else if(operator[i] === '**'){\n      result **= operand[i+1];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0]\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1]\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1]\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1]\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1])\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1])\n    }\n  }\n  return result\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0]\n    for(let i = 1; i < operand.length; i++){\n        if(operator[i - 1] === '+'){\n            result += operand[i]\n        }\n        else if(operator[i - 1] === '-'){\n            result -= operand[i]\n        }\n        else if(operator[i - 1] === '*'){\n            result *= operand[i]\n        }\n        else if(operator[i - 1] === '/'){\n            result /= operand[i]\n        }\n        else if(operator[i - 1] === '**'){\n            result **= operand[i]\n        }\n    }\n    return result\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result += operand[i + 1];\n    }\n    else if(operator[i] === '-'){\n      result -= operand[i + 1];\n    }\n    else if(operator[i] === '*'){\n      result *= operand[i + 1];\n    }\n    else if(operator[i] === '//'){\n      result = Math.floor(result / operand[i + 1]);\n    }\n    else if(operator[i] === '**'){\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] == '+') {\n            result += operand[i + 1];\n        } else if (operator[i] == '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] == '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] == '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] == '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n            result += operand[i + 1];\n        }\n        else if(operator[i] === '-'){\n            result -= operand[i + 1];\n        }\n        else if(operator[i] === '*'){\n            result *= operand[i + 1];\n        }\n        else if(operator[i] === '//'){\n            result = Math.floor(result / operand[i + 1]);\n        }\n        else if(operator[i] === '**'){\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result += operand[i + 1];\n    } else if(operator[i] === '-'){\n      result -= operand[i + 1];\n    } else if(operator[i] === '*'){\n      result *= operand[i + 1];\n    } else if(operator[i] === '//'){\n      result = Math.floor(result / operand[i + 1]);\n    } else if(operator[i] === '**'){\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '/') {\n      result /= operand[i + 1];\n    } else if (operator[i] === '**') {\n      result **= operand[i + 1];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] == '+'){\n      result += operand[i+1];\n    }\n    else if(operator[i] == '-'){\n      result -= operand[i+1];\n    }\n    else if(operator[i] == '*'){\n      result *= operand[i+1];\n    }\n    else if(operator[i] == '//'){\n      result = Math.floor(result / operand[i+1]);\n    }\n    else if(operator[i] == '**'){\n      result = Math.pow(result, operand[i+1]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 1; i < operand.length; i++) {\n        if (operator[i - 1] === '+') {\n            result += operand[i];\n        } else if (operator[i - 1] === '-') {\n            result -= operand[i];\n        } else if (operator[i - 1] === '*') {\n            result *= operand[i];\n        } else if (operator[i - 1] === '/') {\n            result /= operand[i];\n        } else if (operator[i - 1] === '**') {\n            result **= operand[i];\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 1; i < operand.length; i++) {\n    if (operator[i - 1] === '+') {\n      result += operand[i];\n    } else if (operator[i - 1] === '-') {\n      result -= operand[i];\n    } else if (operator[i - 1] === '*') {\n      result *= operand[i];\n    } else if (operator[i - 1] === '//') {\n      result = Math.floor(result / operand[i]);\n    } else if (operator[i - 1] === '**') {\n      result **= operand[i];\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for(let i = 1; i < operand.length; i++){\n        switch(operator[i - 1]){\n            case '+':\n                result += operand[i];\n                break;\n            case '-':\n                result -= operand[i];\n                break;\n            case '*':\n                result *= operand[i];\n                break;\n            case '//':\n                result = Math.floor(result / operand[i]);\n                break;\n            case '**':\n                result = Math.pow(result, operand[i]);\n                break;\n        }\n    }\n    return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = operand[0];\n  for(let i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result += operand[i + 1];\n    } else if(operator[i] === '-'){\n      result -= operand[i + 1];\n    } else if(operator[i] === '*'){\n      result *= operand[i + 1];\n    } else if(operator[i] === '//'){\n      result = Math.floor(result / operand[i + 1]);\n    } else if(operator[i] === '**'){\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        if (operator[i] === '+') {\n            result += operand[i + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result / operand[i + 1]);\n        } else if (operator[i] === '**') {\n            result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = s.split('');\n    let newStr2 = [];\n    let newStr3 = [];\n    let newStr4 = [];\n    for(let i = 0; i < newStr.length; i++){\n        if(newStr[i].match(/[a-z]/i)){\n            newStr2.push(newStr[i].toUpperCase());\n        }\n        else if(newStr[i].match(/[A-Z]/i)){\n            newStr3.push(newStr[i].toLowerCase());\n        }\n        else{\n            newStr4.push(newStr[i]);\n        }\n    }\n    if(newStr2.length > 0){\n        return newStr2.join('');\n    }\n    else if(newStr3.length > 0){\n        return newStr3.join('');\n    }\n    else{\n        return newStr4.reverse().join('');\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] === s[i].toUpperCase()) {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toLowerCase()) {\n      newStr += s[i].toUpperCase();\n    } else if (s[i] === s[i].toUpperCase()) {\n      newStr += s[i].toLowerCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      newStr += s[i].toLowerCase();\n    } else if(s[i] === s[i].toLowerCase()){\n      newStr += s[i].toUpperCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      newStr += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      newStr += s[i].toUpperCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr.split('').reverse().join('');\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            newStr += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            newStr += s[i].toUpperCase();\n        } else {\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  let isLetter = false;\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === \"a\" || s[i] === \"b\" || s[i] === \"c\" || s[i] === \"d\" || s[i] === \"e\" || s[i] === \"f\" || s[i] === \"g\" || s[i] === \"h\" || s[i] === \"i\" || s[i] === \"j\" || s[i] === \"k\" || s[i] === \"l\" || s[i] === \"m\" || s[i] === \"n\" || s[i] === \"o\" || s[i] === \"p\" || s[i] === \"q\" || s[i] === \"r\" || s[i] === \"s\" || s[i] === \"t\" || s[i] === \"u\" || s[i] === \"v\" || s[i] === \"w\" || s[i] === \"x\" || s[i] === \"y\" || s[i] === \"z\" || s[i] === \"A\" || s[i] === \"B\" || s[i] === \"C\" || s[i] === \"D\" || s[i] === \"E\" || s[i] === \"F\" || s[i] === \"G\" || s[i] === \"H\" || s[i] === \"I\" || s[i] === \"J\" || s[i] === \"K\" || s[i] === \"L\" || s[i] === \"M\" || s", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = '';\n  let isLetter = false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() !== s[i].toUpperCase()) {\n      isLetter = true;\n      if (s[i] === s[i].toLowerCase()) {\n        newStr += s[i].toUpperCase();\n      } else {\n        newStr += s[i].toLowerCase();\n      }\n    } else {\n      newStr += s[i];\n    }\n  }\n  if (!isLetter) {\n    newStr = s.split('').reverse().join('');\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      newStr += s[i].toLowerCase();\n    } else if (s[i] === s[i].toLowerCase()) {\n      newStr += s[i].toUpperCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = \"\";\n    if (s.match(/[a-zA-Z]/g)) {\n        for (let i = 0; i < s.length; i++) {\n            if (s[i].match(/[a-z]/g)) {\n                newStr += s[i].toUpperCase();\n            } else if (s[i].match(/[A-Z]/g)) {\n                newStr += s[i].toLowerCase();\n            } else {\n                newStr += s[i];\n            }\n        }\n    } else {\n        for (let i = s.length - 1; i >= 0; i--) {\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  if (s.match(/[a-zA-Z]/g) == null) {\n    return s.split('').reverse().join('');\n  }\n  else {\n    return s.split('').map(function(char) {\n      if (char.match(/[a-zA-Z]/g)) {\n        return char.toUpperCase() == char ? char.toLowerCase() : char.toUpperCase();\n      }\n      else {\n        return char;\n      }\n    }).join('');\n  }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = \"\";\n    let isLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i].toLowerCase() != s[i].toUpperCase()){\n            isLetter = true;\n            if(s[i] == s[i].toLowerCase()){\n                result += s[i].toUpperCase();\n            }\n            else{\n                result += s[i].toLowerCase();\n            }\n        }\n        else{\n            result += s[i];\n        }\n    }\n    if(!isLetter){\n        result = result.split(\"\").reverse().join(\"\");\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === s[i].toUpperCase()){\n      newStr += s[i].toLowerCase();\n    } else if(s[i] === s[i].toLowerCase()){\n      newStr += s[i].toUpperCase();\n    } else {\n      newStr += s[i];\n    }\n  }\n  return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = \"\";\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()){\n            newStr += s[i].toLowerCase();\n        } else if(s[i] === s[i].toLowerCase()){\n            newStr += s[i].toUpperCase();\n        } else {\n            newStr += s[i];\n        }\n    }\n    if(newStr.match(/[a-zA-Z]/g)){\n        return newStr;\n    } else {\n        return newStr.split(\"\").reverse().join(\"\");\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = \"\";\n    let isLetter = false;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] >= \"a\" && s[i] <= \"z\"){\n            newStr += s[i].toUpperCase();\n            isLetter = true;\n        }\n        else if(s[i] >= \"A\" && s[i] <= \"Z\"){\n            newStr += s[i].toLowerCase();\n            isLetter = true;\n        }\n        else{\n            newStr += s[i];\n        }\n    }\n    if(!isLetter){\n        return s.split(\"\").reverse().join(\"\");\n    }\n    return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = \"\";\n    if (s.match(/[a-zA-Z]/g)){\n        for (let i = 0; i < s.length; i++){\n            if (s[i].match(/[a-z]/g)){\n                newStr += s[i].toUpperCase();\n            } else if (s[i].match(/[A-Z]/g)){\n                newStr += s[i].toLowerCase();\n            } else {\n                newStr += s[i];\n            }\n        }\n    } else {\n        for (let i = s.length - 1; i >= 0; i--){\n            newStr += s[i];\n        }\n    }\n    return newStr;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = \"\";\n    let isLetter = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() != s[i].toUpperCase()) {\n            isLetter = true;\n            if (s[i] == s[i].toLowerCase()) {\n                result += s[i].toUpperCase();\n            } else {\n                result += s[i].toLowerCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter) {\n        result = s.split(\"\").reverse().join(\"\");\n    }\n    return result;\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newStr = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase()) {\n            newStr += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase()) {\n            newStr += s[i].toUpperCase();\n        } else {\n            newStr += s[i];\n        }\n    }\n    if (newStr.match(/[a-z]/i)) {\n        return newStr.split(\"\").reverse().join(\"\");\n    } else {\n        return newStr;\n    }\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let newStr = s.split(\"\");\n  let result = [];\n  for (let i = 0; i < newStr.length; i++) {\n    if (newStr[i].match(/[a-zA-Z]/)) {\n      if (newStr[i].match(/[a-z]/)) {\n        result.push(newStr[i].toUpperCase());\n      } else {\n        result.push(newStr[i].toLowerCase());\n      }\n    } else {\n      result.push(newStr[i]);\n    }\n  }\n  return result.join(\"\");\n}\n", "//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let newString = \"\";\n    let isLetter = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/g)) {\n            isLetter = true;\n            if (s[i].match(/[a-z]/g)) {\n                newString += s[i].toUpperCase();\n            } else {\n                newString += s[i].toLowerCase();\n            }\n        } else {\n            newString += s[i];\n        }\n    }\n    if (!isLetter) {\n        newString = newString.split(\"\").reverse().join(\"\");\n    }\n    return newString;\n}\n"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\") {\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text.length === 0){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\") {\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if(text === \"\"){\n    return undefined;\n  }\n  return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\") {\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\") {\n    return undefined;\n  }\n  return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === \"\"){\n    return undefined;\n  }\n  return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if (text === \"\") {\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n", "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    if(text === \"\"){\n        return undefined;\n    }\n    return CryptoJS.MD5(text).toString();\n}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for (let i = min; i <= max; i++) {\n        let num = i.toString();\n        if (num.length > 1) {\n            if (num[0] % 2 === 0) {\n                result.push(num[0]);\n            }\n            if (num[1] % 2 === 0) {\n                result.push(num[1]);\n            }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let num = i.toString();\n        if(num.length === 1){\n            result.push(i);\n        }\n        else{\n            let even = num.split('').filter(x => x % 2 === 0);\n            if(even.length === 0){\n                continue;\n            }\n            else{\n                result.push(i);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n                result.push(num[j]);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    if (a > b) {\n        [a, b] = [b, a];\n    }\n    for (let i = a; i <= b; i++) {\n        let str = i.toString();\n        if (str.length == 1) {\n            result.push(i);\n        } else {\n            let even = str.split('').filter(x => x % 2 == 0).join('');\n            if (even) {\n                result.push(parseInt(even));\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n                result.push(num[j]);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for (let i = min; i <= max; i++) {\n        let str = i.toString();\n        if (str.length === 1) {\n            if (str % 2 === 0) {\n                result.push(i);\n            }\n        } else {\n            let first = str[0];\n            let second = str[1];\n            if (first % 2 === 0 && second % 2 === 0) {\n                result.push(i);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let num = i.toString();\n        if(num.length > 1){\n            let even = num.split('').filter(x => x % 2 === 0);\n            if(even.length > 0){\n                result.push(even.join(''));\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for (let i = start; i <= end; i++){\n        let num = i.toString();\n        for (let j = 0; j < num.length; j++){\n            if (num[j] % 2 === 0){\n                result.push(num[j]);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for (let i = min; i <= max; i++) {\n        let num = i.toString();\n        for (let j = 0; j < num.length; j++) {\n            if (num[j] % 2 === 0) {\n                result.push(num[j]);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let num = i.toString();\n        if(num.length === 1){\n            result.push(i);\n        }else{\n            let even = num.split('').filter(x => x % 2 === 0);\n            if(even.length > 0){\n                result.push(even.join(''));\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for(let i = start; i <= end; i++){\n        let num = i.toString();\n        if(num.length === 1){\n            result.push(i);\n        }\n        else{\n            let even = num.split('').filter(x => x % 2 === 0);\n            if(even.length === 0){\n                continue;\n            }\n            else{\n                result.push(i);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for (let i = min; i <= max; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let start = Math.min(a, b);\n    let end = Math.max(a, b);\n    for (let i = start; i <= end; i++){\n        let num = i.toString();\n        if (num.length > 1 && num[0] % 2 === 0 && num[1] % 2 === 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let result = [];\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n    for(let i = min; i <= max; i++){\n        let num = i.toString();\n        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n                result.push(num[j]);\n            }\n        }\n    }\n    return result;\n}\n", "//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let result = [];\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n  for(let i = min; i <= max; i++){\n    if(i % 2 === 0){\n      result.push(i);\n    }\n  }\n  return result;\n}\n"]]